openapi: 3.0.0
info:
  contact:
    email: api@turbo-smtp.com
  description: "This document describes all public turboSMTP **V2** API and offers\
    \ endpoints Descriptions, Parameters, Requests, Responses and Samples of usage.\n\
    \n[Click here to view the previous version of turboSMTP Public API Version 1.0](https://www.serversmtp.com/turbo-api-1)\n\
    \n\n# Security\nFor the most part (and where not otherwise explicit) turboSMTP’\
    s API requires Authorization. \n\nAuthorization to access a user’s resource is\
    \ granted to clients provided they set  authentication headers into their request,\
    \ valued with the proper values issued by turboSMTP servers.\n\n## *  Authorization\
    \ via ConsumerKey/ConsumerSecret\n\nThis type of authorization consists of a pair\
    \ of headers, named consumerKey and consumerSecret that are created and granted\
    \ to the end user to be used in a permanent way (unless they´re deleted of course).\
    \ This kind of authentication is intended to provide access to endpoints features\
    \ without the need of providing the user the account details (email address +\
    \ password).\n\n*consumerKey:* Consumer Key Granted.\n\n*consumerSecret:* Consumer\
    \ Secret Granted.\n\n(Use [/consumerKeys/create](#/consumerkey/createConsumerKey)\
    \ create a consumer key/secret pair).    \n\n## *  Authorization via Authentication\
    \ Key\n\nThe authentication key is user-based and it is issued by turboSMTP servers\
    \ upon successful user’s email address + password challenge, performed by means\
    \ of appropriate request.    \n\n*Authorization:* Authorization_Key\n\n(Use [/authentication/authorize](#/authentication/AuthenticationLogin)\
    \ to obtain an API Key)\n\n# Data Interchange Format\n\nFor the most part (and\
    \ where not otherwise explicit) turboSMTP’s API uses JSON as the data format of\
    \ choice when it comes to request and response bodies.\n\n\n\n  \n"
  title: TurboSMTP Public APIs
  version: 2.0.0-oas3
servers:
- description: turboSMTP Staging Server
  url: https://staging.api.serversmtp.com/api/v2
- description: Radwan Dev Server
  url: http://185.228.39.82:8084/api/v2
- description: turboSMTP Production Server
  url: https://pro.api.serversmtp.com/api/v2
tags:
- description: Authentication
  name: authentication
- description: Send email message
  name: mail
- description: Suppressions
  name: suppressions
- description: Meta
  name: meta
- description: Billing
  name: billing
- description: Email Validator
  name: email-validator
- description: Subaccounts
  name: subaccounts
- description: Alerts
  name: alerts
- description: Analytics
  name: analytics
- description: Api Keys
  name: consumerkey
paths:
  /authorize:
    post:
      description: |
        **This endpoint allows you to get an API Key**

        By providing your turboSMTP authentication details you will be able to get an API Key.

        Use your API Key to consume APIs that require authorization.
      operationId: AuthenticationLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationLoginRequestBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationLoginSucessResponsetBody'
          description: |
            Sucess

            User logged in sucessfully, use the auth value as API Key from request body in future API calls.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonBadRequestResponseBody'
          description: |
            Bad Request

            ###### Produces:

            * missing_required_parameter
        "403":
          content:
            application/json:
              example:
                message: wrong_credentials_specified
              schema:
                $ref: '#/components/schemas/CommonMessageResponseBody'
          description: "Forbidden\n\nEmail address or password provided are incorrect.\n\
            \n###### Produces: \n\n* wrong_credentials_specified\n"
      summary: Login - Get API Key
      tags:
      - authentication
  /deauthorize:
    post:
      description: |
        **This endpoint allows you to revoke your API Key**
      operationId: AuthenticationLogout
      responses:
        "200":
          content:
            application/json:
              example:
                message: token_deauthorized
              schema:
                $ref: '#/components/schemas/CommonMessageResponseBody'
          description: |
            Sucess

            User logged out sucessfully, API Key is no longer valid.
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: Logout - Revoke API Key
      tags:
      - authentication
  /change-password:
    put:
      description: |
        **This endpoint allows you to change your current password**

        ## PASSWORD RULES

          * Passwords must have at least 10 characters.
          * At least one character must be uppercase.
          * At least one character must be lowercase.
          * At least one character must be numeric.
      operationId: ChangePassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequestBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonSuccessResponseBody'
          description: "Sucess\n\nPassword changed sucessfully.   \n"
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangePasswordBadRequestResponseBody'
          description: "Bad Request\n\n###### Produces:\n\n* invalid_mail_address\n\
            * current_password_is_missing\n* current_password_can_not_be_empty\n*\
            \ password_is_missing\n* password_length_should_not_be_less_than_10_characters\n\
            * password_should_contain_at_least_one_uppercase_character\n* password_should_contain_at_least_one_lowercase_character\n\
            * password_should_contain_at_least_one_digit\n* confirm_password_is_missing\n\
            * password_should_equal_confirm_password\n* new_password_should_not_equal_current_password\
            \            \n"
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
        "403":
          content:
            application/json:
              example:
                message: password_is_invalid
              schema:
                $ref: '#/components/schemas/CommonMessageResponseBody'
          description: "Forbidden\n\nCurrent password provided is incorrect.\n\n######\
            \ Produces: \n\n* password_is_invalid\n* not_allowed_for_apikey\n"
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: Change turboSMTP password
      tags:
      - authentication
  /forgot-password:
    get:
      description: |
        Forgot Password - check if secret token is valid

        **Note**: Tokens are valid for 1 hour.
      operationId: CheckValidityTokenResetPassword
      parameters:
      - description: Secret Token
        explode: true
        in: query
        name: token
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonSuccessResponseBody'
          description: "Sucess\n\nToken is valid.  \n"
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckValidityTokenResetPasswordBadRequestResponseBody'
          description: |
            Bad Request

            ###### Produces:

            * forgot_password_token_is_missing
        "403":
          content:
            application/json:
              example:
                message: token_is_invalid
              schema:
                $ref: '#/components/schemas/CommonMessageResponseBody'
          description: "Forbidden\n\nToken is invalid.  \n"
      security:
      - ApiKeyAuth: []
      summary: Forgot Password - Verify if Secret Passord Recovery token is valid.
      tags:
      - authentication
    post:
      description: |
        **This endpoint will allow you to get an email that will help you reset your turboSMTP password**

        In your password reset email you will find:

        * A **Reset Password** button that will take you to the password reset form on turboSMTP website.
        * A secret token to be used to reset the password via [/authentication/forgot-password](#/authentication/updateResetPassword). **Note**: Token is vaid for 1 hour.
      operationId: SendSecretTokenResetPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendSecretTokenResetPasswordRequestBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonSuccessResponseBody'
          description: "Sucess\n\nPassword reset email with instructions was sent\
            \ to your turboSMTP email account.   \n"
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendSecretTokenResetPasswordBadRequestResponseBody'
          description: "Bad Request\n\n###### Produces:\n\n* empty_request_body\n\
            * missing_required_parameter   \n"
        "404":
          content:
            application/json:
              example:
                message: email_not_found
              schema:
                $ref: '#/components/schemas/CommonMessageResponseBody'
          description: |
            Not Found

            Please verify the email address provided is the one you used to register at turboSMTP.
      summary: Forgot Password - Use in case you don´t remember your turboSMTP password
      tags:
      - authentication
    put:
      description: |
        **This endpoint allows you to reset your password by using a password reset token**

        ## PASSWORD RULES

          * Passwords must have at least 10 characters.
          * At least one character must be uppercase.
          * At least one character must be lowercase.
          * At least one character must be numeric.
      operationId: UpdateResetPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateResetPasswordRequestBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonSuccessResponseBody'
          description: "Sucess\n\nPassword reset sucessfully.   \n"
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateResetPasswordBadRequestResponseBody'
          description: |
            Bad Request

            ###### Produces:

            * empty_request_body
            * token_is_missing
            * token_can_not_be_empty
            * password_is_missing
            * password_length_should_not_be_less_than_10_characters
            * password_should_contain_at_least_one_uppercase_character
            * password_should_contain_at_least_one_lowercase_character
            * password_should_contain_at_least_one_digit
            * confirm_password_is_missing
            * password_should_equal_confirm_password
        "403":
          content:
            application/json:
              example:
                message: token_is_invalid
              schema:
                $ref: '#/components/schemas/CommonMessageResponseBody'
          description: "Forbidden\n\nToken is invalid.  \n"
      summary: Forgot Password - change password
      tags:
      - authentication
  /mail/send:
    post:
      description: "Send email message\n\n###### **Notes:**\n**- When using API Keys\
        \ (suggested authentication method), authuser and authpass properties should\
        \ not be included.**\n\n**- Switch to \"Complete Email Send Request Body\"\
        \ sample to learn about advanced features such as using attachments, custom\
        \ headers like reply-to address, tracking and others.**\n\n###### Limitations:\n\
        \    \n* The total size of your email, including attachments, must be less\
        \ than 24MB.\n"
      operationId: sendEmail
      requestBody:
        content:
          application/json:
            examples:
              Short:
                summary: Simple Email Send Request Body
                value:
                  authuser: user@example.com
                  authpass: SMkhhf4J68XX
                  from: user@example.com
                  to: "user@example.com,user2@example.com"
                  subject: This is a test message
                  cc: cc_user@example.com
                  bcc: bcc_user@example.com
                  content: This is plain text version of the message.
                  html_content: This is <b>HTML</b> version of the message.
              Full:
                summary: Complete Email Send Request Body
                value:
                  authuser: user@example.com
                  authpass: SMkhhf4J68XX
                  from: user@example.com
                  to: "user@example.com,user2@example.com"
                  subject: This is a test message
                  cc: cc_user@example.com
                  bcc: bcc_user@example.com
                  content: This is plain text version of the message.
                  html_content: This is <b>HTML</b> version of the message.
                  custom_headers:
                    List-Unsubscribe: <https://www.example.com/unlist?id=8822772727>
                    X-Entity-Ref-ID: 4ec7b020-51dc-442f-bd39-9b0a32c3eb83
                    Tracking-Id: "888884433"
                    reply-to: alternative-email@domain.com
                  mime_raw: string
                  reference_id: string
                  attachments:
                  - content: dXBsb2FkZXIxQGdtYWlsLmNvbQ0KdXBsb2FkZXIyQGdtYWlsLmNvbQ0KYWJjMQ==
                    name: list.txt
                    type: text/plain
            schema:
              $ref: '#/components/schemas/EmailRequestBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendSucessResponsetBody'
          description: |
            Sucess

            Turbo-SMTP successfully received your message.
        "400":
          content:
            application/json:
              examples:
                MissingSender:
                  summary: Sender mail address (from) has not been issued or is invalid
                  value:
                    message: error
                    errors:
                    - missing or not valid sender email (from)
                MissingRecipients:
                  summary: Recipients mail addresses (to) have not been issued
                  value:
                    message: error
                    errors:
                    - missing recipients (to)
                InvalidRecipients:
                  summary: "Invalid email addresses in to, cc or bcc fields"
                  value:
                    message: error
                    errors:
                    - - '''abc'' ''to'' email not valid'
                      - '''cc_@ab1'' ''cc'' email not valid'
                      - '''bcc_@ab3'' ''bcc'' email not valid'
                InvalidMime:
                  summary: Invalid MIME content
                  value:
                    message: error
                    errors:
                      message: error
                      errors: Invalid Mime
                InsuficientCredit:
                  summary: Not enought credit in account subscription
                  value:
                    message: error
                    errors:
                      message: error
                      errors: nocredit
              schema:
                $ref: '#/components/schemas/SendBadRequestResponseBody'
          description: |
            Bad Request

            There was a problem processing the request due to an invalid/missing parameter for the request.
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationToken:
                  summary: UserName and/or Password where not properly issued via
                    authuser/authpass
                  value:
                    errorCode: 3
                    message: Invalid authorization token
                    details: "No authorization key was specified for request: POST\
                      \ /api/mail/send"
                InvalidAuthorizationToken:
                  summary: Invalid Username / Password
                  value:
                    error: 3
                    message: Wrong credentials specified
                DeactivatedAccount:
                  summary: Account is innactive
                  value:
                    error: 3
                    message: Account for developer@your-domain.com is inactive
              schema:
                $ref: '#/components/schemas/SendUnauthorizedResponseBody'
          description: |
            Unauthorized

            Missing or Invalid Turbo-SMTP credentials provided.
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      servers:
      - description: turboSMTP SEND production server
        url: https://api.turbo-smtp.com/api/v2
      summary: Send email message
      tags:
      - mail
  /suppressions/import:
    post:
      description: |2

        Import Suppressions
      operationId: importSuppressions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuppressionImportJson'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SuppressionImportFile'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuppressionUploadResponse'
          description: |
            Sucess

            Email Addresses were imported.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuppressionUploadBadRequestResponseBody'
          description: |
            Bad Request

            ###### Produces:

            * missing_upload_file
            * invalid_mail_address_list
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: Import Suppressions
      tags:
      - suppressions
  /suppressions:
    get:
      description: |
        Get Suppressions Data
      operationId: getSuppressions
      parameters:
      - description: Page number
        example: 1
        explode: true
        in: query
        name: page
        required: false
        schema:
          $ref: '#/components/schemas/Page'
        style: form
      - description: The numbers of rows per page to return
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          $ref: '#/components/schemas/PageLimit'
        style: form
      - description: Start date
        example: 2020-01-01
        explode: true
        in: query
        name: from
        required: true
        schema:
          $ref: '#/components/schemas/FromDate'
        style: form
      - description: End date
        example: 2025-12-31
        explode: true
        in: query
        name: to
        required: true
        schema:
          $ref: '#/components/schemas/ToDate'
        style: form
      - description: Timezone Offset
        example: -07:00
        explode: true
        in: query
        name: tz
        required: false
        schema:
          $ref: '#/components/schemas/Timezone'
        style: form
      - description: "Text to search (recipient, sender, email subject or reason for\
          \ suppression)"
        examples:
          byemail:
            summary: Search for recipient or sender.
            value: Jhon.Doe@gmail.com
          bytitle:
            summary: Search for email title.
            value: September 2022
          byreason:
            summary: Search for imported supressions.
            value: Imported removal request
        explode: true
        in: query
        name: filter
        required: false
        schema:
          $ref: '#/components/schemas/SuppressionFilter'
        style: form
      - explode: true
        in: query
        name: filter_by
        required: false
        schema:
          $ref: '#/components/schemas/SuppressionFilterBy'
        style: form
      - description: Smart search
        example: false
        explode: true
        in: query
        name: smart_search
        required: false
        schema:
          $ref: '#/components/schemas/SmartSearch'
        style: form
      - explode: true
        in: query
        name: orderby
        required: false
        schema:
          $ref: '#/components/schemas/SuppressionOrderBy'
        style: form
      - explode: true
        in: query
        name: ordertype
        required: false
        schema:
          $ref: '#/components/schemas/OrderType'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuppressionsSucessResponsetBody'
          description: |
            Sucess

            Get Filtered Suppressions Data.
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: Get Suppressions Data
      tags:
      - suppressions
    post:
      description: |
        Get Suppressions Data
      operationId: filterSuppressions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuppressionFilterOrderPageRequestBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuppressionsSucessResponsetBody'
          description: |
            Sucess

            Get Filtered Suppressions Data.
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: Filter suppressions
      tags:
      - suppressions
  /suppressions/csv:
    get:
      description: |
        Export Suppressions data in CSV file
      operationId: exportSuppressionsDataCSV
      parameters:
      - description: Start date
        example: 2020-01-01
        explode: true
        in: query
        name: from
        required: true
        schema:
          $ref: '#/components/schemas/FromDate'
        style: form
      - description: End date
        example: 2025-12-31
        explode: true
        in: query
        name: to
        required: true
        schema:
          $ref: '#/components/schemas/ToDate'
        style: form
      - description: Timezone Offset
        example: -07:00
        explode: true
        in: query
        name: tz
        required: false
        schema:
          $ref: '#/components/schemas/Timezone'
        style: form
      - description: "Text to search (recipient, sender, email subject or reason for\
          \ suppression)"
        examples:
          byemail:
            summary: Search for recipient or sender.
            value: Jhon.Doe@gmail.com
          bytitle:
            summary: Search for email title.
            value: September 2022
          byreason:
            summary: Search for imported supressions.
            value: Imported removal request
        explode: true
        in: query
        name: filter
        required: false
        schema:
          $ref: '#/components/schemas/SuppressionFilter'
        style: form
      - explode: true
        in: query
        name: filter_by
        required: false
        schema:
          $ref: '#/components/schemas/SuppressionFilterBy'
        style: form
      - description: Smart search
        example: false
        explode: true
        in: query
        name: smart_search
        required: false
        schema:
          $ref: '#/components/schemas/SmartSearch'
        style: form
      - explode: true
        in: query
        name: orderby
        required: false
        schema:
          $ref: '#/components/schemas/SuppressionOrderBy'
        style: form
      - explode: true
        in: query
        name: ordertype
        required: false
        schema:
          $ref: '#/components/schemas/OrderType'
        style: form
      responses:
        "200":
          content:
            text/csv:
              schema:
                example: |
                  Status;Subject;From;To;Date;Reason
                  FAIL;"new email alert";msaad@emailchef.com;a.shatata@emailchef.com;2022-06-28T15:08:37.821Z;"199.187.175.11 does not like recipient.
                  Remote host said: 550 5.1.1 <a.shatata@emailchef.com>: Recipient address rejected: User unknown in virtual mailbox table
                  {199.244.75.250}{550} Giving up on 199.187.175.11.
                  "
                  MANUAL;;;mohamed@test.com;2022-06-18T19:51:04.914Z;
                  FAIL;"Test sending email";msaad@emailchef.com;mshatta@yahoo.com;2021-05-03T12:21:48.000Z;"67.195.204.73 failed after I sent the message. Remote host said: 554 30 Sorry, your message to mshatta@yahoo.com cannot be delivered. This mailbox is disabled (554.30). "
                  FAIL;"Test sending email";msaad@emailchef.com;mohamed_s_shatta@gmail.com;2021-05-03T12:21:04.000Z;"142.250.138.26 does not like recipient. Remote host said: 550-5.1.1 The email account that you tried to reach does not exist. Please try 550-5.1.1 double-checking the recipient's email address for typos or 550-5.1.1 unnecessary spaces. Learn more at 550 5.1.1  https://support.google.com/mail/?p=NoSuchUser g15si5159810otg.85 - gsmtp {199.244.75.250}{550} Giving up on 142.250.138.26. "
                type: string
          description: Suppressions CSV data
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: Export Suppressions data in CSV file
      tags:
      - suppressions
    post:
      description: |
        Export Filtered Suppressions
      operationId: exportFilterSuppressions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuppressionFilterRequestBody'
        required: true
      responses:
        "200":
          content:
            text/csv:
              schema:
                example: |
                  Status;Subject;From;To;Date;Reason
                  FAIL;"new email alert";msaad@emailchef.com;a.shatata@emailchef.com;2022-06-28T15:08:37.821Z;"199.187.175.11 does not like recipient.
                  Remote host said: 550 5.1.1 <a.shatata@emailchef.com>: Recipient address rejected: User unknown in virtual mailbox table
                  {199.244.75.250}{550} Giving up on 199.187.175.11.
                  "
                  MANUAL;;;mohamed@test.com;2022-06-18T19:51:04.914Z;
                  FAIL;"Test sending email";msaad@emailchef.com;mshatta@yahoo.com;2021-05-03T12:21:48.000Z;"67.195.204.73 failed after I sent the message. Remote host said: 554 30 Sorry, your message to mshatta@yahoo.com cannot be delivered. This mailbox is disabled (554.30). "
                  FAIL;"Test sending email";msaad@emailchef.com;mohamed_s_shatta@gmail.com;2021-05-03T12:21:04.000Z;"142.250.138.26 does not like recipient. Remote host said: 550-5.1.1 The email account that you tried to reach does not exist. Please try 550-5.1.1 double-checking the recipient's email address for typos or 550-5.1.1 unnecessary spaces. Learn more at 550 5.1.1  https://support.google.com/mail/?p=NoSuchUser g15si5159810otg.85 - gsmtp {199.244.75.250}{550} Giving up on 142.250.138.26. "
                type: string
          description: Suppressions CSV data
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: Export filtered suppressions
      tags:
      - suppressions
  /suppressions/bulk_delete:
    post:
      description: |
        Bulk delete suppressions
      operationId: bulkDeleteSuppressions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuppressionBulkDeleteRequestBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuppressionsDeleteSuccess'
          description: Suppressions were sucessfully deleted.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonBadRequestResponseBody'
          description: |
            Bad Request

            ###### Produces:

            * no_contacts_were_provided
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: Bulk delete suppressions
      tags:
      - suppressions
  /suppressions/delete:
    post:
      description: |
        Delete suppressions
      operationId: deleteFilterSuppressions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuppressionFilterRequestBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuppressionsDeleteSuccess'
          description: deleted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonBadRequestResponseBody'
          description: "Bad Request\n\n###### Produces:\n\n* \n"
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: Delete suppressions
      tags:
      - suppressions
  /meta/countries:
    get:
      description: |
        Get countries
      operationId: getCountries
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountryList'
          description: Countries list
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: Get countries
      tags:
      - meta
  /meta/state/{isoCode}:
    get:
      description: |
        Get states by country
      operationId: getStatesByCountry
      parameters:
      - description: Country ISO code
        explode: false
        in: path
        name: isoCode
        required: true
        schema:
          example: ES
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StateList'
          description: States selected
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
        "404":
          content:
            application/json:
              example:
                message: invalid_iso_code
              schema:
                $ref: '#/components/schemas/CommonMessageResponseBody'
          description: |
            Not Found

            Please verify the Country Iso Code Provided.
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: Get states by country
      tags:
      - meta
  /billing/buy_emailvalidation_credits:
    post:
      description: |2

        Buy Email Validator Credits
      operationId: buyEmailValidatorCredits
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuyEmailValidatorCreditsRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuyEmailValidatorCreditsSucessResponse'
          description: "Sucess\n\nReturns url to the billing system to allow payment\
            \ completition. \n"
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuyEmailValidatorCreditsBadRequestResponseBody'
          description: |
            Bad Request

            ###### Produces:

            * missing_required_parameter_amount
            * amount_should_be_integer
            * amount_should_not_be_less_than_15
            * amount_should_not_be_higher_than_1800
            * can_not_buy_extra_credit_without_active_plan
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: Buy Email Validator Credits
      tags:
      - billing
  /emailvalidation/subscription:
    get:
      description: |2

        This endpoint allows to get details about remaining credit / balance for email validation.
      operationId: getEmailValidationSubscription
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailValidatorSubscription'
          description: |
            Sucess

            Email Validation Subscription.

            #### Note: ####

            * Free credits are measured in credits units, each credit enables 1 email validation.

            * Paid credits represent available monetary balance, as email vaidations are performed, balance will be deduced, cost per email validation is variable depending on ammount of validated emails.
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: Get Email Validation subscription
      tags:
      - email-validator
  /emailvalidation/upload:
    post:
      description: |2

        Upload file for email validation
      operationId: uploadEmailValidationFile
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/uploadEmailValidationFile_request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailValidationUploadResponse'
          description: |
            Sucess

            Uploaded file was created at the server.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailValidatorUploadBadRequestResponseBody'
          description: |
            Bad Request

            ###### Produces:

            * missing_upload_file
            * invalid_mail_address_list
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: Upload file for email validation
      tags:
      - email-validator
  /emailvalidation/lists:
    get:
      description: |2

        List files for email validation information
      operationId: getEmailValidationLists
      parameters:
      - description: Page number
        example: 1
        explode: true
        in: query
        name: page
        required: false
        schema:
          $ref: '#/components/schemas/Page'
        style: form
      - description: The numbers of rows per page to return
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          $ref: '#/components/schemas/PageLimit'
        style: form
      - description: Start date
        example: 2020-01-01
        explode: true
        in: query
        name: from
        required: true
        schema:
          $ref: '#/components/schemas/FromDate'
        style: form
      - description: End date
        example: 2025-12-31
        explode: true
        in: query
        name: to
        required: true
        schema:
          $ref: '#/components/schemas/ToDate'
        style: form
      - description: Timezone Offset
        example: -07:00
        explode: true
        in: query
        name: tz
        required: false
        schema:
          $ref: '#/components/schemas/Timezone'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailValidatorSucessResponsetBody'
          description: |
            Sucess

            Get Email Validation Lists Data.
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: Get Email validation lists information
      tags:
      - email-validator
  /emailvalidation/lists/{Id}:
    delete:
      description: |2

        Delete email validation list
      operationId: deleteEmailValidationListById
      parameters:
      - description: Id
        explode: false
        in: path
        name: Id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailValidatorListDeleteSuccess'
          description: |
            Sucess

            Email validation list was deleted.
        "404":
          content:
            application/json:
              example:
                message: list_not_found
              schema:
                $ref: '#/components/schemas/CommonMessageResponseBody'
          description: |
            Not Found

            Please verify the list id is valid.
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: Delete email validation list
      tags:
      - email-validator
    get:
      description: |2

        Get Email validation list details
      operationId: getEmailValidationListSummary
      parameters:
      - description: Id
        explode: false
        in: path
        name: Id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailValidatorList'
          description: |
            Sucess

            Get Email Validation List Data.
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
        "404":
          content:
            application/json:
              example:
                message: list_not_found
              schema:
                $ref: '#/components/schemas/CommonMessageResponseBody'
          description: |
            Not Found

            Please verify the list id is valid.
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: Get Email validation list details
      tags:
      - email-validator
  /emailvalidation/lists/{Id}/validate:
    post:
      description: |
        Validate list in Email Validator
      operationId: validateEmailValidatorList
      parameters:
      - description: Id
        explode: false
        in: path
        name: Id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          description: |
            Sucess

            List was validated sucessfully.
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailValidatorValidateListBadRequestResponseBody'
          description: |
            Bad Request

            ###### Produces:

            * list_already_validated
            * insufficient_credit
        "404":
          content:
            application/json:
              example:
                message: list_not_found
              schema:
                $ref: '#/components/schemas/CommonMessageResponseBody'
          description: |
            Not Found

            Please verify the list id is valid.
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: |
        Validate list in Email Validator
      tags:
      - email-validator
  /emailvalidation/lists/{Id}/emails:
    get:
      description: |2

        Get Validated Emails by Email Validation List
      operationId: getValidatedEmailsByList
      parameters:
      - description: Page number
        example: 1
        explode: true
        in: query
        name: page
        required: false
        schema:
          $ref: '#/components/schemas/Page'
        style: form
      - description: The numbers of rows per page to return
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          $ref: '#/components/schemas/PageLimit'
        style: form
      - description: Id
        explode: false
        in: path
        name: Id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                ValidatedList:
                  summary: Example for a list that has been validated
                  value:
                    count: 2
                    processed: 2
                    results:
                    - email: mail@thearter-gallery.eu
                      id: 500157
                      status: do_not_mail
                      sub_status: null
                      free_email: null
                      domain: thearter-gallery.eu
                      domain_age_days: null
                      smtp_provider: null
                      mx_found: null
                      mx_record: null
                    - email: staffdevelopment@guidingteachers.org
                      id: 500158
                      status: valid
                      sub_status: null
                      free_email: null
                      domain: guidingteachers.org
                      domain_age_days: null
                      smtp_provider: null
                      mx_found: null
                      mx_record: null
                NotValidatedList:
                  summary: Example for a list that has not been validated yet
                  value:
                    count: 2
                    processed: 0
                    results: []
              schema:
                $ref: '#/components/schemas/EmailValidatorValidatedMailsResults'
          description: |
            Sucess

            Get Email Validation List Data.
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
        "404":
          content:
            application/json:
              example:
                message: list_not_found
              schema:
                $ref: '#/components/schemas/CommonMessageResponseBody'
          description: |
            Not Found

            Please verify the list id is valid.
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: Get Validated Emails by Email Validation List
      tags:
      - email-validator
  /emailvalidation/lists/{Id}/emails/{emailId}:
    get:
      description: |2

        Get Email validation data by email ID.
      operationId: getEmailValidationDataByEmailId
      parameters:
      - description: Id
        explode: false
        in: path
        name: Id
        required: true
        schema:
          type: integer
        style: simple
      - description: Email validation ID obtained from the list.
        explode: false
        in: path
        name: emailId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailValidatorListEmailDetails'
          description: "Sucess\n\nDetails of validated email address. \n\n**Note**:\
            \ Make sure to check the complete \"status\" and \"sub_status\" properties\
            \ documentation from the schema.\n"
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
        "404":
          content:
            application/json:
              examples:
                InvalidListId:
                  summary: Invalid List Id
                  value:
                    message: list_not_found
                InvalidEmailId:
                  summary: Invalid Email Id
                  value:
                    message: email_not_found
              schema:
                $ref: '#/components/schemas/CommonMessageResponseBody'
          description: |
            Not Found

            Please verify the list id and email id are valid.
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: Get Email validation data by email ID.
      tags:
      - email-validator
  /emailvalidation/lists/{Id}/csv:
    get:
      description: |2

        Export Validated Emails by Email Validation List to CSV File
      operationId: exportCSVValidatedEmailsByList
      parameters:
      - description: Id
        explode: false
        in: path
        name: Id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            text/csv:
              schema:
                example: "Status;Subject;From;To;Date;Reason\nFAIL;\"new email alert\"\
                  ;msaad@emailchef.com;a.shatata@emailchef.com;2022-06-28T15:08:37.821Z;\"\
                  199.187.175.11 does not like recipient.\nRemote host said: 550 5.1.1\
                  \ <a.shatata@emailchef.com>: Recipient address rejected: User unknown\
                  \ in virtual mailbox table\n{199.244.75.250}{550} Giving up on 199.187.175.11.\n\
                  \"\nMANUAL;;;mohamed@test.com;2022-06-18T19:51:04.914Z;\nFAIL;\"\
                  Test sending email\";msaad@emailchef.com;mshatta@yahoo.com;2021-05-03T12:21:48.000Z;\"\
                  67.195.204.73 failed after I sent the message. Remote host said:\
                  \ 554 30 Sorry, your message to mshatta@yahoo.com cannot be delivered.\
                  \ This mailbox is disabled (554.30). \"\nFAIL;\"Test sending email\"\
                  ;msaad@emailchef.com;mohamed_s_shatta@gmail.com;2021-05-03T12:21:04.000Z;\"\
                  142.250.138.26 does not like recipient. Remote host said: 550-5.1.1\
                  \ The email account that you tried to reach does not exist. Please\
                  \ try 550-5.1.1 double-checking the recipient's email address for\
                  \ typos or 550-5.1.1 unnecessary spaces. Learn more at 550 5.1.1\
                  \  https://support.google.com/mail/?p=NoSuchUser g15si5159810otg.85\
                  \ - gsmtp {199.244.75.250}{550} Giving up on 142.250.138.26. \"\
                  \    \n"
                type: string
          description: |
            Sucess

            Validated Emails by Email Validation List CSV File
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
        "404":
          content:
            application/json:
              example:
                message: list_not_found
              schema:
                $ref: '#/components/schemas/CommonMessageResponseBody'
          description: |
            Not Found

            Please verify the list id is valid.
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: Export Validated Emails by Email Validation List to CSV File
      tags:
      - email-validator
  /emailvalidation/validateEmail:
    post:
      description: |2

        Validate singleemail adddress.
      operationId: validateEmail
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailAddressRequestBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailValidatorMailDetails'
          description: "Sucess\n\nDetails of validated email address. \n\n**Note**:\
            \ Make sure to check the complete \"status\" and \"sub_status\" properties\
            \ documentation from the schema.\n"
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailValidatorValidateBadRequestResponseBody'
          description: |
            Bad Request

            ###### Produces:

            * invalid_mail_address
            * missing_required_parameter_email
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: Validate single email address
      tags:
      - email-validator
  /subaccounts/list:
    get:
      description: |2

        List subaccounts information
      operationId: getSubaccounts
      parameters:
      - description: Page number
        example: 1
        explode: true
        in: query
        name: page
        required: false
        schema:
          $ref: '#/components/schemas/Page'
        style: form
      - description: The numbers of rows per page to return
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          $ref: '#/components/schemas/PageLimit'
        style: form
      - description: Filter by email addresses that fully/partially match the search
          value.
        explode: true
        in: query
        name: filterByEmail
        required: false
        schema:
          description: Filter by email addresses that fully/partially match the search
            value.
          example: Jhon
          type: string
        style: form
      - description: Filter by subaccount status.
        explode: true
        in: query
        name: filterByActive
        required: false
        schema:
          description: Filter by subaccount status.
          example: true
          type: boolean
        style: form
      - description: Filter by IP Addresses.
        explode: true
        in: query
        name: "filterByIP[]"
        required: false
        schema:
          description: Filter by IP Addresses.
          items:
            type: string
          type: array
        style: form
      - description: Field to sort by
        explode: true
        in: query
        name: orderby
        required: false
        schema:
          default: email
          description: Field to sort by
          enum:
          - email
          - last_used
          example: email
          type: string
        style: form
      - explode: true
        in: query
        name: ordertype
        required: false
        schema:
          $ref: '#/components/schemas/OrderType'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubAccountListSucessResponsetBody'
          description: |
            Sucess

            Subaccounts list.
        "400":
          description: |
            Bad Request

            ###### Produces:

            * page_should_be_integer
            * page_should_be_greater_than_0
            * limit_should_be_integer
            * limit_should_be_greater_than_0
            * filter_by_active_should_be_boolean
            * ip_should_be_IPV4_format
            * order_by_can_only_be_email_or_last_used
            * ordertype_should_be_asc_or_desc
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
        "403":
          content:
            application/json:
              example:
                message: feature_not_available_for_active_plan
              schema:
                $ref: '#/components/schemas/CommonMessageResponseBody'
          description: |
            Forbidden

            The current active plan does not include this feature, upgrade is required to use this feature.
        "404":
          content:
            application/json:
              example:
                message: page_not_found
              schema:
                $ref: '#/components/schemas/CommonMessageResponseBody'
          description: |
            Not Found

            Page not found.
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: Get Subaccounts lists information
      tags:
      - subaccounts
  /subaccounts/email-exists:
    get:
      description: |2

        Check if account email exists in turboSMTP
      operationId: checkIfAccountEmailExists
      parameters:
      - description: Email address.
        example: username@gmail.com
        explode: true
        in: query
        name: Email
        required: true
        schema:
          format: email
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommmonResultResponseBody'
          description: "Sucess\n\nReturns true if email address is already associated\
            \ to a turboSMTP account. \n"
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonBadRequestResponseBody'
          description: |
            Bad Request

            ###### Produces:

            * missing_required_parameter_email
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
        "403":
          content:
            application/json:
              example:
                message: feature_not_available_for_active_plan
              schema:
                $ref: '#/components/schemas/CommonMessageResponseBody'
          description: |
            Forbidden

            The current active plan does not include this feature, upgrade is required to use this feature.
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: Check if account email exists in turboSMTP
      tags:
      - subaccounts
  /subaccounts:
    post:
      description: |2

        Create subaccount.
      operationId: createSubaccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubaccountCreateRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subaccount'
          description: Sub account details.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonBadRequestResponseBody'
          description: |
            Bad Request

            ###### Produces:

            * email_is_already_in_use
            * missing_required_parameter_email
            * missing_required_parameter_first_name
            * missing_required_parameter_last_name
            * missing_required_parameter_password
            * password_length_should_not_be_less_than_10_characters
            * password_should_contain_at_least_one_uppercase_character
            * password_should_contain_at_least_one_digit
            * missing_required_parameter_confirm_password
            * password_should_equal_confirm_password
            * missing_required_parameter_ip
            * ip_should_be_IPV4_format
            * ip_not_associated_to_user_account
            * policy_agree_should_be_true
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
        "403":
          content:
            application/json:
              example:
                message: feature_not_available_for_active_plan
              schema:
                $ref: '#/components/schemas/CommonMessageResponseBody'
          description: |
            Forbidden

            The current active plan does not include this feature, upgrade is required to use this feature.
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: Create Subaccount.
      tags:
      - subaccounts
  /subaccounts/{Id}:
    get:
      description: |2

        Get sub account details.
      operationId: getSubaccountDetails
      parameters:
      - description: Id
        explode: false
        in: path
        name: Id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subaccount'
          description: Sub account details.
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
        "403":
          content:
            application/json:
              example:
                message: feature_not_available_for_active_plan
              schema:
                $ref: '#/components/schemas/CommonMessageResponseBody'
          description: |
            Forbidden

            The current active plan does not include this feature, upgrade is required to use this feature.
        "404":
          content:
            application/json:
              example:
                message: subaccount_not_found
              schema:
                $ref: '#/components/schemas/CommonMessageResponseBody'
          description: |
            Not Found

            Please verify the subaccount id is valid.
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: Get sub account details
      tags:
      - subaccounts
    patch:
      description: |2

        Update sub account details.
      operationId: updateSubaccountDetails
      parameters:
      - description: Id
        explode: false
        in: path
        name: Id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubaccountUpdateRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subaccount'
          description: Sub account updated sucessfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonBadRequestResponseBody'
          description: |
            Bad Request

            ###### Produces:

            * password_length_should_not_be_less_than_10_characters
            * password_should_contain_at_least_one_uppercase_character
            * password_should_contain_at_least_one_digit
            * password_should_equal_confirm_password
            * ip_should_be_IPV4_format
            * ip_not_associated_to_user_account
            * policy_agree_should_be_true
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
        "403":
          content:
            application/json:
              example:
                message: feature_not_available_for_active_plan
              schema:
                $ref: '#/components/schemas/CommonMessageResponseBody'
          description: |
            Forbidden

            The current active plan does not include this feature, upgrade is required to use this feature.
        "404":
          content:
            application/json:
              example:
                message: subaccount_not_found
              schema:
                $ref: '#/components/schemas/CommonMessageResponseBody'
          description: |
            Not Found

            Please verify the subaccount id is valid.
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: Update sub account details
      tags:
      - subaccounts
  /subaccounts/{Id}/updatesubaccountsmtplimit:
    post:
      description: |2

        Set subaccount smtp limit.
      operationId: UpdateSubaccountSMTPLimit
      parameters:
      - description: Id
        explode: false
        in: path
        name: Id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubaccountSMTPLimit'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubaccountActivePlan'
          description: Subaccount smtp limit set sucessfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonBadRequestResponseBody'
          description: |
            Bad Request

            ###### Produces:

            * missing_required_parameter_limit
            * limit_should_be_integer
            * limit_should_not_be_higher_than_parent_account_limit
            * limit_should_not_be_lower_than_-1
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
        "403":
          content:
            application/json:
              example:
                message: feature_not_available_for_active_plan
              schema:
                $ref: '#/components/schemas/CommonMessageResponseBody'
          description: |
            Forbidden

            The current active plan does not include this feature, upgrade is required to use this feature.
        "404":
          content:
            application/json:
              example:
                message: subaccount_not_found
              schema:
                $ref: '#/components/schemas/CommonMessageResponseBody'
          description: |
            Not Found

            Please verify the subaccount id is valid.
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: Set subaccount smtp limit
      tags:
      - subaccounts
  /subaccounts/{Id}/updatesubaccountstatus:
    post:
      description: |2

        Set subaccount status.
      operationId: UpdateSubaccountStatus
      parameters:
      - description: Id
        explode: false
        in: path
        name: Id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubaccountActiveStatus'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubaccountActivePlan'
          description: Subaccount status set sucessfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonBadRequestResponseBody'
          description: "Bad Request\n\n###### Produces:\n\n* missing_required_parameter_active\n\
            * active_should_be_boolean \n"
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
        "403":
          content:
            application/json:
              example:
                message: feature_not_available_for_active_plan
              schema:
                $ref: '#/components/schemas/CommonMessageResponseBody'
          description: |
            Forbidden

            The current active plan does not include this feature, upgrade is required to use this feature.
        "404":
          content:
            application/json:
              example:
                message: subaccount_not_found
              schema:
                $ref: '#/components/schemas/CommonMessageResponseBody'
          description: |
            Not Found

            Please verify the subaccount id is valid.
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: Set subaccount status
      tags:
      - subaccounts
  /subaccounts/authorize:
    post:
      description: |2

        Login to a subaccount.
      operationId: SubaccountAuthenticationLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Email_1'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationLoginSucessResponsetBody'
          description: |
            Sucess

            User logged in sucessfully, use the auth value as API Key from request body in future API calls.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonBadRequestResponseBody'
          description: |
            Bad Request

            ###### Produces:

            * missing_required_parameter_email
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
        "403":
          content:
            application/json:
              example:
                message: wrong_credentials_specified
              schema:
                $ref: '#/components/schemas/CommonMessageResponseBody'
          description: "Forbidden\n\nEmail address or password provided are incorrect.\n\
            \n###### Produces: \n\n* wrong_credentials_specified\n* feature_not_available_for_active_plan\n"
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: Login to a subaccount
      tags:
      - subaccounts
  /subaccounts/{Id}/active-plan:
    get:
      description: |2

        Get subaccount active plan.
      operationId: getActivePlan
      parameters:
      - description: Id
        explode: false
        in: path
        name: Id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubaccountActivePlan'
          description: Login successfull
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
        "403":
          content:
            application/json:
              example:
                message: feature_not_available_for_active_plan
              schema:
                $ref: '#/components/schemas/CommonMessageResponseBody'
          description: |
            Forbidden

            The current active plan does not include this feature, upgrade is required to use this feature.
        "404":
          content:
            application/json:
              example:
                message: subaccount_not_found
              schema:
                $ref: '#/components/schemas/CommonMessageResponseBody'
          description: |
            Not Found

            Please verify the subaccount id is valid.
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: Get subaccount active plan.
      tags:
      - subaccounts
  /subaccounts/logo:
    delete:
      description: |2

        Delete agency logo
      operationId: deleteLogoFile
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonSuccessResponseBody'
          description: |
            Sucess

            Logo was deleted.
        "404":
          content:
            application/json:
              example:
                message: logo_not_found
              schema:
                $ref: '#/components/schemas/CommonMessageResponseBody'
          description: |
            Not Found

            Agency Logo was not found.
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: Delete agency logo
      tags:
      - subaccounts
    get:
      description: |2

        Get agency logo
      operationId: getLogoFile
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Logo'
          description: |
            Agency Logo Url
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: Get agency logo
      tags:
      - subaccounts
    post:
      description: |2

        Upload agency logo.

        Logo must be a png or jpeg image.
      operationId: uploadLogoFile
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/uploadEmailValidationFile_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonSuccessResponseBody'
          description: |
            Sucess

            The Logo file was successfully submitted.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonBadRequestResponseBody'
          description: |
            Bad Request

            ###### Produces:

            * missing_upload_file
            * file_type_should_be_png_or_jpeg
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: Upload agency logo
      tags:
      - subaccounts
  /subaccounts/agency:
    get:
      description: |2

        Get Agency details.
      operationId: getAgencySettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgencySettings'
          description: Agency details.
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: Update Agency details
      tags:
      - subaccounts
    patch:
      description: |2

        Update Agency Details
      operationId: updateAgencySettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseAgencySettings'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonSuccessResponseBody'
          description: |
            Sucess

            Agency details updated sucessfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonBadRequestResponseBody'
          description: |
            Bad Request

            ###### Produces:

            * agency_name_should_be_shorter_than_128_characters
            * agency_website_should_be_shorter_than_128_characters
            * agency_footer_should_be_shorter_than_2048_characters
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: Update Agency details
      tags:
      - subaccounts
  /tools/alerts:
    get:
      description: |2

        List Alerts Notifications Information
      operationId: getAlerts
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertListSucessResponsetBody'
          description: |
            Sucess

            Alerts list.
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: Get Alerts Notifications Information
      tags:
      - alerts
    post:
      description: |2

        Create new Alert Notification
      operationId: createAlert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlertBase'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alert'
          description: |
            Sucess

            Alert Notification Created Sucessfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonBadRequestResponseBody'
          description: |
            Bad Request

            ###### Produces:

            * missing_required_parameter_email
            * missing_required_parameter_percentage
            * percentage_should_be_integer
            * percentage_should_not_be_less_than_0
            * percentage_should_not_be_higher_than_100
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: Create new Alert Notification
      tags:
      - alerts
  /tools/alerts/{Id}:
    delete:
      description: |2

        Delete an Alert Notification.
      operationId: deleteAlert
      parameters:
      - description: Id
        explode: false
        in: path
        name: Id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonSuccessResponseBody'
          description: |
            Sucess

            Alert was deleted.
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
        "404":
          content:
            application/json:
              example:
                message: alert_not_found
              schema:
                $ref: '#/components/schemas/CommonMessageResponseBody'
          description: |
            Not Found

            Please verify the alert id exists.
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: Delete Alert Notification
      tags:
      - alerts
    get:
      description: |2

        Get Alert Notification.
      operationId: getAlert
      parameters:
      - description: Id
        explode: false
        in: path
        name: Id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alert'
          description: |
            Sucess

            Alert Notification.
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
        "404":
          content:
            application/json:
              example:
                message: alert_not_found
              schema:
                $ref: '#/components/schemas/CommonMessageResponseBody'
          description: |
            Not Found

            Please verify the alert id exists.
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: Get Alert Notification
      tags:
      - alerts
    patch:
      description: |2

        Update Alert Notification.
      operationId: updateAlert
      parameters:
      - description: Id
        explode: false
        in: path
        name: Id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlertBase'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alert'
          description: |
            Sucess

            Alert updated sucessfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonBadRequestResponseBody'
          description: |
            Bad Request

            ###### Produces:

            * percentage_should_be_integer
            * percentage_should_not_be_less_than_0
            * percentage_should_not_be_higher_than_100
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
        "404":
          content:
            application/json:
              example:
                message: alert_not_found
              schema:
                $ref: '#/components/schemas/CommonMessageResponseBody'
          description: |
            Not Found

            Please verify the alert id exists.
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: Update Alert Notification
      tags:
      - alerts
  /analytics:
    get:
      description: |
        Get Analytics Data
      operationId: getAnalyticsData
      parameters:
      - description: Page number
        example: 1
        explode: true
        in: query
        name: page
        required: false
        schema:
          $ref: '#/components/schemas/Page'
        style: form
      - description: The numbers of rows per page to return
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          $ref: '#/components/schemas/PageLimit'
        style: form
      - description: Start date
        example: 2020-01-01
        explode: true
        in: query
        name: from
        required: true
        schema:
          $ref: '#/components/schemas/FromDate'
        style: form
      - description: End date
        example: 2025-12-31
        explode: true
        in: query
        name: to
        required: true
        schema:
          $ref: '#/components/schemas/ToDate'
        style: form
      - description: "Filter by Status\n\n    NEW: email has been queued for delivery\n\
          \    DEFER: email is in the queue for delivery\n    SUCCESS: email has been\
          \ delivered.\n    OPEN: email has been opened.\n    CLICK: email has been\
          \ clicked.\n    REPORT: email has been reported as spam.\n    FAIL: email\
          \ has bounced.\n    SYSFAIL: email was dropped.\n    UNSUB: email is unsubscribed.\n\
          \n<br />\nNotice that emails that fall into the above statuses can be grouped,\
          \ ie Turbo-Smtp uses the following groups:\n<br />\n\n    'Clicks' = 'CLICK',\n\
          \    'Unsubscribes' = 'UNSUB',\n    'Spam' = 'REPORT',\n    'Drop' = 'SYSFAIL',\n\
          \    'Queued' = 'NEW' or 'DEFER',\n    'Opens'= 'OPEN' or 'CLICK' or 'UNSUB'\
          \ or 'REPORT',\n    'Delivered'= 'SUCCESS'  or 'OPEN' or 'CLICK' or 'UNSUB'\
          \ or 'REPORT',\n    'Bounce': 'FAIL'.  \n"
        explode: true
        in: query
        name: "status[]"
        required: false
        schema:
          description: Filter by Status
          items:
            $ref: '#/components/schemas/AnalyticMailStatus'
          type: array
        style: form
      - description: Filter by
        explode: true
        in: query
        name: filter_by
        required: false
        schema:
          $ref: '#/components/schemas/AnalyticFilterBy'
        style: form
      - description: "Text to search (recipient, sender, email subject or reason for\
          \ suppression)"
        examples:
          bysubject:
            summary: Search for email subject.
            value: September 2022
          bysender:
            summary: Search for emai sender.
            value: Sales@gmail.com
          byrecipient:
            summary: Search for emai recipient.
            value: Jhon.Doe@gmail.com
          bydomain:
            summary: Search for recipient email domain.
            value: gmail.com
        explode: true
        in: query
        name: filter
        required: false
        schema:
          $ref: '#/components/schemas/Filter'
        style: form
      - description: Smart search
        example: false
        explode: true
        in: query
        name: smart_search
        required: false
        schema:
          $ref: '#/components/schemas/SmartSearch'
        style: form
      - description: Order by
        explode: true
        in: query
        name: orderby
        required: false
        schema:
          $ref: '#/components/schemas/AnalyticOrderBy'
        style: form
      - explode: true
        in: query
        name: ordertype
        required: false
        schema:
          $ref: '#/components/schemas/OrderType'
        style: form
      - description: Timezone Offset
        example: -07:00
        explode: true
        in: query
        name: tz
        required: false
        schema:
          $ref: '#/components/schemas/Timezone'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyticsListSucessResponsetBody'
          description: |
            Sucess

            Get Analytics Data.
        "400":
          description: "Bad Request\n\n###### Produces:\n\n* page_should_be_integer\n\
            * page_should_be_greater_than_0\n* limit_should_be_integer\n* limit_should_be_greater_than_0\n\
            * missing_required_parameter_from\n* from_format_should_be_yyyy-mm-dd\n\
            * missing_required_parameter_to\n* to_format_should_be_yyyy-mm-dd\n* missing_required_parameter_filter_by\n\
            * invalid_status_value\n* filter_by_can_only_be_subject_or_sender_or_recipient_or_domain\n\
            * smart_search_should_be_true_or_false\n* orderby_can_only_be_subject_or_sender_or_recipient_or_domain\n\
            * ordertype_should_be_asc_or_desc                  \n"
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: Get Analytics Data
      tags:
      - analytics
  /analytics/csv:
    get:
      description: |
        Export Analytics data in CSV file
      operationId: exportAnalyticsDataCSV
      parameters:
      - description: Start date
        example: 2020-01-01
        explode: true
        in: query
        name: from
        required: true
        schema:
          $ref: '#/components/schemas/FromDate'
        style: form
      - description: End date
        example: 2025-12-31
        explode: true
        in: query
        name: to
        required: true
        schema:
          $ref: '#/components/schemas/ToDate'
        style: form
      - description: "Filter by Status\n\n    NEW: email has been queued for delivery\n\
          \    DEFER: email is in the queue for delivery\n    SUCCESS: email has been\
          \ delivered.\n    OPEN: email has been opened.\n    CLICK: email has been\
          \ clicked.\n    REPORT: email has been reported as spam.\n    FAIL: email\
          \ has bounced.\n    SYSFAIL: email was dropped.\n    UNSUB: email is unsubscribed.\n\
          \n<br />\nNotice that emails that fall into the above statuses can be grouped,\
          \ ie Turbo-Smtp uses the following groups:\n<br />\n\n    'Clicks' = 'CLICK',\n\
          \    'Unsubscribes' = 'UNSUB',\n    'Spam' = 'REPORT',\n    'Drop' = 'SYSFAIL',\n\
          \    'Queued' = 'NEW' or 'DEFER',\n    'Opens'= 'OPEN' or 'CLICK' or 'UNSUB'\
          \ or 'REPORT',\n    'Delivered'= 'SUCCESS'  or 'OPEN' or 'CLICK' or 'UNSUB'\
          \ or 'REPORT',\n    'Bounce': 'FAIL'.  \n"
        explode: true
        in: query
        name: "status[]"
        required: false
        schema:
          description: Filter by Status
          items:
            $ref: '#/components/schemas/AnalyticMailStatus'
          type: array
        style: form
      - description: Filter by
        explode: true
        in: query
        name: filter_by
        required: false
        schema:
          $ref: '#/components/schemas/AnalyticFilterBy'
        style: form
      - description: "Text to search (recipient, sender, email subject or reason for\
          \ suppression)"
        examples:
          bysubject:
            summary: Search for email subject.
            value: September 2022
          bysender:
            summary: Search for emai sender.
            value: Sales@gmail.com
          byrecipient:
            summary: Search for emai recipient.
            value: Jhon.Doe@gmail.com
          bydomain:
            summary: Search for recipient email domain.
            value: gmail.com
        explode: true
        in: query
        name: filter
        required: false
        schema:
          $ref: '#/components/schemas/Filter'
        style: form
      - description: Smart search
        example: false
        explode: true
        in: query
        name: smart_search
        required: false
        schema:
          $ref: '#/components/schemas/SmartSearch'
        style: form
      - description: Order by
        explode: true
        in: query
        name: orderby
        required: false
        schema:
          $ref: '#/components/schemas/AnalyticOrderBy'
        style: form
      - explode: true
        in: query
        name: ordertype
        required: false
        schema:
          $ref: '#/components/schemas/OrderType'
        style: form
      - description: Timezone Offset
        example: -07:00
        explode: true
        in: query
        name: tz
        required: false
        schema:
          $ref: '#/components/schemas/Timezone'
        style: form
      responses:
        "200":
          content:
            text/csv:
              schema:
                example: |
                  1871534200146968576,DEFER,"Fwd: Test",test@emailchef.com,test@live.com,"Wednesday, February 21 2024 7:48 AM"," Connected to 104.47.51.161 but connection died. (#4.4.2)
                  1871533807186821120,DEFER,"Test send",test@emailchef.com,test@live.com,"Wednesday, February 21 2024 7:47 AM"," Connected to 104.47.55.161 but connection died. (#4.4.2)
                type: string
          description: Analytics CSV data
        "400":
          description: "Bad Request\n\n###### Produces:\n\n* missing_required_parameter_from\n\
            * from_format_should_be_yyyy-mm-dd\n* missing_required_parameter_to\n\
            * to_format_should_be_yyyy-mm-dd\n* missing_required_parameter_filter_by\n\
            * invalid_status_value\n* filter_by_can_only_be_subject_or_sender_or_recipient_or_domain\n\
            * smart_search_should_be_true_or_false\n* orderby_can_only_be_subject_or_sender_or_recipient_or_domain\n\
            * ordertype_should_be_asc_or_desc                  \n"
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: Export Analytics data in CSV file
      tags:
      - analytics
  /analytics/{Id}:
    get:
      description: |
        Get Analytics Data by ID
      operationId: getAnalyticsDataByID
      parameters:
      - description: Id
        explode: false
        in: path
        name: Id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyticMailItem'
          description: |
            Sucess

            Response body contains the Analytic Item requested by ID.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonBadRequestResponseBody'
          description: |
            Bad Request

            ###### Produces:

            * XXXXXXX
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
        "404":
          content:
            application/json:
              example:
                message: XXXXX
              schema:
                $ref: '#/components/schemas/CommonMessageResponseBody'
          description: |
            Not Found

            The Analytic ID was not found
      security:
      - ApiKeyAuth: []
      - consumerKey: []
        consumerSecret: []
      summary: Get Analytics Single Item by ID
      tags:
      - analytics
  /user/consumerKeys:
    get:
      description: |2

        Get Consumer Keys list

        Note: Consumer Keys listing is not allwed when authenticated via Consumer Key.
      operationId: listConsumerKeys
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerKeyListSucessResponsetBody'
          description: |
            Sucess

            Consumer Keys list
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
      security:
      - ApiKeyAuth: []
      summary: Get Consumer Keys list
      tags:
      - consumerkey
    post:
      description: |2

        Create new Consumer Key

        Note: Consumer Key creation is not allwed when authenticated via Consumer Key.
      operationId: createConsumerKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsumerKeyCreateRequestBody'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerKeyCreateResponseBody'
          description: |
            Sucess

            Consumer Key Created Sucessfully.
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
      security:
      - ApiKeyAuth: []
      summary: Create Consumer Key
      tags:
      - consumerkey
  /user/consumerKeys/{consumerKey}:
    delete:
      description: |2

        Delete Consumer Key
        Note: Consumer Key deletion is not allwed when authenticated via Comsumer Key.
      operationId: deleteConsumerKey
      parameters:
      - description: Consumer Key
        explode: false
        in: path
        name: consumerKey
        required: true
        schema:
          example: b914ad238d0e8e8851b81e86ce46ae1d
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonSuccessResponseBody'
          description: |
            Sucess

            Consumer Key was deleted.
        "401":
          content:
            application/json:
              examples:
                MissingAuthorizationKey:
                  summary: Missing Authorization Key
                  value:
                    message: missing_authorization_key
                InvalidAuthorizationKey:
                  summary: Invalid / Expired Authorization Key
                  value:
                    message: invalid_authorization_key
              schema:
                $ref: '#/components/schemas/AuthorizationError'
          description: |
            Unauthorized

            This API requires a valid API Key to be provided.
            (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

            Produces:

            * missing_authorization_key
            * invalid_authorization_key
            * account_is_inactive
        "404":
          content:
            application/json:
              example:
                message: key_not_found
              schema:
                $ref: '#/components/schemas/CommonMessageResponseBody'
          description: |
            Not Found

            Please verify the Consumer Key is valid.
      security:
      - ApiKeyAuth: []
      summary: Delete Consumer Key
      tags:
      - consumerkey
components:
  parameters:
    PageQueryParam:
      description: Page number
      example: 1
      explode: true
      in: query
      name: page
      required: false
      schema:
        $ref: '#/components/schemas/Page'
      style: form
    LimitQueryParam:
      description: The numbers of rows per page to return
      example: 10
      explode: true
      in: query
      name: limit
      required: false
      schema:
        $ref: '#/components/schemas/PageLimit'
      style: form
    FromQueryParam:
      description: Start date
      example: 2020-01-01
      explode: true
      in: query
      name: from
      required: true
      schema:
        $ref: '#/components/schemas/FromDate'
      style: form
    ToQueryParam:
      description: End date
      example: 2025-12-31
      explode: true
      in: query
      name: to
      required: true
      schema:
        $ref: '#/components/schemas/ToDate'
      style: form
    TimezoneQueryParam:
      description: Timezone Offset
      example: -07:00
      explode: true
      in: query
      name: tz
      required: false
      schema:
        $ref: '#/components/schemas/Timezone'
      style: form
    SuppressionFilterQueryParam:
      description: "Text to search (recipient, sender, email subject or reason for\
        \ suppression)"
      examples:
        byemail:
          summary: Search for recipient or sender.
          value: Jhon.Doe@gmail.com
        bytitle:
          summary: Search for email title.
          value: September 2022
        byreason:
          summary: Search for imported supressions.
          value: Imported removal request
      explode: true
      in: query
      name: filter
      required: false
      schema:
        $ref: '#/components/schemas/SuppressionFilter'
      style: form
    SuppressionFilterByQueryParam:
      explode: true
      in: query
      name: filter_by
      required: false
      schema:
        $ref: '#/components/schemas/SuppressionFilterBy'
      style: form
    SmartSearchQueryParam:
      description: Smart search
      example: false
      explode: true
      in: query
      name: smart_search
      required: false
      schema:
        $ref: '#/components/schemas/SmartSearch'
      style: form
    SuppressionOrderByQueryParam:
      explode: true
      in: query
      name: orderby
      required: false
      schema:
        $ref: '#/components/schemas/SuppressionOrderBy'
      style: form
    OrderTypeQueryParam:
      explode: true
      in: query
      name: ordertype
      required: false
      schema:
        $ref: '#/components/schemas/OrderType'
      style: form
    IsoCodePathParam:
      description: Country ISO code
      explode: false
      in: path
      name: isoCode
      required: true
      schema:
        example: ES
        type: string
      style: simple
    IdParam:
      description: Id
      explode: false
      in: path
      name: Id
      required: true
      schema:
        type: integer
      style: simple
    SubaccountFilterByEmailQueryParam:
      description: Filter by email addresses that fully/partially match the search
        value.
      explode: true
      in: query
      name: filterByEmail
      required: false
      schema:
        description: Filter by email addresses that fully/partially match the search
          value.
        example: Jhon
        type: string
      style: form
    SubaccountFilterByActiveQueryParam:
      description: Filter by subaccount status.
      explode: true
      in: query
      name: filterByActive
      required: false
      schema:
        description: Filter by subaccount status.
        example: true
        type: boolean
      style: form
    SubaccountFilterByIPQueryParam:
      description: Filter by IP Addresses.
      explode: true
      in: query
      name: "filterByIP[]"
      required: false
      schema:
        description: Filter by IP Addresses.
        items:
          type: string
        type: array
      style: form
    SubaccountOrderByQueryParam:
      description: Field to sort by
      explode: true
      in: query
      name: orderby
      required: false
      schema:
        default: email
        description: Field to sort by
        enum:
        - email
        - last_used
        example: email
        type: string
      style: form
    EmailQueryParam:
      description: Email address.
      example: username@gmail.com
      explode: true
      in: query
      name: Email
      required: true
      schema:
        format: email
        type: string
      style: form
    AnalyticStatusQueryParam:
      description: "Filter by Status\n\n    NEW: email has been queued for delivery\n\
        \    DEFER: email is in the queue for delivery\n    SUCCESS: email has been\
        \ delivered.\n    OPEN: email has been opened.\n    CLICK: email has been\
        \ clicked.\n    REPORT: email has been reported as spam.\n    FAIL: email\
        \ has bounced.\n    SYSFAIL: email was dropped.\n    UNSUB: email is unsubscribed.\n\
        \n<br />\nNotice that emails that fall into the above statuses can be grouped,\
        \ ie Turbo-Smtp uses the following groups:\n<br />\n\n    'Clicks' = 'CLICK',\n\
        \    'Unsubscribes' = 'UNSUB',\n    'Spam' = 'REPORT',\n    'Drop' = 'SYSFAIL',\n\
        \    'Queued' = 'NEW' or 'DEFER',\n    'Opens'= 'OPEN' or 'CLICK' or 'UNSUB'\
        \ or 'REPORT',\n    'Delivered'= 'SUCCESS'  or 'OPEN' or 'CLICK' or 'UNSUB'\
        \ or 'REPORT',\n    'Bounce': 'FAIL'.  \n"
      explode: true
      in: query
      name: "status[]"
      required: false
      schema:
        description: Filter by Status
        items:
          $ref: '#/components/schemas/AnalyticMailStatus'
        type: array
      style: form
    AnalyticFilterByQueryParam:
      description: Filter by
      explode: true
      in: query
      name: filter_by
      required: false
      schema:
        $ref: '#/components/schemas/AnalyticFilterBy'
      style: form
    AnalyticFilterQueryParam:
      description: "Text to search (recipient, sender, email subject or reason for\
        \ suppression)"
      examples:
        bysubject:
          summary: Search for email subject.
          value: September 2022
        bysender:
          summary: Search for emai sender.
          value: Sales@gmail.com
        byrecipient:
          summary: Search for emai recipient.
          value: Jhon.Doe@gmail.com
        bydomain:
          summary: Search for recipient email domain.
          value: gmail.com
      explode: true
      in: query
      name: filter
      required: false
      schema:
        $ref: '#/components/schemas/Filter'
      style: form
    AnalyticOrderByQueryParam:
      description: Order by
      explode: true
      in: query
      name: orderby
      required: false
      schema:
        $ref: '#/components/schemas/AnalyticOrderBy'
      style: form
    ConsumerKeyPathParam:
      description: Consumer Key
      explode: false
      in: path
      name: consumerKey
      required: true
      schema:
        example: b914ad238d0e8e8851b81e86ce46ae1d
        type: string
      style: simple
  responses:
    Unauthorized:
      content:
        application/json:
          examples:
            MissingAuthorizationKey:
              summary: Missing Authorization Key
              value:
                message: missing_authorization_key
            InvalidAuthorizationKey:
              summary: Invalid / Expired Authorization Key
              value:
                message: invalid_authorization_key
          schema:
            $ref: '#/components/schemas/AuthorizationError'
      description: |
        Unauthorized

        This API requires a valid API Key to be provided.
        (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)

        Produces:

        * missing_authorization_key
        * invalid_authorization_key
        * account_is_inactive
    SuppressionsCSV:
      content:
        text/csv:
          schema:
            example: |
              Status;Subject;From;To;Date;Reason
              FAIL;"new email alert";msaad@emailchef.com;a.shatata@emailchef.com;2022-06-28T15:08:37.821Z;"199.187.175.11 does not like recipient.
              Remote host said: 550 5.1.1 <a.shatata@emailchef.com>: Recipient address rejected: User unknown in virtual mailbox table
              {199.244.75.250}{550} Giving up on 199.187.175.11.
              "
              MANUAL;;;mohamed@test.com;2022-06-18T19:51:04.914Z;
              FAIL;"Test sending email";msaad@emailchef.com;mshatta@yahoo.com;2021-05-03T12:21:48.000Z;"67.195.204.73 failed after I sent the message. Remote host said: 554 30 Sorry, your message to mshatta@yahoo.com cannot be delivered. This mailbox is disabled (554.30). "
              FAIL;"Test sending email";msaad@emailchef.com;mohamed_s_shatta@gmail.com;2021-05-03T12:21:04.000Z;"142.250.138.26 does not like recipient. Remote host said: 550-5.1.1 The email account that you tried to reach does not exist. Please try 550-5.1.1 double-checking the recipient's email address for typos or 550-5.1.1 unnecessary spaces. Learn more at 550 5.1.1  https://support.google.com/mail/?p=NoSuchUser g15si5159810otg.85 - gsmtp {199.244.75.250}{550} Giving up on 142.250.138.26. "
            type: string
      description: Suppressions CSV data
    ValidatedEmailsCSV:
      content:
        text/csv:
          schema:
            example: "Status;Subject;From;To;Date;Reason\nFAIL;\"new email alert\"\
              ;msaad@emailchef.com;a.shatata@emailchef.com;2022-06-28T15:08:37.821Z;\"\
              199.187.175.11 does not like recipient.\nRemote host said: 550 5.1.1\
              \ <a.shatata@emailchef.com>: Recipient address rejected: User unknown\
              \ in virtual mailbox table\n{199.244.75.250}{550} Giving up on 199.187.175.11.\n\
              \"\nMANUAL;;;mohamed@test.com;2022-06-18T19:51:04.914Z;\nFAIL;\"Test\
              \ sending email\";msaad@emailchef.com;mshatta@yahoo.com;2021-05-03T12:21:48.000Z;\"\
              67.195.204.73 failed after I sent the message. Remote host said: 554\
              \ 30 Sorry, your message to mshatta@yahoo.com cannot be delivered. This\
              \ mailbox is disabled (554.30). \"\nFAIL;\"Test sending email\";msaad@emailchef.com;mohamed_s_shatta@gmail.com;2021-05-03T12:21:04.000Z;\"\
              142.250.138.26 does not like recipient. Remote host said: 550-5.1.1\
              \ The email account that you tried to reach does not exist. Please try\
              \ 550-5.1.1 double-checking the recipient's email address for typos\
              \ or 550-5.1.1 unnecessary spaces. Learn more at 550 5.1.1  https://support.google.com/mail/?p=NoSuchUser\
              \ g15si5159810otg.85 - gsmtp {199.244.75.250}{550} Giving up on 142.250.138.26.\
              \ \"    \n"
            type: string
      description: |
        Sucess

        Validated Emails by Email Validation List CSV File
    ForbiddenForActivePlan:
      content:
        application/json:
          example:
            message: feature_not_available_for_active_plan
          schema:
            $ref: '#/components/schemas/CommonMessageResponseBody'
      description: |
        Forbidden

        The current active plan does not include this feature, upgrade is required to use this feature.
    SubaccountNotFound:
      content:
        application/json:
          example:
            message: subaccount_not_found
          schema:
            $ref: '#/components/schemas/CommonMessageResponseBody'
      description: |
        Not Found

        Please verify the subaccount id is valid.
    LogoSuccess:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Logo'
      description: |
        Agency Logo Url
  schemas:
    AuthenticationLoginSucessResponsetBody:
      example:
        auth: f8efa7be4e7457c463e8b800e1f11f92072d272c
      properties:
        auth:
          description: API Key to be used in authorization header
          type: string
    CommonBadRequestResponseBody:
      example:
        message: missing_required_parameter
      properties:
        message:
          enum:
          - missing_required_parameter
          type: string
    CommonMessageResponseBody:
      example:
        message: message
      properties:
        message:
          type: string
      type: object
    AuthenticationLoginRequestBody:
      example:
        email: developer@yourdomain.com
        password: yourTurboSmtpPassword
        no_expire: true
      properties:
        email:
          description: The email of turboSMTP account
          format: email
          type: string
        password:
          description: The password of turboSMTP account
          type: string
          writeOnly: true
        no_expire:
          default: false
          description: " **false**: \nauthentication will expire after 2 hours.\n\n\
            **true**: \nauthentication will keep you signed in, and will never expire.\
            \ (Use [/authentication/deauthorize](#/authentication/AuthenticationLogout)\
            \ to logout and release your an API Key)"
          type: boolean
      required:
      - email
      - password
    AuthorizationError:
      example:
        message: missing_authorization_key
      properties:
        message:
          enum:
          - missing_authorization_key
          - invalid_authorization_key
          type: string
      type: object
    CommonSuccessResponseBody:
      example:
        message: success
      properties:
        message:
          enum:
          - success
          type: string
    ChangePasswordBadRequestResponseBody:
      example:
        message: new_password_should_not_equal_current_password
      properties:
        message:
          enum:
          - empty_request_body
          - password_is_missing
          - confirm_password_is_missing
          - current_password_is_missing
          - current_password_can_not_be_empty
          - password_should_equal_confirm_password
          - new_password_should_not_equal_current_password
          type: string
    ChangePasswordRequestBody:
      example:
        current_password: 6SwHbc96dyE8
        password: SMkhhf4J686P
        confirm_password: SMkhhf4J686P
      properties:
        current_password:
          description: Current Password.
          type: string
        password:
          description: New Password to be used.
          type: string
        confirm_password:
          description: New Password to be used.
          type: string
      required:
      - confirm_password
      - current_password
      - password
    CheckValidityTokenResetPasswordBadRequestResponseBody:
      example:
        message: forgot_password_token_is_missing
      properties:
        message:
          enum:
          - forgot_password_token_is_missing
          type: string
    UpdateResetPasswordBadRequestResponseBody:
      example:
        message: new_password_should_not_equal_current_password
      properties:
        message:
          enum:
          - empty_request_body
          - password_is_missing
          - confirm_password_is_missing
          - current_password_is_missing
          - current_password_can_not_be_empty
          - password_should_equal_confirm_password
          - new_password_should_not_equal_current_password
          type: string
    UpdateResetPasswordRequestBody:
      example:
        password: SMBBBf4J686P
        confirm_password: SMBBBf4J686P
        token: 781d4b44aaf5de86dc0a7e1ca2dc409f
      properties:
        password:
          description: New Password to be used.
          type: string
        confirm_password:
          description: New Password to be used.
          type: string
        token:
          description: Reset Password Token
          type: string
      required:
      - confirm_password
      - password
      - token
    SendSecretTokenResetPasswordBadRequestResponseBody:
      example:
        message: missing_required_parameter
      properties:
        message:
          enum:
          - empty_request_body
          - missing_required_parameter_email
          type: string
    SendSecretTokenResetPasswordRequestBody:
      example:
        email: developer@turboSMTP.com
      properties:
        email:
          description: turboSMTP account email address.
          example: developer@turboSMTP.com
          format: email
          type: string
      required:
      - email
    SendSucessResponsetBody:
      example:
        mid: 1688566310828572700
        message: OK
      properties:
        message:
          example: OK
          type: string
        mid:
          description: message ID
          example: 1688566310828572700
          format: int64
          maximum: 9999999999999999999
          minimum: 0
          type: integer
    SendBadRequestResponseBody:
      example:
        message: error
        errors:
        - missing or not valid sender email (from)
      properties:
        message:
          example: error
          type: string
        errors:
          example:
          - missing or not valid sender email (from)
          items:
            type: string
          properties:
            lenght:
              type: integer
          type: array
    SendUnauthorizedResponseBody:
      example:
        errorCode: 3
        details: "No authorization key was specified for request: POST /api/mail/send"
        message: Invalid authorization token
      properties:
        errorCode:
          example: 3
          type: integer
        message:
          example: Invalid authorization token
          type: string
        details:
          example: "No authorization key was specified for request: POST /api/mail/send"
          type: string
    EmailRequestBody:
      allOf:
      - $ref: '#/components/schemas/Authentication'
      - $ref: '#/components/schemas/Email'
      example:
        cc: cc
        bcc: bcc
        attachments:
        - name: email.ico
          type: image/gif
          content: dXBsb2FkZXIxQGdtYWlsLmNvbQ0KdXBsb2FkZXIyQGdtYWlsLmNvbQ0KYWJjMQ==
        - name: email.ico
          type: image/gif
          content: dXBsb2FkZXIxQGdtYWlsLmNvbQ0KdXBsb2FkZXIyQGdtYWlsLmNvbQ0KYWJjMQ==
        reference_id: reference_id
        subject: subject
        content: content
        authpass: authpass
        html_content: html_content
        mime_raw: mime_raw
        from: from
        to: to
        authuser: authuser
        custom_headers:
          key: custom_headers
    Authentication:
      properties:
        authuser:
          description: email of turboSMTP account
          format: email
          nullable: true
          type: string
        authpass:
          description: password of turboSMTP account
          nullable: true
          type: string
          writeOnly: true
      type: object
    Email:
      properties:
        from:
          description: from mail address
          format: email
          type: string
        to:
          description: comma-separated recipients emails list
          type: string
        subject:
          description: email subject
          nullable: true
          type: string
        cc:
          description: comma-separated copy emails list
          nullable: true
          type: string
        bcc:
          description: comma-separated hidden copy emails list
          nullable: true
          type: string
        content:
          description: text content of the email
          nullable: true
          type: string
        html_content:
          description: html content of the email
          nullable: true
          type: string
        custom_headers:
          additionalProperties:
            type: string
          description: "email additional headers, use any additional header like standard\
            \ ones List-Unsubscribe (to allow users to easily unsubscribe), X-Entity-Ref-ID\
            \ (to handle how gmail and other clients group threads), and your own\
            \ ones. \n"
          nullable: true
          type: object
        reference_id:
          description: custom argument included within an email to be added to the
            Event Webhook response.
          nullable: true
          type: string
        mime_raw:
          description: mime message which replaces content and hmtl content
          nullable: true
          type: string
        attachments:
          description: array of attachment objects
          items:
            $ref: '#/components/schemas/attachment'
          properties:
            lenght:
              type: integer
          type: array
      type: object
    attachment:
      example:
        name: email.ico
        type: image/gif
        content: dXBsb2FkZXIxQGdtYWlsLmNvbQ0KdXBsb2FkZXIyQGdtYWlsLmNvbQ0KYWJjMQ==
      properties:
        content:
          description: Base64 encoded content of the attachment
          example: dXBsb2FkZXIxQGdtYWlsLmNvbQ0KdXBsb2FkZXIyQGdtYWlsLmNvbQ0KYWJjMQ==
          type: string
        name:
          description: filename of the attachment
          example: email.ico
          type: string
        type:
          description: mime type of the content you are attaching
          example: image/gif
          type: string
      type: object
    SuppressionUploadResponse:
      example:
        status: success
        valid:
        - valid.email.1@gmail.com
        - valid.email.2@gmail.com
        invalid:
        - invalidemailline
      properties:
        status:
          type: string
        valid:
          items:
            $ref: '#/components/schemas/EmailAddress'
          type: array
        invalid:
          items:
            $ref: '#/components/schemas/EmailAddress'
          type: array
      type: object
    EmailAddress:
      example: username@gmail.com
      format: email
      type: string
    SuppressionUploadBadRequestResponseBody:
      example:
        res: res
      properties:
        res:
          type: string
      type: object
    SuppressionImportJson:
      example:
        reason: reason
        type: manual
        content:
        - content
        - content
      properties:
        type:
          enum:
          - manual
          example: manual
          type: string
        reason:
          description: Specifies a reason for suppressing imported email address/addresses
          type: string
        content:
          description: List of email addresses to suppress.
          items:
            type: string
          type: array
      type: object
    SuppressionImportFile:
      properties:
        type:
          enum:
          - file
          example: file
          type: string
        reason:
          description: Specifies a reason for suppressing imported email address/addresses
          type: string
        file:
          enum:
          - !!binary |-
            Y3N2
          - !!binary |-
            dHh0
          format: binary
          type: string
      type: object
    SuppressionsSucessResponsetBody:
      example:
        count: 5
        results:
        - date: 2021-03-17 00:00:00
          sender: andrea@emailchef.com
          source: bounce
          subject: Newsletter - September 2022
          recipient: bounce1@turbo-smtp.com
          reason: 550 Error
        - date: 2021-03-15 00:00:00
          sender: alberto@emailchef.com
          source: manual
          subject: ""
          recipient: bounce2@turbo-smtp.com
          reason: manual inserted
        - date: 2021-03-14 00:00:00
          sender: alberto@emailchef.com
          source: spam
          subject: Newsletter - September 2022
          recipient: topolino@turbo-smtp.com
          reason: spam complaint
        - date: 2021-03-14 00:00:00
          sender: alberto@emailchef.com
          source: unsubscribe
          subject: Newsletter - September 2022
          recipient: pippo@turbo-smtp.com
          reason: unsubscribe from list pippo
        - date: 2021-03-13 00:00:00
          sender: alberto@emailchef.com
          source: validation_failed
          subject: Newsletter - September 2022
          recipient: minnie@turbo-smtp.com
          reason: validation failed last import
      properties:
        count:
          type: integer
        results:
          items:
            $ref: '#/components/schemas/Suppression'
          type: array
      type: object
    Suppression:
      properties:
        date:
          example: 2021-03-17 00:00:00
          pattern: "(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2})"
          type: string
        sender:
          format: email
          nullable: true
          type: string
        source:
          $ref: '#/components/schemas/SuppressionSource'
        subject:
          example: September Newsletter
          type: string
        recipient:
          format: email
          nullable: true
          type: string
        reason:
          example: 550 Error
          nullable: true
          type: string
      type: object
    SuppressionSource:
      enum:
      - manual
      - bounce
      - spam
      - unsubscribe
      - validation_failed
      type: string
    SuppressionFilterOrderPageRequestBody:
      allOf:
      - properties:
          page:
            $ref: '#/components/schemas/Page'
          limit:
            $ref: '#/components/schemas/PageLimit'
        type: object
      - $ref: '#/components/schemas/SuppressionFilterOrderRequestBody'
      example:
        limit: 10
        page: 1
    Page:
      default: 1
      description: Page number
      example: 1
      minimum: 1
      nullable: true
      type: integer
    PageLimit:
      default: 10
      description: The numbers of rows per page to return
      example: 10
      minimum: 1
      nullable: true
      type: integer
    SuppressionFilterOrderRequestBody:
      allOf:
      - $ref: '#/components/schemas/SuppressionFilterRequestBody'
      - properties:
          orderby:
            $ref: '#/components/schemas/SuppressionOrderBy'
          ordertype:
            $ref: '#/components/schemas/OrderType'
        type: object
    SuppressionFilterRequestBody:
      example:
        filter: ""
        smart_search: false
        tz: -07:00
        filter_by: ""
        from: 2020-01-01
        to: 2025-12-31
        restrict:
        - filter: a
          smart_search: false
          by: sender
          operator: include
        - filter: a
          smart_search: false
          by: sender
          operator: include
      properties:
        from:
          description: Start date
          example: 2020-01-01
          format: date
          type: string
        to:
          description: End date
          example: 2025-12-31
          format: date
          type: string
        tz:
          description: Timezone Offset
          example: -07:00
          type: string
        filter:
          description: Query to search
          example: ""
          type: string
        filter_by:
          description: Filter by
          example: ""
          items:
            $ref: '#/components/schemas/SuppressionSource'
          properties:
            length:
              type: integer
          type: array
        smart_search:
          default: false
          description: Smart search
          example: false
          nullable: true
          type: boolean
        restrict:
          description: xxxx
          items:
            $ref: '#/components/schemas/SuppressionRestriction'
          type: array
      required:
      - from
      - to
      type: object
    FromDate:
      description: Start date
      example: 2020-01-01
      format: date
      type: string
    ToDate:
      description: End date
      example: 2025-12-31
      format: date
      type: string
    Timezone:
      description: Timezone Offset
      example: -07:00
      type: string
    Filter:
      description: Query to search
      example: ""
      type: string
    SuppressionFilterBy:
      description: Filter by
      example: ""
      items:
        $ref: '#/components/schemas/SuppressionSource'
      properties:
        length:
          type: integer
      type: array
    SmartSearch:
      default: false
      description: Smart search
      example: false
      nullable: true
      type: boolean
    SuppressionRestrictions:
      description: xxxx
      items:
        $ref: '#/components/schemas/SuppressionRestriction'
      type: array
    SuppressionRestriction:
      description: Restriction
      example:
        filter: a
        smart_search: false
        by: sender
        operator: include
      properties:
        by:
          $ref: '#/components/schemas/SuppressionRestrictBy'
        operator:
          $ref: '#/components/schemas/SuppressionOperator'
        filter:
          example: a
          type: string
        smart_search:
          default: false
          description: Smart search
          example: false
          nullable: true
          type: boolean
      type: object
    SuppressionRestrictBy:
      description: Field to restrict by
      enum:
      - sender
      - recipient
      - reason
      - subject
      example: sender
      type: string
    SuppressionOperator:
      description: XXX
      enum:
      - include
      - exclude
      example: include
      type: string
    SuppressionOrderBy:
      default: date
      description: Field to sort by
      enum:
      - date
      - source
      - recipient
      - reason
      example: date
      type: string
    OrderType:
      default: desc
      description: Order Ascending or Descending.
      enum:
      - asc
      - desc
      example: desc
      type: string
    SuppressionFilter:
      description: Query to search
      example: ""
      type: string
    SuppressionsDeleteSuccess:
      example:
        success: true
      properties:
        success:
          type: boolean
      type: object
    SuppressionBulkDeleteRequestBody:
      items:
        format: email
        type: string
      type: array
    CountryList:
      example:
      - iso_code: AF
        currency: AFN
        flag: 🇦🇫
        name: Afghanistan
        phonecode: "93"
      - iso_code: AX
        currency: EUR
        flag: 🇦🇽
        name: Aland Islands
        phonecode: +358-18
      - iso_code: AL
        currency: ALL
        flag: 🇦🇱
        name: Albania
        phonecode: "355"
      items:
        $ref: '#/components/schemas/Country'
      type: array
    Country:
      properties:
        iso_code:
          example: US
          type: string
        currency:
          example: USD
          type: string
        flag:
          example: 🇺🇸
          type: string
        name:
          example: United States
          type: string
        phonecode:
          example: "1"
          type: string
      type: object
    StateList:
      example:
      - name: Alabama
        iso_code: AL
        country_code: US
        type: null
      - name: Alaska
        iso_code: AK
        country_code: US
        type: null
      - name: American Samoa
        iso_code: AS
        country_code: US
        type: null
      items:
        $ref: '#/components/schemas/State'
      type: array
    State:
      properties:
        name:
          example: Alabama
          type: string
        iso_code:
          example: AL
          type: string
        country_code:
          example: US
          type: string
        type:
          type: string
          example: null
      type: object
    BuyEmailValidatorCreditsSucessResponse:
      example:
        url: http://bs.dev.serversmtp.com/index.php/guest/payment_information/form/amsyUJvFeW0fkjLqbcTKMCBRZDi2AdIH
      properties:
        url:
          description: Url to complete payment
          example: http://bs.dev.serversmtp.com/index.php/guest/payment_information/form/amsyUJvFeW0fkjLqbcTKMCBRZDi2AdIH
          type: string
      type: object
    BuyEmailValidatorCreditsBadRequestResponseBody:
      example:
        message: amount_should_be_integer
      properties:
        message:
          enum:
          - missing_required_parameter_amount
          - amount_should_be_integer
          - amount_should_not_be_less_than_15
          - amount_should_not_be_higher_than_1800
          type: string
    BuyEmailValidatorCreditsRequest:
      example:
        amount: 320
      properties:
        amount:
          description: Amount of money to use for purchase
          example: 320
          type: integer
      type: object
    EmailValidatorSubscription:
      example:
        latest_period_start_date: 2022-11-09 00:00:00
        remaining_free_credit: 2800
        free_credits_used: 200
        currency: $
        last_used_period: 2022-11-20 00:00:00
        period_expiration_date: 2022-12-09 00:00:00
        paid_credits: 437.456
        free_credits: 3000
      properties:
        currency:
          $ref: '#/components/schemas/Currency'
        free_credits:
          description: Ammount of allocated free credits.
          example: 3000
          format: int32
          minimum: 0
          type: integer
        free_credits_used:
          description: Ammount of used free credits.
          example: 200
          format: int32
          minimum: 0
          type: integer
        last_used_period:
          description: Last time credit was used.
          example: 2022-11-20 00:00:00
          nullable: true
          pattern: "(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2})"
          type: string
        latest_period_start_date:
          description: Free credit period start date (renewed each cycle).
          example: 2022-11-09 00:00:00
          nullable: true
          pattern: "(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2})"
          type: string
        period_expiration_date:
          description: Free credit period expiration date.
          example: 2022-12-09 00:00:00
          nullable: true
          pattern: "(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2})"
          type: string
        paid_credits:
          description: Amount of remaining money specified in the 'currency' field
            value currency.
          example: 437.456
          format: currency
          minimum: 0
          type: number
        remaining_free_credit:
          description: Ammount of remaining free credits.
          example: 2800
          format: int32
          minimum: 0
          type: integer
      required:
      - currency
      - free_credits
      - free_credits_used
      - last_used_period
      - latest_period_start_date
      - paid_credits
      - period_expiration_date
      - remaining_paid_credits
      type: object
    Currency:
      description: Currency
      enum:
      - $
      - €
      - £
      example: $
      type: string
      x-enum-varnames:
      - Dollar
      - Euro
      - Pound
    EmailValidationUploadResponse:
      example:
        total_emails: 314
        list_id: 10093
      properties:
        list_id:
          description: List Identifier
          example: 10093
          type: integer
        total_emails:
          description: Total emails found in uploaded file
          example: 314
          type: integer
      type: object
    EmailValidatorUploadBadRequestResponseBody:
      example:
        message: missing_upload_file
      properties:
        message:
          enum:
          - "missing_upload_file,invalid_mail_address_list"
          type: string
    EmailValidatorSucessResponsetBody:
      example:
        count: 2
        results:
        - id: 2406
          creation_time: 2021-03-17 00:00:00
          file_name: BusinessProspects.txt
          is_processed: true
          percentage: 100
          total_emails: 158
          total_processed: 158
        - id: 2407
          creation_time: 2021-03-21 00:00:00
          file_name: OldContacts.txt
          is_processed: false
          percentage: 0
          total_emails: 158
          total_processed: 0
      properties:
        count:
          type: integer
        results:
          items:
            $ref: '#/components/schemas/EmailValidatorList'
          type: array
      type: object
    EmailValidatorList:
      example:
        creation_time: 2021-03-17 08:56:00
        is_processed: true
        total_emails: 314
        total_processed: 28
        file_name: BusinessProspects.txt
        percentage: 83
        id: 2406
        status_summary:
        - status: valid
          total: 2
        - status: invalid
          total: 5
      properties:
        id:
          description: Email validation list id.
          example: 2406
          type: integer
        creation_time:
          description: Date and Time of the validation list creation.
          example: 2021-03-17 08:56:00
          pattern: "(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2})"
          type: string
        file_name:
          description: File name of the uploaded file.
          example: BusinessProspects.txt
          type: string
        is_processed:
          description: True if the validation list was already processed.
          example: true
          type: boolean
        percentage:
          description: Describes the percentage progress of validation list.
          example: 83
          type: integer
        total_emails:
          description: Amount of email addresses in the validation list.
          example: 314
          type: integer
        total_processed:
          description: Describes the count of email addresses processed so far.
          example: 28
          type: integer
        status_summary:
          example:
          - status: valid
            total: 2
          - status: invalid
            total: 5
          items:
            $ref: '#/components/schemas/EmailValidatorStatusSummaryItem'
          type: array
      type: object
    EmailValidatorStatusSummaryItem:
      properties:
        status:
          description: "\nThe status of the email address you are validating.\n\n\
            \  DELIVERABILITY STATUS EXPLANATION\n\n  valid:\n  These are emails that\
            \ were determined to be valid and safe to email to, they will have a very\
            \ low bounce rate of under 2%. If you receive bounces it can be because\
            \ your IP might be blacklisted where our IP was not. Sometimes the email\
            \ accounts exist, but they are only accepting mail from people in their\
            \ contact lists. Sometimes you will get throttle on number of emails you\
            \ can send to a specific domain per hour. It's important to look at the\
            \ SMTP Bounce codes to determine why.\n  \n  invalid:\n  These are emails\
            \ that were determined to be invalid, please delete them from your mailing\
            \ list.\n  \n  catch-all: \n  These emails are impossible to validate\
            \ without sending a real email and waiting for a bounce. The term Catch-all\
            \ means that the email server tells you that the email is valid, whether\
            \ it's valid or invalid. If you want to email these addresses, we suggest\
            \ you segment them into a catch-all group and be aware that some of these\
            \ will most likely bounce.\n  \n  spamtrap: \n  These emails are believed\
            \ to be spamtraps and should not be mailed. We have technology in place\
            \ to determine if certain emails should be classified as spamtrap. We\
            \ don't know all the spamtrap email addresses, but we do know a lot of\
            \ them.\n  \n  abuse: \n  These emails belong to people who are known\
            \ to click the abuse links in emails, hence abusers or complainers. We\
            \ recommend not emailing these addresses.\n  \n  do_not_mail: \n  These\
            \ emails belong to companies, role-based, or people you just want to avoid\
            \ emailing to. They are broken down into 6 sub-categories \"disposable\"\
            ,\"toxic\", \"role_based\", \"role_based_catch_all\", \"global_suppression\"\
            \ and \"possible_trap\". You should decide if you want to email these\
            \ address. They are valid email addresses, but shouldn't be mailed in\
            \ most cases.\n  \n  unknown: \n  These emails we weren't able to validate\
            \ for one reason or another. Typical cases are \"Their mail server was\
            \ down\" or \"the anti-spam system is blocking us\". In most cases, 80%\
            \ unknowns are invalid/bad email addresses.\n"
          enum:
          - valid
          - invalid
          - catch-all
          - unknown
          - spamtrap
          - abuse
          - do_not_mail
          example: valid
          type: string
        total:
          description: Ammount of emails in the status within the list.
          example: 12
          type: integer
      type: object
    EmailValidatorListDeleteSuccess:
      example:
        success: true
      properties:
        success:
          type: boolean
      type: object
    EmailValidatorValidateListBadRequestResponseBody:
      example:
        message: list_already_validated
      properties:
        message:
          enum:
          - list_already_validated
          - insufficient_credit
          type: string
    EmailValidatorValidatedMailsResults:
      example:
        processed: 6
        count: 0
        results:
        - smtp_provider: google
          domain_age_days: 9964
          mx_record: gmail-smtp-in.l.google.com
          sub_status: ""
          domain: gmail.com
          mx_found: true
          id: 2047
          email: username@gmail.com
          free_email: true
          status: valid
        - smtp_provider: google
          domain_age_days: 9964
          mx_record: gmail-smtp-in.l.google.com
          sub_status: ""
          domain: gmail.com
          mx_found: true
          id: 2047
          email: username@gmail.com
          free_email: true
          status: valid
      properties:
        count:
          description: Count of vaidated email addresses in the list.
          type: integer
        processed:
          description: Number of processed email addresses in the list.
          type: integer
        results:
          description: Array of validated email addresses in the list.
          items:
            $ref: '#/components/schemas/EmailValidatorMailDetailsBasic'
          properties:
            lenght:
              type: integer
          type: array
      type: object
    EmailValidatorMailDetailsBasic:
      allOf:
      - $ref: '#/components/schemas/Email_1'
      - properties:
          id:
            description: the id of the email address
            example: 2047
            type: integer
        type: object
      - $ref: '#/components/schemas/EmailValidatorMailSharedDetails'
      example:
        smtp_provider: google
        domain_age_days: 9964
        mx_record: gmail-smtp-in.l.google.com
        sub_status: ""
        domain: gmail.com
        mx_found: true
        id: 2047
        email: username@gmail.com
        free_email: true
        status: valid
    Email_1:
      properties:
        email:
          example: username@gmail.com
          format: email
          type: string
      required:
      - email
      type: object
    EmailValidatorMailSharedDetails:
      properties:
        status:
          description: "\nThe status of the email address you are validating.\n\n\
            \  DELIVERABILITY STATUS EXPLANATION\n\n  valid:\n  These are emails that\
            \ were determined to be valid and safe to email to, they will have a very\
            \ low bounce rate of under 2%. If you receive bounces it can be because\
            \ your IP might be blacklisted where our IP was not. Sometimes the email\
            \ accounts exist, but they are only accepting mail from people in their\
            \ contact lists. Sometimes you will get throttle on number of emails you\
            \ can send to a specific domain per hour. It's important to look at the\
            \ SMTP Bounce codes to determine why.\n  \n  invalid:\n  These are emails\
            \ that were determined to be invalid, please delete them from your mailing\
            \ list.\n  \n  catch-all: \n  These emails are impossible to validate\
            \ without sending a real email and waiting for a bounce. The term Catch-all\
            \ means that the email server tells you that the email is valid, whether\
            \ it's valid or invalid. If you want to email these addresses, we suggest\
            \ you segment them into a catch-all group and be aware that some of these\
            \ will most likely bounce.\n  \n  spamtrap: \n  These emails are believed\
            \ to be spamtraps and should not be mailed. We have technology in place\
            \ to determine if certain emails should be classified as spamtrap. We\
            \ don't know all the spamtrap email addresses, but we do know a lot of\
            \ them.\n  \n  abuse: \n  These emails belong to people who are known\
            \ to click the abuse links in emails, hence abusers or complainers. We\
            \ recommend not emailing these addresses.\n  \n  do_not_mail: \n  These\
            \ emails belong to companies, role-based, or people you just want to avoid\
            \ emailing to. They are broken down into 6 sub-categories \"disposable\"\
            ,\"toxic\", \"role_based\", \"role_based_catch_all\", \"global_suppression\"\
            \ and \"possible_trap\". You should decide if you want to email these\
            \ address. They are valid email addresses, but shouldn't be mailed in\
            \ most cases.\n  \n  unknown: \n  These emails we weren't able to validate\
            \ for one reason or another. Typical cases are \"Their mail server was\
            \ down\" or \"the anti-spam system is blocking us\". In most cases, 80%\
            \ unknowns are invalid/bad email addresses.\n"
          enum:
          - valid
          - invalid
          - catch-all
          - unknown
          - spamtrap
          - abuse
          - do_not_mail
          example: valid
          type: string
        sub_status:
          description: "The sub-status of the email address you are validating.\n\n\
            alias_address: \n(valid) These emails addresses act as forwarders/aliases\
            \ and are not real inboxes, for example if you send an email to forward@example.com\
            \ and then the email is forwarded to realinbox@example.com. It's a valid\
            \ email address and you can send to them, it's just a little more information\
            \ about the email address. We can sometimes detect alias email addresses\
            \ and when we do we let you know.\n\nantispam_system: \n(unknown) These\
            \ emails have anti-spam systems deployed that are preventing us from validating\
            \ these emails.\n\ndoes_not_accept_mail: \n(invalid) These domains only\
            \ send mail and don't accept incoming mail.\n\nexception_occurred: \n\
            (unknown) These emails caused an exception when validating.\n\nfailed_smtp_connection:\
            \ \n(unknown) These emails belong to a mail server that won't allow an\
            \ SMTP connection. Most of the time, these emails will end up being invalid.\n\
            \nfailed_syntax_check: \n(Invalid) Emails that fail RFC syntax protocols\n\
            \nforcible_disconnect: \n(Unknown) These emails belong to a mail server\
            \ that disconnects immediately upon connecting. Most of the time, these\
            \ emails will end up being invalid.\nglobal_suppression: \n(do_not_mail)\
            \ These emails are found in many popular global suppression lists (GSL),\
            \ they consist of known ISP complainers, direct complainers, purchased\
            \ addresses, domains that don't send mail, and known litigators.\n\ngreylisted:\
            \ \n(Unknown) Emails where we are temporarily unable to validate them.\
            \ A lot of times if you resubmit these emails they will validate on a\
            \ second pass.\n\nleading_period_removed: \n(valid) If a valid gmail.com\
            \ email address starts with a period '.' we will remove it, so the email\
            \ address is compatible with all mailing systems.\n\nmail_server_did_not_respond-\
            \ \n(unknown) These emails belong to a mail server that is not responding\
            \ to mail commands. Most of the time, these emails will end up being invalid.\n\
            \nmail_server_temporary_error: \n(unknown) These emails belong to a mail\
            \ server that is returning a temporary error. Most of the time, these\
            \ emails will end up being invalid.\nmailbox_quota_exceeded: \n(invalid)\
            \ These emails exceeded their space quota and are not accepting emails.\
            \ These emails are marked invalid.\n\nmailbox_not_found: \n(invalid) These\
            \ emails addresses are valid in syntax, but do not exist. These emails\
            \ are marked invalid.\n\nno_dns_entries: \n(invalid) These emails are\
            \ valid in syntax, but the domain doesn't have any records in DNS or have\
            \ incomplete DNS Records. Therefore, mail programs will be unable to or\
            \ have difficulty sending to them. These emails are marked invalid.\n\n\
            possible_trap: \n(do_not_mail) These emails contain keywords that might\
            \ correlate to possible spam traps like spam@ or @spamtrap.com. Examine\
            \ these before deciding to send emails to them or not.\n\npossible_typo:\
            \ \n(invalid) These are emails of commonly misspelled popular domains.\
            \ These emails are marked invalid.\n\nrole_based: \n(do_not_mail) These\
            \ emails belong to a position or a group of people, like sales@ info@\
            \ and contact@. Role-based emails have a strong correlation to people\
            \ reporting mails sent to them as spam and abuse.\n\nrole_based_catch_all:\
            \ \n(do_not_mail) These emails are role-based and also belong to a catch_all\
            \ domain.\n\ntimeout_exceeded: \n(unknown) These emails belong to a mail\
            \ server that is responding extremely slow. Most of the time, these emails\
            \ will end up being invalid.\n\nunroutable_ip_address: (invalid) These\
            \ emails domains point to an un-routable IP address, these are marked\
            \ invalid.\n\ndisposable: \n(do_not_mail) These are temporary emails created\
            \ for the sole purpose to sign up to websites without giving their real\
            \ email address. These emails are short lived from 15 minutes to around\
            \ 6 months. There is only 2 values (True and False). If you have valid\
            \ emails with this flag set to TRUE, you shouldn't email them.\n\ntoxic:\
            \ \n(do_not_mail) These email addresses are known to be abuse, spam, or\
            \ bot created emails. If you have valid emails with this flag set to TRUE,\
            \ you shouldn't email them.\n"
          enum:
          - ""
          - antispam_system
          - greylisted
          - mail_server_temporary_error
          - forcible_disconnect
          - mail_server_did_not_respond
          - timeout_exceeded
          - failed_smtp_connection
          - mailbox_quota_exceeded
          - exception_occurred
          - possible_trap
          - role_based
          - global_suppression
          - mailbox_not_found
          - no_dns_entries
          - failed_syntax_check
          - possible_typo
          - unroutable_ip_address
          - leading_period_removed
          - does_not_accept_mail
          - alias_address
          - role_based_catch_all
          - disposable
          - toxic
          example: ""
          type: string
        free_email:
          description: True if the email address comes from a free email service provider.
          example: true
          type: boolean
        domain:
          description: The portion of the email address after the "@" symbol.
          example: gmail.com
          type: string
        domain_age_days:
          description: "Age of the email domain in days or [null]."
          example: 9964
          nullable: true
          type: integer
        smtp_provider:
          description: "The SMTP Provider of the email or [null]."
          example: google
          nullable: true
          type: string
        mx_found:
          description: True if the domain have an MX record.
          example: true
          type: boolean
        mx_record:
          description: The preferred MX record of the domain
          example: gmail-smtp-in.l.google.com
          type: string
      type: object
    EmailValidatorListEmailDetails:
      allOf:
      - $ref: '#/components/schemas/Email_1'
      - properties:
          account_id:
            description: Email validator account id.
            example: 20823223
            type: integer
          created_at:
            description: The date time the email was inserted into turboSMTP database
              after being validated.
            example: 2021-03-17 00:00:00
            pattern: "(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2})"
            type: string
          did_you_mean:
            description: Suggestive Fix for an email typo
            example: the-user@gmail.com
            type: string
          id:
            description: Email Id.
            example: 18535681
            type: integer
          list_id:
            description: List Id.
            example: 10629
            type: integer
        type: object
      - $ref: '#/components/schemas/EmailValidatorMailSharedDetails'
      example:
        domain_age_days: 9964
        mx_record: gmail-smtp-in.l.google.com
        list_id: 10629
        sub_status: ""
        created_at: 2021-03-17 00:00:00
        free_email: true
        smtp_provider: google
        account_id: 20823223
        domain: gmail.com
        mx_found: true
        did_you_mean: the-user@gmail.com
        id: 18535681
        email: username@gmail.com
        status: valid
    EmailValidatorMailDetails:
      allOf:
      - $ref: '#/components/schemas/Email_1'
      - $ref: '#/components/schemas/EmailValidatorMailSharedDetails'
      - properties:
          did_you_mean:
            description: Suggestive Fix for an email typo
            example: the-user@gmail.com
            type: string
          account:
            description: The portion of the email address before the "@" symbol.
            example: username
            type: string
          firstname:
            description: "The first name of the owner of the email when available\
              \ or [null]."
            example: Jhon
            nullable: true
            type: string
          lastname:
            description: "The last name of the owner of the email when available or\
              \ [null]."
            example: Doe
            nullable: true
            type: string
          gender:
            description: "The gender of the owner of the email when available or [null]."
            example: female
            nullable: true
            type: string
          country:
            description: "The country of the IP passed in or [null]"
            nullable: true
            type: string
            example: null
          region:
            description: "The region/state of the IP passed in or [null]"
            nullable: true
            type: string
            example: null
          city:
            description: "The city of the IP passed in or [null]"
            nullable: true
            type: string
            example: null
          zipcode:
            description: "The zipcode of the IP passed in or [null]"
            nullable: true
            type: integer
            example: null
          processed_at:
            description: The date time the email was validated.
            example: 2021-03-17 00:00:00
            pattern: "(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2})"
            type: string
        type: object
      example:
        country: country
        firstname: Jhon
        domain_age_days: 9964
        mx_record: gmail-smtp-in.l.google.com
        sub_status: ""
        gender: female
        city: city
        free_email: true
        lastname: Doe
        zipcode: 0
        smtp_provider: google
        domain: gmail.com
        mx_found: true
        did_you_mean: the-user@gmail.com
        processed_at: 2021-03-17 00:00:00
        region: region
        email: username@gmail.com
        account: username
        status: valid
    EmailValidatorValidateBadRequestResponseBody:
      example:
        message: invalid_mail_address
      properties:
        message:
          enum:
          - invalid_mail_address
          - missing_required_parameter_email
          type: string
    EmailAddressRequestBody:
      example:
        email: developer@yourcompany.com
      properties:
        email:
          description: email address to validate
          example: developer@yourcompany.com
          format: email
          type: string
      type: object
    SubAccountListSucessResponsetBody:
      example:
        count: 2
        results:
        - active: true
          email: subaccount-1@yourdomain.om
          subaccount_id: 19302132
          ip: 199.244.75.250
          last_used: 2022-11-20 22:44:07
          limit: 16
          plan_expiration: 2023-01-17 00:00:00
          sent: 2
          plan_limit_interval: Monthly
        - active: true
          email: subaccount-2@yourdomain.om
          subaccount_id: 19302133
          ip: 199.244.75.250
          last_used: 2022-11-19 21:04:07
          limit: 50
          plan_expiration: 2023-01-17 00:00:00
          sent: 34
          plan_limit_interval: Monthly
      properties:
        count:
          type: integer
        results:
          items:
            $ref: '#/components/schemas/SubaccountListItem'
          type: array
      type: object
    SubaccountListItem:
      allOf:
      - $ref: '#/components/schemas/Email_1'
      - $ref: '#/components/schemas/SubaccountIDStatusBase'
      - $ref: '#/components/schemas/SubaccountIP'
      - $ref: '#/components/schemas/SubaccountPlanBase'
    SubaccountIDStatusBase:
      allOf:
      - $ref: '#/components/schemas/SubaccountIP'
      - $ref: '#/components/schemas/SubaccountActiveStatus'
      - properties:
          subaccount_id:
            description: Sub account Id
            example: 19302132
            type: integer
          parent_id:
            description: Sub account parent Id
            example: 19334162
            type: integer
        type: object
    SubaccountIP:
      properties:
        ip:
          description: IP address to use for sending emails.
          example: 185.228.36.19
          nullable: false
          type: string
      type: object
    SubaccountActiveStatus:
      example:
        active: true
      properties:
        active:
          description: "Active subaccounts can be used for login purpose, while users\
            \ can´t login to inactive subaccounts. Notice that in order to be able\
            \ to send emails the subaccount subscription must also be active. User\
            \ can set subaccounts to active / inactive from the dashboard."
          example: true
          type: boolean
      required:
      - active
      type: object
    SubaccountPlanBase:
      allOf:
      - $ref: '#/components/schemas/SubaccountSMTPLimit'
      - properties:
          sent:
            description: The ammount of sent emails from the sub account over the
              current period.
            example: 125
            type: integer
          last_used:
            description: The date time the sub account was last used.
            example: 2021-03-17 00:00:00
            pattern: "(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2})"
            type: string
          plan_expiration:
            description: Expiration date time of the plan.
            example: 2023-01-17 00:00:00
            nullable: true
            pattern: "(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2})"
            type: string
          plan_limit_interval:
            $ref: '#/components/schemas/SmtpLimitInterval'
          expired:
            description: Expired if plan expiration date is overdue.
            example: false
            nullable: false
            type: boolean
        type: object
    SubaccountSMTPLimit:
      example:
        limit: 2000
      properties:
        limit:
          description: The ammount of emails the sub account is allowed to send over
            the period specified by plan_limit_interval. Value -1 means no limit.
          example: 2000
          type: integer
      required:
      - limit
      type: object
    SmtpLimitInterval:
      description: |
        Limit interval that specifies if the sub account sending limit is specified daily, monthly or yearly.

        * Important Note: The limit interval allways follows the main account limit.
      enum:
      - Daily
      - Monthly
      - Yearly
      example: Monthly
      type: string
    CommmonResultResponseBody:
      example:
        result: true
      properties:
        result:
          example: true
          type: boolean
      type: object
    Subaccount:
      allOf:
      - $ref: '#/components/schemas/Email_1'
      - $ref: '#/components/schemas/SubaccountIDStatusBase'
      - $ref: '#/components/schemas/SubaccountBase'
      example:
        email: username@gmail.com
    SubaccountBase:
      allOf:
      - $ref: '#/components/schemas/SubaccountIP'
      - properties:
          first_name:
            description: subaccount owner first name
            example: Andrea
            maxLength: 50
            minLength: 1
            nullable: false
            type: string
          last_name:
            description: subaccount owner last name
            example: Willems
            maxLength: 50
            minLength: 1
            nullable: false
            type: string
          address_1:
            description: Address Line 1
            example: 51 Guild Street
            maxLength: 255
            minLength: 1
            nullable: true
            type: string
          address_2:
            description: Address Line 2
            example: 1st Floor
            maxLength: 255
            minLength: 1
            nullable: true
            type: string
          city:
            description: City
            example: London
            maxLength: 100
            minLength: 1
            nullable: true
            type: string
          company_name:
            description: Agency Name
            example: Refreshing Soda Inc.
            maxLength: 100
            minLength: 1
            nullable: true
            type: string
          country:
            description: Country
            example: United Kingdom
            maxLength: 64
            minLength: 1
            nullable: true
            type: string
          region:
            description: Region
            example: West
            maxLength: 100
            minLength: 1
            nullable: true
            type: string
          zip_code:
            description: Zip Code
            example: NW10 9NQ
            maxLength: 10
            minLength: 1
            nullable: true
            type: string
          phone_number:
            description: Phone Number
            example: "5493513164544"
            maxLength: 30
            minLength: 1
            nullable: true
            type: string
          policy_agree:
            description: Policy must be agreed in order to be able to create a subaccount.
            example: true
            type: boolean
          site_url:
            description: Website
            example: https://www.refreshing-soda.com
            maxLength: 45
            minLength: 1
            nullable: true
            type: string
        type: object
    SubaccountCreateRequest:
      allOf:
      - $ref: '#/components/schemas/Email_1'
      - $ref: '#/components/schemas/SubaccountBase'
      - $ref: '#/components/schemas/SubaccountPasswordConfirmPassword'
      - required:
        - confirm_password
        - domain
        - email
        - first_name
        - ip
        - last_name
        - password
        - policy_agree
        type: object
      example:
        password: LetmeIn123!
        email: username@gmail.com
        confirm_password: LetmeIn123!
    SubaccountPasswordConfirmPassword:
      properties:
        password:
          description: subaccount password
          example: LetmeIn123!
          minLength: 10
          nullable: false
          type: string
        confirm_password:
          description: subaccount confirm password
          example: LetmeIn123!
          minLength: 10
          nullable: false
          type: string
      type: object
    SubaccountUpdateRequest:
      allOf:
      - $ref: '#/components/schemas/SubaccountBase'
      - $ref: '#/components/schemas/SubaccountPasswordConfirmPassword'
      - required:
        - domain
        - first_name
        - ip
        - last_name
        - policy_agree
        type: object
      example:
        password: LetmeIn123!
        confirm_password: LetmeIn123!
    SubaccountActivePlan:
      allOf:
      - $ref: '#/components/schemas/SubaccountIDStatusBase'
      - $ref: '#/components/schemas/SubaccountIP'
      - $ref: '#/components/schemas/SubaccountPlanBase'
      example:
        ip: 185.228.36.19
    Logo:
      example:
        logoUrl: logoUrl
      properties:
        logoUrl:
          type: string
      type: object
    AgencySettings:
      allOf:
      - $ref: '#/components/schemas/Logo'
      - $ref: '#/components/schemas/BaseAgencySettings'
      example:
        agency_name: My Agency Inc.
        agency_website: https://www.mywebsite.com
        logoUrl: logoUrl
        agency_footer: My signature goes here.
    BaseAgencySettings:
      example:
        agency_name: My Agency Inc.
        agency_website: https://www.mywebsite.com
        agency_footer: My signature goes here.
      properties:
        agency_name:
          description: Agency Name
          example: My Agency Inc.
          maxLength: 128
          type: string
        agency_website:
          description: Agency Website
          example: https://www.mywebsite.com
          maxLength: 128
          type: string
        agency_footer:
          description: Footer to be used
          example: My signature goes here.
          maxLength: 2048
          type: string
      type: object
    AlertListSucessResponsetBody:
      example:
        count: 2
        results:
        - id: 4117
          email: doe-jhon@yourdomain.om
          percentage: 50
        - id: 4118
          email: doe-jhon@yourdomain.om
          percentage: 100
      properties:
        count:
          type: integer
        results:
          items:
            $ref: '#/components/schemas/Alert'
          type: array
      type: object
    Alert:
      allOf:
      - $ref: '#/components/schemas/AlertBase'
      - properties:
          id:
            description: Alert Id.
            example: 4117
            type: integer
        type: object
      example:
        id: 4117
    AlertBase:
      allOf:
      - $ref: '#/components/schemas/Email_1'
      - properties:
          percentage:
            description: Percentage of usage that will trigger the alert
            example: 80
            maximum: 100
            minimum: 0
            type: integer
        type: object
      example:
        percentage: 80
        email: username@gmail.com
    AnalyticsListSucessResponsetBody:
      example:
        count: 2
        results:
        - id: 1800872493473407000
          subject: Newsletter update
          sender: sample@gmail.com
          recipient: robert-doe@elecronic-arts.com
          send_time: 2023-08-10 04:04:21
          status: SUCCESS
          domain: gmail.com
          error: ""
          recipient_domain: electronic-arts.com
        - id: 1800871904471490600
          subject: New Movies
          sender: sales@gmail.com
          recipient: jhon-doe@datamart.com
          send_time: 2023-08-11 04:04:21
          status: FAIL
          domain: gmail.com
          error: |
            142.250.138.27 does not like recipient.\nRemote host said: 550-5.1.1 The email account that you tried to reach does not exist. Please try
            550-5.1.1 double-checking the recipient's email address for typos or
            550-5.1.1 unnecessary spaces. Learn more at
            550 5.1.1  https://support.google.com/mail/?p=NoSuchUser s36-20020a05680820a400b003a36545ef49si728995oiw.292 - gsmtp
            {199.244.74.8}{550} Giving up on 142.250.138.27.
          recipient_domain: datamart.com
      properties:
        count:
          type: integer
        results:
          items:
            $ref: '#/components/schemas/AnalyticMailItem'
          type: array
      type: object
    AnalyticMailItem:
      description: Sent Email
      example:
        contact_domain: gmail.com
        send_time: 2022-11-20 00:00:00
        sender: user@example.com
        subject: Business Card.
        domain: example.com
        recipient: user@gmail.com
        id: 1800872493473406976
        error: |
          142.250.138.27 does not like recipient.\nRemote host said: 550-5.1.1 The email account that you tried to reach does not exist. Please try
          550-5.1.1 double-checking the recipient's email address for typos or
          550-5.1.1 unnecessary spaces. Learn more at
          550 5.1.1  https://support.google.com/mail/?p=NoSuchUser s36-20020a05680820a400b003a36545ef49si728995oiw.292 - gsmtp
          {199.244.74.8}{550} Giving up on 142.250.138.27.
        status: null
      properties:
        id:
          description: Email Id.
          example: 1800872493473406976
          format: int64
          type: integer
        subject:
          description: Email Subject.
          example: Business Card.
          type: string
        sender:
          description: Email Sender.
          example: user@example.com
          format: email.
          type: string
        recipient:
          description: Email Recipient.
          example: user@gmail.com
          format: email.
          type: string
        send_time:
          description: Date Time email was sent.
          example: 2022-11-20 00:00:00
          pattern: "(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2})"
          type: string
        status:
          $ref: '#/components/schemas/AnalyticMailStatus'
        domain:
          description: The portion of the sender´s email address after the "@" symbol.
          example: example.com
          type: string
        contact_domain:
          description: The portion of the recipient´s email address after the "@"
            symbol.
          example: gmail.com
          type: string
        error:
          description: Error returned when delivering the email message.
          example: |
            142.250.138.27 does not like recipient.\nRemote host said: 550-5.1.1 The email account that you tried to reach does not exist. Please try
            550-5.1.1 double-checking the recipient's email address for typos or
            550-5.1.1 unnecessary spaces. Learn more at
            550 5.1.1  https://support.google.com/mail/?p=NoSuchUser s36-20020a05680820a400b003a36545ef49si728995oiw.292 - gsmtp
            {199.244.74.8}{550} Giving up on 142.250.138.27.
          type: string
      type: object
    AnalyticMailStatus:
      description: |
        Send Mail Status:

        NEW: email has been queued for delivery
        DEFER: email is in the queue for delivery
        SUCCESS: email has been delivered.
        OPEN: email has been opened.
        CLICK: email has been clicked.
        REPORT: email has been reported as spam.
        FAIL: email has bounced.
        SYSFAIL: email was dropped.
        UNSUB: email is unsubscribed.

        Notice that emails that fall into the above statuses can be grouped, ie Turbo-Smtp uses the following groups:

          'Clicks' = 'CLICK',
          'Unsubscribes' = 'UNSUB',
          'Spam' = 'REPORT',
          'Drop' = 'SYSFAIL',
          'Queued' = 'NEW' or 'DEFER',
          'Opens'= 'OPEN' or 'CLICK' or 'UNSUB' or 'REPORT',
          'Delivered'= 'SUCCESS'  or 'OPEN' or 'CLICK' or 'UNSUB' or 'REPORT',
          'Bounce': 'FAIL'.
      enum:
      - NEW
      - DEFER
      - SUCCESS
      - OPEN
      - CLICK
      - REPORT
      - FAIL
      - SYSFAIL
      - UNSUB
      type: string
    AnalyticFilterBy:
      description: Filter by
      example: ""
      items:
        $ref: '#/components/schemas/AnalyticFilterByOption'
      properties:
        length:
          type: integer
      type: array
    AnalyticFilterByOption:
      enum:
      - subject
      - sender
      - recipient
      - domain
      example: domain
      type: string
    AnalyticOrderBy:
      default: send_time
      description: Field to sort by
      enum:
      - send_time
      - sender
      - recipient
      - subject
      example: send_time
      type: string
    ConsumerKeyListSucessResponsetBody:
      example:
        count: 2
        results:
        - consumerKey: bff5c9436b6da9fe3c1d3379e7dc0f21
          label: QA
          creation_time: 2023-10-12 11:58:11
        - consumerKey: 1027d089da21adfc7f08dc14303571f3
          label: Staging
          creation_time: 2023-08-02 17:18:00
      properties:
        count:
          type: integer
        results:
          items:
            $ref: '#/components/schemas/ConsumerKey'
          type: array
      type: object
    ConsumerKey:
      properties:
        consumerKey:
          description: Consumer Key
          example: b914ad238d0e8e8851b81e86ce46ae1d
          type: string
        label:
          description: Consumer Key label.
          example: QAkey.
          type: string
        creation_time:
          description: The time the consumer key was created.
          example: 2021-03-17 00:00:00
          pattern: "(\\\\d{4}-\\\\d{2}-\\\\d{2} \\\\d{2}:\\\\d{2}:\\\\d{2})"
          type: string
      type: object
    ConsumerKeyCreateResponseBody:
      example:
        consumerSecret: JOSenWTYopGjhZ1CDvsEbcK9PNUA06Xy
        consumerKey: b914ad238d0e8e8851b81e86ce46ae1d
      properties:
        consumerKey:
          description: Consumer Key
          example: b914ad238d0e8e8851b81e86ce46ae1d
          type: string
        consumerSecret:
          description: Consumer Secret
          example: JOSenWTYopGjhZ1CDvsEbcK9PNUA06Xy
          type: string
      type: object
    ConsumerKeyCreateRequestBody:
      example:
        label: QAkey.
      properties:
        label:
          description: Consumer Key label.
          example: QAkey.
          type: string
      type: object
    uploadEmailValidationFile_request:
      properties:
        file:
          format: binary
          type: string
      type: object
  securitySchemes:
    ApiKeyAuth:
      in: header
      name: Authorization
      type: apiKey
    consumerKey:
      in: header
      name: consumerKey
      type: apiKey
    consumerSecret:
      in: header
      name: consumerSecret
      type: apiKey

