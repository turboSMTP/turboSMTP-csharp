/*
 * TurboSMTP Public APIs
 *
 * This document describes all public turboSMTP **V2** API and offers endpoints Descriptions, Parameters, Requests, Responses and Samples of usage.  [Click here to view the previous version of turboSMTP Public API Version 1.0](https://www.serversmtp.com/turbo-api-1)   # Security For the most part (and where not otherwise explicit) turboSMTPâ€™s API requires Authorization.   Authorization to access a userâ€™s resource is granted to clients provided they set  authentication headers into their request, valued with the proper values issued by turboSMTP servers.  ## *  Authorization via ConsumerKey/ConsumerSecret  This type of authorization consists of a pair of headers, named consumerKey and consumerSecret that are created and granted to the end user to be used in a permanent way (unless theyÂ´re deleted of course). This kind of authentication is intended to provide access to endpoints features without the need of providing the user the account details (email address + password).  *consumerKey:* Consumer Key Granted.  *consumerSecret:* Consumer Secret Granted.  (Use [/consumerKeys/create](#/consumerkey/createConsumerKey) create a consumer key/secret pair).      ## *  Authorization via Authentication Key  The authentication key is user-based and it is issued by turboSMTP servers upon successful userâ€™s email address + password challenge, performed by means of appropriate request.      *Authorization:* Authorization_Key  (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)  # Data Interchange Format  For the most part (and where not otherwise explicit) turboSMTPâ€™s API uses JSON as the data format of choice when it comes to request and response bodies.       
 *
 * The version of the OpenAPI document: 2.0.0-oas3
 * Contact: api@turbo-smtp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = API.TurboSMTP.Client.OpenAPIDateConverter;

namespace API.TurboSMTP.Model
{
    /// <summary>
    /// Country
    /// </summary>
    [DataContract(Name = "Country")]
    public partial class Country
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Country" /> class.
        /// </summary>
        /// <param name="isoCode">isoCode.</param>
        /// <param name="currency">currency.</param>
        /// <param name="flag">flag.</param>
        /// <param name="name">name.</param>
        /// <param name="phonecode">phonecode.</param>
        public Country(string isoCode = default(string), string currency = default(string), string flag = default(string), string name = default(string), string phonecode = default(string))
        {
            this.IsoCode = isoCode;
            this.Currency = currency;
            this.Flag = flag;
            this.Name = name;
            this.Phonecode = phonecode;
        }

        /// <summary>
        /// Gets or Sets IsoCode
        /// </summary>
        /// <example>US</example>
        [DataMember(Name = "iso_code", EmitDefaultValue = false)]
        public string IsoCode { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        /// <example>USD</example>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Flag
        /// </summary>
        /// <example>ðŸ‡ºðŸ‡¸</example>
        [DataMember(Name = "flag", EmitDefaultValue = false)]
        public string Flag { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        /// <example>United States</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Phonecode
        /// </summary>
        /// <example>1</example>
        [DataMember(Name = "phonecode", EmitDefaultValue = false)]
        public string Phonecode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Country {\n");
            sb.Append("  IsoCode: ").Append(IsoCode).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Flag: ").Append(Flag).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Phonecode: ").Append(Phonecode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
