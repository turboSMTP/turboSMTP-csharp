/*
 * TurboSMTP Public APIs
 *
 * This document describes all public turboSMTP **V2** API and offers endpoints Descriptions, Parameters, Requests, Responses and Samples of usage.  [Click here to view the previous version of turboSMTP Public API Version 1.0](https://www.serversmtp.com/turbo-api-1)   # Security For the most part (and where not otherwise explicit) turboSMTP’s API requires Authorization.   Authorization to access a user’s resource is granted to clients provided they set  authentication headers into their request, valued with the proper values issued by turboSMTP servers.  ## *  Authorization via ConsumerKey/ConsumerSecret  This type of authorization consists of a pair of headers, named consumerKey and consumerSecret that are created and granted to the end user to be used in a permanent way (unless they´re deleted of course). This kind of authentication is intended to provide access to endpoints features without the need of providing the user the account details (email address + password).  *consumerKey:* Consumer Key Granted.  *consumerSecret:* Consumer Secret Granted.  (Use [/consumerKeys/create](#/consumerkey/createConsumerKey) create a consumer key/secret pair).      ## *  Authorization via Authentication Key  The authentication key is user-based and it is issued by turboSMTP servers upon successful user’s email address + password challenge, performed by means of appropriate request.      *Authorization:* Authorization_Key  (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)  # Data Interchange Format  For the most part (and where not otherwise explicit) turboSMTP’s API uses JSON as the data format of choice when it comes to request and response bodies.       
 *
 * The version of the OpenAPI document: 2.0.0-oas3
 * Contact: api@turbo-smtp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = API.TurboSMTP.Client.OpenAPIDateConverter;

namespace API.TurboSMTP.Model
{
    /// <summary>
    /// EmailValidatorSubscription
    /// </summary>
    [DataContract(Name = "EmailValidatorSubscription")]
    public partial class EmailValidatorSubscription
    {

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", IsRequired = true, EmitDefaultValue = true)]
        public Currency Currency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailValidatorSubscription" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EmailValidatorSubscription() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailValidatorSubscription" /> class.
        /// </summary>
        /// <param name="currency">currency (required).</param>
        /// <param name="freeCredits">Ammount of allocated free credits. (required).</param>
        /// <param name="freeCreditsUsed">Ammount of used free credits. (required).</param>
        /// <param name="lastUsedPeriod">Last time credit was used. (required).</param>
        /// <param name="latestPeriodStartDate">Free credit period start date (renewed each cycle). (required).</param>
        /// <param name="periodExpirationDate">Free credit period expiration date. (required).</param>
        /// <param name="paidCredits">Amount of remaining money specified in the &#39;currency&#39; field value currency. (required).</param>
        /// <param name="remainingFreeCredit">Ammount of remaining free credits..</param>
        public EmailValidatorSubscription(Currency currency = default(Currency), int freeCredits = default(int), int freeCreditsUsed = default(int), string lastUsedPeriod = default(string), string latestPeriodStartDate = default(string), string periodExpirationDate = default(string), decimal paidCredits = default(decimal), int remainingFreeCredit = default(int))
        {
            this.Currency = currency;
            this.FreeCredits = freeCredits;
            this.FreeCreditsUsed = freeCreditsUsed;
            // to ensure "lastUsedPeriod" is required (not null)
            if (lastUsedPeriod == null)
            {
                throw new ArgumentNullException("lastUsedPeriod is a required property for EmailValidatorSubscription and cannot be null");
            }
            this.LastUsedPeriod = lastUsedPeriod;
            // to ensure "latestPeriodStartDate" is required (not null)
            if (latestPeriodStartDate == null)
            {
                throw new ArgumentNullException("latestPeriodStartDate is a required property for EmailValidatorSubscription and cannot be null");
            }
            this.LatestPeriodStartDate = latestPeriodStartDate;
            // to ensure "periodExpirationDate" is required (not null)
            if (periodExpirationDate == null)
            {
                throw new ArgumentNullException("periodExpirationDate is a required property for EmailValidatorSubscription and cannot be null");
            }
            this.PeriodExpirationDate = periodExpirationDate;
            this.PaidCredits = paidCredits;
            this.RemainingFreeCredit = remainingFreeCredit;
        }

        /// <summary>
        /// Ammount of allocated free credits.
        /// </summary>
        /// <value>Ammount of allocated free credits.</value>
        /// <example>3000</example>
        [DataMember(Name = "free_credits", IsRequired = true, EmitDefaultValue = true)]
        public int FreeCredits { get; set; }

        /// <summary>
        /// Ammount of used free credits.
        /// </summary>
        /// <value>Ammount of used free credits.</value>
        /// <example>200</example>
        [DataMember(Name = "free_credits_used", IsRequired = true, EmitDefaultValue = true)]
        public int FreeCreditsUsed { get; set; }

        /// <summary>
        /// Last time credit was used.
        /// </summary>
        /// <value>Last time credit was used.</value>
        /// <example>2022-11-20 00:00:00</example>
        [DataMember(Name = "last_used_period", IsRequired = true, EmitDefaultValue = true)]
        public string LastUsedPeriod { get; set; }

        /// <summary>
        /// Free credit period start date (renewed each cycle).
        /// </summary>
        /// <value>Free credit period start date (renewed each cycle).</value>
        /// <example>2022-11-09 00:00:00</example>
        [DataMember(Name = "latest_period_start_date", IsRequired = true, EmitDefaultValue = true)]
        public string LatestPeriodStartDate { get; set; }

        /// <summary>
        /// Free credit period expiration date.
        /// </summary>
        /// <value>Free credit period expiration date.</value>
        /// <example>2022-12-09 00:00:00</example>
        [DataMember(Name = "period_expiration_date", IsRequired = true, EmitDefaultValue = true)]
        public string PeriodExpirationDate { get; set; }

        /// <summary>
        /// Amount of remaining money specified in the &#39;currency&#39; field value currency.
        /// </summary>
        /// <value>Amount of remaining money specified in the &#39;currency&#39; field value currency.</value>
        /// <example>437.456</example>
        [DataMember(Name = "paid_credits", IsRequired = true, EmitDefaultValue = true)]
        public decimal PaidCredits { get; set; }

        /// <summary>
        /// Ammount of remaining free credits.
        /// </summary>
        /// <value>Ammount of remaining free credits.</value>
        /// <example>2800</example>
        [DataMember(Name = "remaining_free_credit", EmitDefaultValue = false)]
        public int RemainingFreeCredit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailValidatorSubscription {\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  FreeCredits: ").Append(FreeCredits).Append("\n");
            sb.Append("  FreeCreditsUsed: ").Append(FreeCreditsUsed).Append("\n");
            sb.Append("  LastUsedPeriod: ").Append(LastUsedPeriod).Append("\n");
            sb.Append("  LatestPeriodStartDate: ").Append(LatestPeriodStartDate).Append("\n");
            sb.Append("  PeriodExpirationDate: ").Append(PeriodExpirationDate).Append("\n");
            sb.Append("  PaidCredits: ").Append(PaidCredits).Append("\n");
            sb.Append("  RemainingFreeCredit: ").Append(RemainingFreeCredit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
