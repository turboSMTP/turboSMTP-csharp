/*
 * TurboSMTP Public APIs
 *
 * This document describes all public turboSMTP **V2** API and offers endpoints Descriptions, Parameters, Requests, Responses and Samples of usage.  [Click here to view the previous version of turboSMTP Public API Version 1.0](https://www.serversmtp.com/turbo-api-1)   # Security For the most part (and where not otherwise explicit) turboSMTP’s API requires Authorization.   Authorization to access a user’s resource is granted to clients provided they set  authentication headers into their request, valued with the proper values issued by turboSMTP servers.  ## *  Authorization via ConsumerKey/ConsumerSecret  This type of authorization consists of a pair of headers, named consumerKey and consumerSecret that are created and granted to the end user to be used in a permanent way (unless they´re deleted of course). This kind of authentication is intended to provide access to endpoints features without the need of providing the user the account details (email address + password).  *consumerKey:* Consumer Key Granted.  *consumerSecret:* Consumer Secret Granted.  (Use [/consumerKeys/create](#/consumerkey/createConsumerKey) create a consumer key/secret pair).      ## *  Authorization via Authentication Key  The authentication key is user-based and it is issued by turboSMTP servers upon successful user’s email address + password challenge, performed by means of appropriate request.      *Authorization:* Authorization_Key  (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)  # Data Interchange Format  For the most part (and where not otherwise explicit) turboSMTP’s API uses JSON as the data format of choice when it comes to request and response bodies.       
 *
 * The version of the OpenAPI document: 2.0.0-oas3
 * Contact: api@turbo-smtp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = API.TurboSMTP.Client.OpenAPIDateConverter;

namespace API.TurboSMTP.Model
{
    /// <summary>
    /// SubaccountUpdateRequest
    /// </summary>
    [DataContract(Name = "SubaccountUpdateRequest")]
    public partial class SubaccountUpdateRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubaccountUpdateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubaccountUpdateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubaccountUpdateRequest" /> class.
        /// </summary>
        /// <param name="ip">IP address to use for sending emails. (required).</param>
        /// <param name="firstName">subaccount owner first name (required).</param>
        /// <param name="lastName">subaccount owner last name (required).</param>
        /// <param name="address1">Address Line 1.</param>
        /// <param name="address2">Address Line 2.</param>
        /// <param name="city">City.</param>
        /// <param name="companyName">Agency Name.</param>
        /// <param name="country">Country.</param>
        /// <param name="region">Region.</param>
        /// <param name="zipCode">Zip Code.</param>
        /// <param name="phoneNumber">Phone Number.</param>
        /// <param name="policyAgree">Policy must be agreed in order to be able to create a subaccount. (required).</param>
        /// <param name="siteUrl">Website.</param>
        /// <param name="password">subaccount password.</param>
        /// <param name="confirmPassword">subaccount confirm password.</param>
        public SubaccountUpdateRequest(string ip = default(string), string firstName = default(string), string lastName = default(string), string address1 = default(string), string address2 = default(string), string city = default(string), string companyName = default(string), string country = default(string), string region = default(string), string zipCode = default(string), string phoneNumber = default(string), bool policyAgree = default(bool), string siteUrl = default(string), string password = default(string), string confirmPassword = default(string))
        {
            // to ensure "ip" is required (not null)
            if (ip == null)
            {
                throw new ArgumentNullException("ip is a required property for SubaccountUpdateRequest and cannot be null");
            }
            this.Ip = ip;
            // to ensure "firstName" is required (not null)
            if (firstName == null)
            {
                throw new ArgumentNullException("firstName is a required property for SubaccountUpdateRequest and cannot be null");
            }
            this.FirstName = firstName;
            // to ensure "lastName" is required (not null)
            if (lastName == null)
            {
                throw new ArgumentNullException("lastName is a required property for SubaccountUpdateRequest and cannot be null");
            }
            this.LastName = lastName;
            this.PolicyAgree = policyAgree;
            this.Address1 = address1;
            this.Address2 = address2;
            this.City = city;
            this.CompanyName = companyName;
            this.Country = country;
            this.Region = region;
            this.ZipCode = zipCode;
            this.PhoneNumber = phoneNumber;
            this.SiteUrl = siteUrl;
            this.Password = password;
            this.ConfirmPassword = confirmPassword;
        }

        /// <summary>
        /// IP address to use for sending emails.
        /// </summary>
        /// <value>IP address to use for sending emails.</value>
        /// <example>185.228.36.19</example>
        [DataMember(Name = "ip", IsRequired = true, EmitDefaultValue = true)]
        public string Ip { get; set; }

        /// <summary>
        /// subaccount owner first name
        /// </summary>
        /// <value>subaccount owner first name</value>
        /// <example>Andrea</example>
        [DataMember(Name = "first_name", IsRequired = true, EmitDefaultValue = true)]
        public string FirstName { get; set; }

        /// <summary>
        /// subaccount owner last name
        /// </summary>
        /// <value>subaccount owner last name</value>
        /// <example>Willems</example>
        [DataMember(Name = "last_name", IsRequired = true, EmitDefaultValue = true)]
        public string LastName { get; set; }

        /// <summary>
        /// Address Line 1
        /// </summary>
        /// <value>Address Line 1</value>
        /// <example>51 Guild Street</example>
        [DataMember(Name = "address_1", EmitDefaultValue = true)]
        public string Address1 { get; set; }

        /// <summary>
        /// Address Line 2
        /// </summary>
        /// <value>Address Line 2</value>
        /// <example>1st Floor</example>
        [DataMember(Name = "address_2", EmitDefaultValue = true)]
        public string Address2 { get; set; }

        /// <summary>
        /// City
        /// </summary>
        /// <value>City</value>
        /// <example>London</example>
        [DataMember(Name = "city", EmitDefaultValue = true)]
        public string City { get; set; }

        /// <summary>
        /// Agency Name
        /// </summary>
        /// <value>Agency Name</value>
        /// <example>Refreshing Soda Inc.</example>
        [DataMember(Name = "company_name", EmitDefaultValue = true)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Country
        /// </summary>
        /// <value>Country</value>
        /// <example>United Kingdom</example>
        [DataMember(Name = "country", EmitDefaultValue = true)]
        public string Country { get; set; }

        /// <summary>
        /// Region
        /// </summary>
        /// <value>Region</value>
        /// <example>West</example>
        [DataMember(Name = "region", EmitDefaultValue = true)]
        public string Region { get; set; }

        /// <summary>
        /// Zip Code
        /// </summary>
        /// <value>Zip Code</value>
        /// <example>NW10 9NQ</example>
        [DataMember(Name = "zip_code", EmitDefaultValue = true)]
        public string ZipCode { get; set; }

        /// <summary>
        /// Phone Number
        /// </summary>
        /// <value>Phone Number</value>
        /// <example>5493513164544</example>
        [DataMember(Name = "phone_number", EmitDefaultValue = true)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Policy must be agreed in order to be able to create a subaccount.
        /// </summary>
        /// <value>Policy must be agreed in order to be able to create a subaccount.</value>
        /// <example>true</example>
        [DataMember(Name = "policy_agree", IsRequired = true, EmitDefaultValue = true)]
        public bool PolicyAgree { get; set; }

        /// <summary>
        /// Website
        /// </summary>
        /// <value>Website</value>
        /// <example>https://www.refreshing-soda.com</example>
        [DataMember(Name = "site_url", EmitDefaultValue = true)]
        public string SiteUrl { get; set; }

        /// <summary>
        /// subaccount password
        /// </summary>
        /// <value>subaccount password</value>
        /// <example>LetmeIn123!</example>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// subaccount confirm password
        /// </summary>
        /// <value>subaccount confirm password</value>
        /// <example>LetmeIn123!</example>
        [DataMember(Name = "confirm_password", EmitDefaultValue = false)]
        public string ConfirmPassword { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubaccountUpdateRequest {\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Address1: ").Append(Address1).Append("\n");
            sb.Append("  Address2: ").Append(Address2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  ZipCode: ").Append(ZipCode).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  PolicyAgree: ").Append(PolicyAgree).Append("\n");
            sb.Append("  SiteUrl: ").Append(SiteUrl).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  ConfirmPassword: ").Append(ConfirmPassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
