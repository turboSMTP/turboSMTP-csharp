/*
 * TurboSMTP Public APIs
 *
 * This document describes all public turboSMTP **V2** API and offers endpoints Descriptions, Parameters, Requests, Responses and Samples of usage.  [Click here to view the previous version of turboSMTP Public API Version 1.0](https://www.serversmtp.com/turbo-api-1)   # Security For the most part (and where not otherwise explicit) turboSMTP’s API requires Authorization.   Authorization to access a user’s resource is granted to clients provided they set  authentication headers into their request, valued with the proper values issued by turboSMTP servers.  ## *  Authorization via ConsumerKey/ConsumerSecret  This type of authorization consists of a pair of headers, named consumerKey and consumerSecret that are created and granted to the end user to be used in a permanent way (unless they´re deleted of course). This kind of authentication is intended to provide access to endpoints features without the need of providing the user the account details (email address + password).  *consumerKey:* Consumer Key Granted.  *consumerSecret:* Consumer Secret Granted.  (Use [/consumerKeys/create](#/consumerkey/createConsumerKey) create a consumer key/secret pair).      ## *  Authorization via Authentication Key  The authentication key is user-based and it is issued by turboSMTP servers upon successful user’s email address + password challenge, performed by means of appropriate request.      *Authorization:* Authorization_Key  (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)  # Data Interchange Format  For the most part (and where not otherwise explicit) turboSMTP’s API uses JSON as the data format of choice when it comes to request and response bodies.       
 *
 * The version of the OpenAPI document: 2.0.0-oas3
 * Contact: api@turbo-smtp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = API.TurboSMTP.Client.OpenAPIDateConverter;

namespace API.TurboSMTP.Model
{
    /// <summary>
    /// Send Mail Status:  NEW: email has been queued for delivery DEFER: email is in the queue for delivery SUCCESS: email has been delivered. OPEN: email has been opened. CLICK: email has been clicked. REPORT: email has been reported as spam. FAIL: email has bounced. SYSFAIL: email was dropped. UNSUB: email is unsubscribed.  Notice that emails that fall into the above statuses can be grouped, ie Turbo-Smtp uses the following groups:    &#39;Clicks&#39; &#x3D; &#39;CLICK&#39;,   &#39;Unsubscribes&#39; &#x3D; &#39;UNSUB&#39;,   &#39;Spam&#39; &#x3D; &#39;REPORT&#39;,   &#39;Drop&#39; &#x3D; &#39;SYSFAIL&#39;,   &#39;Queued&#39; &#x3D; &#39;NEW&#39; or &#39;DEFER&#39;,   &#39;Opens&#39;&#x3D; &#39;OPEN&#39; or &#39;CLICK&#39; or &#39;UNSUB&#39; or &#39;REPORT&#39;,   &#39;Delivered&#39;&#x3D; &#39;SUCCESS&#39;  or &#39;OPEN&#39; or &#39;CLICK&#39; or &#39;UNSUB&#39; or &#39;REPORT&#39;,   &#39;Bounce&#39;: &#39;FAIL&#39;. 
    /// </summary>
    /// <value>Send Mail Status:  NEW: email has been queued for delivery DEFER: email is in the queue for delivery SUCCESS: email has been delivered. OPEN: email has been opened. CLICK: email has been clicked. REPORT: email has been reported as spam. FAIL: email has bounced. SYSFAIL: email was dropped. UNSUB: email is unsubscribed.  Notice that emails that fall into the above statuses can be grouped, ie Turbo-Smtp uses the following groups:    &#39;Clicks&#39; &#x3D; &#39;CLICK&#39;,   &#39;Unsubscribes&#39; &#x3D; &#39;UNSUB&#39;,   &#39;Spam&#39; &#x3D; &#39;REPORT&#39;,   &#39;Drop&#39; &#x3D; &#39;SYSFAIL&#39;,   &#39;Queued&#39; &#x3D; &#39;NEW&#39; or &#39;DEFER&#39;,   &#39;Opens&#39;&#x3D; &#39;OPEN&#39; or &#39;CLICK&#39; or &#39;UNSUB&#39; or &#39;REPORT&#39;,   &#39;Delivered&#39;&#x3D; &#39;SUCCESS&#39;  or &#39;OPEN&#39; or &#39;CLICK&#39; or &#39;UNSUB&#39; or &#39;REPORT&#39;,   &#39;Bounce&#39;: &#39;FAIL&#39;. </value>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum AnalyticMailStatus
    {
        /// <summary>
        /// Enum NEW for value: NEW
        /// </summary>
        [EnumMember(Value = "NEW")]
        NEW = 1,

        /// <summary>
        /// Enum DEFER for value: DEFER
        /// </summary>
        [EnumMember(Value = "DEFER")]
        DEFER = 2,

        /// <summary>
        /// Enum SUCCESS for value: SUCCESS
        /// </summary>
        [EnumMember(Value = "SUCCESS")]
        SUCCESS = 3,

        /// <summary>
        /// Enum OPEN for value: OPEN
        /// </summary>
        [EnumMember(Value = "OPEN")]
        OPEN = 4,

        /// <summary>
        /// Enum CLICK for value: CLICK
        /// </summary>
        [EnumMember(Value = "CLICK")]
        CLICK = 5,

        /// <summary>
        /// Enum REPORT for value: REPORT
        /// </summary>
        [EnumMember(Value = "REPORT")]
        REPORT = 6,

        /// <summary>
        /// Enum FAIL for value: FAIL
        /// </summary>
        [EnumMember(Value = "FAIL")]
        FAIL = 7,

        /// <summary>
        /// Enum SYSFAIL for value: SYSFAIL
        /// </summary>
        [EnumMember(Value = "SYSFAIL")]
        SYSFAIL = 8,

        /// <summary>
        /// Enum UNSUB for value: UNSUB
        /// </summary>
        [EnumMember(Value = "UNSUB")]
        UNSUB = 9
    }

}
