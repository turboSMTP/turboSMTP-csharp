/*
 * TurboSMTP Public APIs
 *
 * This document describes all public turboSMTP **V2** API and offers endpoints Descriptions, Parameters, Requests, Responses and Samples of usage.  [Click here to view the previous version of turboSMTP Public API Version 1.0](https://www.serversmtp.com/turbo-api-1)   # Security For the most part (and where not otherwise explicit) turboSMTP’s API requires Authorization.   Authorization to access a user’s resource is granted to clients provided they set  authentication headers into their request, valued with the proper values issued by turboSMTP servers.  ## *  Authorization via ConsumerKey/ConsumerSecret  This type of authorization consists of a pair of headers, named consumerKey and consumerSecret that are created and granted to the end user to be used in a permanent way (unless they´re deleted of course). This kind of authentication is intended to provide access to endpoints features without the need of providing the user the account details (email address + password).  *consumerKey:* Consumer Key Granted.  *consumerSecret:* Consumer Secret Granted.  (Use [/consumerKeys/create](#/consumerkey/createConsumerKey) create a consumer key/secret pair).      ## *  Authorization via Authentication Key  The authentication key is user-based and it is issued by turboSMTP servers upon successful user’s email address + password challenge, performed by means of appropriate request.      *Authorization:* Authorization_Key  (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)  # Data Interchange Format  For the most part (and where not otherwise explicit) turboSMTP’s API uses JSON as the data format of choice when it comes to request and response bodies.       
 *
 * The version of the OpenAPI document: 2.0.0-oas3
 * Contact: api@turbo-smtp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = API.TurboSMTP.Client.OpenAPIDateConverter;

namespace API.TurboSMTP.Model
{
    /// <summary>
    /// EmailValidatorStatusSummaryItem
    /// </summary>
    [DataContract(Name = "EmailValidatorStatusSummaryItem")]
    public partial class EmailValidatorStatusSummaryItem
    {
        /// <summary>
        ///  The status of the email address you are validating.    DELIVERABILITY STATUS EXPLANATION    valid:   These are emails that were determined to be valid and safe to email to, they will have a very low bounce rate of under 2%. If you receive bounces it can be because your IP might be blacklisted where our IP was not. Sometimes the email accounts exist, but they are only accepting mail from people in their contact lists. Sometimes you will get throttle on number of emails you can send to a specific domain per hour. It&#39;s important to look at the SMTP Bounce codes to determine why.      invalid:   These are emails that were determined to be invalid, please delete them from your mailing list.      catch-all:    These emails are impossible to validate without sending a real email and waiting for a bounce. The term Catch-all means that the email server tells you that the email is valid, whether it&#39;s valid or invalid. If you want to email these addresses, we suggest you segment them into a catch-all group and be aware that some of these will most likely bounce.      spamtrap:    These emails are believed to be spamtraps and should not be mailed. We have technology in place to determine if certain emails should be classified as spamtrap. We don&#39;t know all the spamtrap email addresses, but we do know a lot of them.      abuse:    These emails belong to people who are known to click the abuse links in emails, hence abusers or complainers. We recommend not emailing these addresses.      do_not_mail:    These emails belong to companies, role-based, or people you just want to avoid emailing to. They are broken down into 6 sub-categories \&quot;disposable\&quot;,\&quot;toxic\&quot;, \&quot;role_based\&quot;, \&quot;role_based_catch_all\&quot;, \&quot;global_suppression\&quot; and \&quot;possible_trap\&quot;. You should decide if you want to email these address. They are valid email addresses, but shouldn&#39;t be mailed in most cases.      unknown:    These emails we weren&#39;t able to validate for one reason or another. Typical cases are \&quot;Their mail server was down\&quot; or \&quot;the anti-spam system is blocking us\&quot;. In most cases, 80% unknowns are invalid/bad email addresses. 
        /// </summary>
        /// <value> The status of the email address you are validating.    DELIVERABILITY STATUS EXPLANATION    valid:   These are emails that were determined to be valid and safe to email to, they will have a very low bounce rate of under 2%. If you receive bounces it can be because your IP might be blacklisted where our IP was not. Sometimes the email accounts exist, but they are only accepting mail from people in their contact lists. Sometimes you will get throttle on number of emails you can send to a specific domain per hour. It&#39;s important to look at the SMTP Bounce codes to determine why.      invalid:   These are emails that were determined to be invalid, please delete them from your mailing list.      catch-all:    These emails are impossible to validate without sending a real email and waiting for a bounce. The term Catch-all means that the email server tells you that the email is valid, whether it&#39;s valid or invalid. If you want to email these addresses, we suggest you segment them into a catch-all group and be aware that some of these will most likely bounce.      spamtrap:    These emails are believed to be spamtraps and should not be mailed. We have technology in place to determine if certain emails should be classified as spamtrap. We don&#39;t know all the spamtrap email addresses, but we do know a lot of them.      abuse:    These emails belong to people who are known to click the abuse links in emails, hence abusers or complainers. We recommend not emailing these addresses.      do_not_mail:    These emails belong to companies, role-based, or people you just want to avoid emailing to. They are broken down into 6 sub-categories \&quot;disposable\&quot;,\&quot;toxic\&quot;, \&quot;role_based\&quot;, \&quot;role_based_catch_all\&quot;, \&quot;global_suppression\&quot; and \&quot;possible_trap\&quot;. You should decide if you want to email these address. They are valid email addresses, but shouldn&#39;t be mailed in most cases.      unknown:    These emails we weren&#39;t able to validate for one reason or another. Typical cases are \&quot;Their mail server was down\&quot; or \&quot;the anti-spam system is blocking us\&quot;. In most cases, 80% unknowns are invalid/bad email addresses. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Valid for value: valid
            /// </summary>
            [EnumMember(Value = "valid")]
            Valid = 1,

            /// <summary>
            /// Enum Invalid for value: invalid
            /// </summary>
            [EnumMember(Value = "invalid")]
            Invalid = 2,

            /// <summary>
            /// Enum CatchAll for value: catch-all
            /// </summary>
            [EnumMember(Value = "catch-all")]
            CatchAll = 3,

            /// <summary>
            /// Enum Unknown for value: unknown
            /// </summary>
            [EnumMember(Value = "unknown")]
            Unknown = 4,

            /// <summary>
            /// Enum Spamtrap for value: spamtrap
            /// </summary>
            [EnumMember(Value = "spamtrap")]
            Spamtrap = 5,

            /// <summary>
            /// Enum Abuse for value: abuse
            /// </summary>
            [EnumMember(Value = "abuse")]
            Abuse = 6,

            /// <summary>
            /// Enum DoNotMail for value: do_not_mail
            /// </summary>
            [EnumMember(Value = "do_not_mail")]
            DoNotMail = 7
        }


        /// <summary>
        ///  The status of the email address you are validating.    DELIVERABILITY STATUS EXPLANATION    valid:   These are emails that were determined to be valid and safe to email to, they will have a very low bounce rate of under 2%. If you receive bounces it can be because your IP might be blacklisted where our IP was not. Sometimes the email accounts exist, but they are only accepting mail from people in their contact lists. Sometimes you will get throttle on number of emails you can send to a specific domain per hour. It&#39;s important to look at the SMTP Bounce codes to determine why.      invalid:   These are emails that were determined to be invalid, please delete them from your mailing list.      catch-all:    These emails are impossible to validate without sending a real email and waiting for a bounce. The term Catch-all means that the email server tells you that the email is valid, whether it&#39;s valid or invalid. If you want to email these addresses, we suggest you segment them into a catch-all group and be aware that some of these will most likely bounce.      spamtrap:    These emails are believed to be spamtraps and should not be mailed. We have technology in place to determine if certain emails should be classified as spamtrap. We don&#39;t know all the spamtrap email addresses, but we do know a lot of them.      abuse:    These emails belong to people who are known to click the abuse links in emails, hence abusers or complainers. We recommend not emailing these addresses.      do_not_mail:    These emails belong to companies, role-based, or people you just want to avoid emailing to. They are broken down into 6 sub-categories \&quot;disposable\&quot;,\&quot;toxic\&quot;, \&quot;role_based\&quot;, \&quot;role_based_catch_all\&quot;, \&quot;global_suppression\&quot; and \&quot;possible_trap\&quot;. You should decide if you want to email these address. They are valid email addresses, but shouldn&#39;t be mailed in most cases.      unknown:    These emails we weren&#39;t able to validate for one reason or another. Typical cases are \&quot;Their mail server was down\&quot; or \&quot;the anti-spam system is blocking us\&quot;. In most cases, 80% unknowns are invalid/bad email addresses. 
        /// </summary>
        /// <value> The status of the email address you are validating.    DELIVERABILITY STATUS EXPLANATION    valid:   These are emails that were determined to be valid and safe to email to, they will have a very low bounce rate of under 2%. If you receive bounces it can be because your IP might be blacklisted where our IP was not. Sometimes the email accounts exist, but they are only accepting mail from people in their contact lists. Sometimes you will get throttle on number of emails you can send to a specific domain per hour. It&#39;s important to look at the SMTP Bounce codes to determine why.      invalid:   These are emails that were determined to be invalid, please delete them from your mailing list.      catch-all:    These emails are impossible to validate without sending a real email and waiting for a bounce. The term Catch-all means that the email server tells you that the email is valid, whether it&#39;s valid or invalid. If you want to email these addresses, we suggest you segment them into a catch-all group and be aware that some of these will most likely bounce.      spamtrap:    These emails are believed to be spamtraps and should not be mailed. We have technology in place to determine if certain emails should be classified as spamtrap. We don&#39;t know all the spamtrap email addresses, but we do know a lot of them.      abuse:    These emails belong to people who are known to click the abuse links in emails, hence abusers or complainers. We recommend not emailing these addresses.      do_not_mail:    These emails belong to companies, role-based, or people you just want to avoid emailing to. They are broken down into 6 sub-categories \&quot;disposable\&quot;,\&quot;toxic\&quot;, \&quot;role_based\&quot;, \&quot;role_based_catch_all\&quot;, \&quot;global_suppression\&quot; and \&quot;possible_trap\&quot;. You should decide if you want to email these address. They are valid email addresses, but shouldn&#39;t be mailed in most cases.      unknown:    These emails we weren&#39;t able to validate for one reason or another. Typical cases are \&quot;Their mail server was down\&quot; or \&quot;the anti-spam system is blocking us\&quot;. In most cases, 80% unknowns are invalid/bad email addresses. </value>
        /// <example>valid</example>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailValidatorStatusSummaryItem" /> class.
        /// </summary>
        /// <param name="status"> The status of the email address you are validating.    DELIVERABILITY STATUS EXPLANATION    valid:   These are emails that were determined to be valid and safe to email to, they will have a very low bounce rate of under 2%. If you receive bounces it can be because your IP might be blacklisted where our IP was not. Sometimes the email accounts exist, but they are only accepting mail from people in their contact lists. Sometimes you will get throttle on number of emails you can send to a specific domain per hour. It&#39;s important to look at the SMTP Bounce codes to determine why.      invalid:   These are emails that were determined to be invalid, please delete them from your mailing list.      catch-all:    These emails are impossible to validate without sending a real email and waiting for a bounce. The term Catch-all means that the email server tells you that the email is valid, whether it&#39;s valid or invalid. If you want to email these addresses, we suggest you segment them into a catch-all group and be aware that some of these will most likely bounce.      spamtrap:    These emails are believed to be spamtraps and should not be mailed. We have technology in place to determine if certain emails should be classified as spamtrap. We don&#39;t know all the spamtrap email addresses, but we do know a lot of them.      abuse:    These emails belong to people who are known to click the abuse links in emails, hence abusers or complainers. We recommend not emailing these addresses.      do_not_mail:    These emails belong to companies, role-based, or people you just want to avoid emailing to. They are broken down into 6 sub-categories \&quot;disposable\&quot;,\&quot;toxic\&quot;, \&quot;role_based\&quot;, \&quot;role_based_catch_all\&quot;, \&quot;global_suppression\&quot; and \&quot;possible_trap\&quot;. You should decide if you want to email these address. They are valid email addresses, but shouldn&#39;t be mailed in most cases.      unknown:    These emails we weren&#39;t able to validate for one reason or another. Typical cases are \&quot;Their mail server was down\&quot; or \&quot;the anti-spam system is blocking us\&quot;. In most cases, 80% unknowns are invalid/bad email addresses. .</param>
        /// <param name="total">Ammount of emails in the status within the list..</param>
        public EmailValidatorStatusSummaryItem(StatusEnum? status = default(StatusEnum?), int total = default(int))
        {
            this.Status = status;
            this.Total = total;
        }

        /// <summary>
        /// Ammount of emails in the status within the list.
        /// </summary>
        /// <value>Ammount of emails in the status within the list.</value>
        /// <example>12</example>
        [DataMember(Name = "total", EmitDefaultValue = false)]
        public int Total { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailValidatorStatusSummaryItem {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
