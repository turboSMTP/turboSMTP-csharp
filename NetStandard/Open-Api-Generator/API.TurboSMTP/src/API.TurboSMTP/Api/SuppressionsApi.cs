/*
 * TurboSMTP Public APIs
 *
 * This document describes all public turboSMTP **V2** API and offers endpoints Descriptions, Parameters, Requests, Responses and Samples of usage.  [Click here to view the previous version of turboSMTP Public API Version 1.0](https://www.serversmtp.com/turbo-api-1)   # Security For the most part (and where not otherwise explicit) turboSMTP’s API requires Authorization.   Authorization to access a user’s resource is granted to clients provided they set  authentication headers into their request, valued with the proper values issued by turboSMTP servers.  ## *  Authorization via ConsumerKey/ConsumerSecret  This type of authorization consists of a pair of headers, named consumerKey and consumerSecret that are created and granted to the end user to be used in a permanent way (unless they´re deleted of course). This kind of authentication is intended to provide access to endpoints features without the need of providing the user the account details (email address + password).  *consumerKey:* Consumer Key Granted.  *consumerSecret:* Consumer Secret Granted.  (Use [/consumerKeys/create](#/consumerkey/createConsumerKey) create a consumer key/secret pair).      ## *  Authorization via Authentication Key  The authentication key is user-based and it is issued by turboSMTP servers upon successful user’s email address + password challenge, performed by means of appropriate request.      *Authorization:* Authorization_Key  (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)  # Data Interchange Format  For the most part (and where not otherwise explicit) turboSMTP’s API uses JSON as the data format of choice when it comes to request and response bodies.       
 *
 * The version of the OpenAPI document: 2.0.0-oas3
 * Contact: api@turbo-smtp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using API.TurboSMTP.Client;
using API.TurboSMTP.Model;

namespace API.TurboSMTP.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISuppressionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Bulk delete suppressions
        /// </summary>
        /// <remarks>
        /// Bulk delete suppressions 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuppressionsDeleteSuccess</returns>
        SuppressionsDeleteSuccess BulkDeleteSuppressions(List<string> requestBody, int operationIndex = 0);

        /// <summary>
        /// Bulk delete suppressions
        /// </summary>
        /// <remarks>
        /// Bulk delete suppressions 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuppressionsDeleteSuccess</returns>
        ApiResponse<SuppressionsDeleteSuccess> BulkDeleteSuppressionsWithHttpInfo(List<string> requestBody, int operationIndex = 0);
        /// <summary>
        /// Delete suppressions
        /// </summary>
        /// <remarks>
        /// Delete suppressions 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suppressionFilterRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuppressionsDeleteSuccess</returns>
        SuppressionsDeleteSuccess DeleteFilterSuppressions(SuppressionFilterRequestBody suppressionFilterRequestBody, int operationIndex = 0);

        /// <summary>
        /// Delete suppressions
        /// </summary>
        /// <remarks>
        /// Delete suppressions 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suppressionFilterRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuppressionsDeleteSuccess</returns>
        ApiResponse<SuppressionsDeleteSuccess> DeleteFilterSuppressionsWithHttpInfo(SuppressionFilterRequestBody suppressionFilterRequestBody, int operationIndex = 0);
        /// <summary>
        /// Export filtered suppressions
        /// </summary>
        /// <remarks>
        /// Export Filtered Suppressions 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suppressionFilterRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string ExportFilterSuppressions(SuppressionFilterRequestBody suppressionFilterRequestBody, int operationIndex = 0);

        /// <summary>
        /// Export filtered suppressions
        /// </summary>
        /// <remarks>
        /// Export Filtered Suppressions 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suppressionFilterRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportFilterSuppressionsWithHttpInfo(SuppressionFilterRequestBody suppressionFilterRequestBody, int operationIndex = 0);
        /// <summary>
        /// Export Suppressions data in CSV file
        /// </summary>
        /// <remarks>
        /// Export Suppressions data in CSV file 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start date</param>
        /// <param name="to">End date</param>
        /// <param name="tz">Timezone Offset (optional)</param>
        /// <param name="filter">Text to search (recipient, sender, email subject or reason for suppression) (optional)</param>
        /// <param name="filterBy"> (optional)</param>
        /// <param name="smartSearch">Smart search (optional, default to false)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="ordertype"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string ExportSuppressionsDataCSV(DateTime from, DateTime to, string tz = default(string), string filter = default(string), List<SuppressionSource> filterBy = default(List<SuppressionSource>), bool? smartSearch = default(bool?), SuppressionOrderBy orderby = default(SuppressionOrderBy), OrderType ordertype = default(OrderType), int operationIndex = 0);

        /// <summary>
        /// Export Suppressions data in CSV file
        /// </summary>
        /// <remarks>
        /// Export Suppressions data in CSV file 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start date</param>
        /// <param name="to">End date</param>
        /// <param name="tz">Timezone Offset (optional)</param>
        /// <param name="filter">Text to search (recipient, sender, email subject or reason for suppression) (optional)</param>
        /// <param name="filterBy"> (optional)</param>
        /// <param name="smartSearch">Smart search (optional, default to false)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="ordertype"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportSuppressionsDataCSVWithHttpInfo(DateTime from, DateTime to, string tz = default(string), string filter = default(string), List<SuppressionSource> filterBy = default(List<SuppressionSource>), bool? smartSearch = default(bool?), SuppressionOrderBy orderby = default(SuppressionOrderBy), OrderType ordertype = default(OrderType), int operationIndex = 0);
        /// <summary>
        /// Filter suppressions
        /// </summary>
        /// <remarks>
        /// Get Suppressions Data 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suppressionFilterOrderPageRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuppressionsSucessResponsetBody</returns>
        SuppressionsSucessResponsetBody FilterSuppressions(SuppressionFilterOrderPageRequestBody suppressionFilterOrderPageRequestBody, int operationIndex = 0);

        /// <summary>
        /// Filter suppressions
        /// </summary>
        /// <remarks>
        /// Get Suppressions Data 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suppressionFilterOrderPageRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuppressionsSucessResponsetBody</returns>
        ApiResponse<SuppressionsSucessResponsetBody> FilterSuppressionsWithHttpInfo(SuppressionFilterOrderPageRequestBody suppressionFilterOrderPageRequestBody, int operationIndex = 0);
        /// <summary>
        /// Get Suppressions Data
        /// </summary>
        /// <remarks>
        /// Get Suppressions Data 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start date</param>
        /// <param name="to">End date</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The numbers of rows per page to return (optional, default to 10)</param>
        /// <param name="tz">Timezone Offset (optional)</param>
        /// <param name="filter">Text to search (recipient, sender, email subject or reason for suppression) (optional)</param>
        /// <param name="filterBy"> (optional)</param>
        /// <param name="smartSearch">Smart search (optional, default to false)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="ordertype"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuppressionsSucessResponsetBody</returns>
        SuppressionsSucessResponsetBody GetSuppressions(DateTime from, DateTime to, int? page = default(int?), int? limit = default(int?), string tz = default(string), string filter = default(string), List<SuppressionSource> filterBy = default(List<SuppressionSource>), bool? smartSearch = default(bool?), SuppressionOrderBy orderby = default(SuppressionOrderBy), OrderType ordertype = default(OrderType), int operationIndex = 0);

        /// <summary>
        /// Get Suppressions Data
        /// </summary>
        /// <remarks>
        /// Get Suppressions Data 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start date</param>
        /// <param name="to">End date</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The numbers of rows per page to return (optional, default to 10)</param>
        /// <param name="tz">Timezone Offset (optional)</param>
        /// <param name="filter">Text to search (recipient, sender, email subject or reason for suppression) (optional)</param>
        /// <param name="filterBy"> (optional)</param>
        /// <param name="smartSearch">Smart search (optional, default to false)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="ordertype"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuppressionsSucessResponsetBody</returns>
        ApiResponse<SuppressionsSucessResponsetBody> GetSuppressionsWithHttpInfo(DateTime from, DateTime to, int? page = default(int?), int? limit = default(int?), string tz = default(string), string filter = default(string), List<SuppressionSource> filterBy = default(List<SuppressionSource>), bool? smartSearch = default(bool?), SuppressionOrderBy orderby = default(SuppressionOrderBy), OrderType ordertype = default(OrderType), int operationIndex = 0);
        /// <summary>
        /// Import Suppressions
        /// </summary>
        /// <remarks>
        ///  Import Suppressions 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suppressionImportJson"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuppressionUploadResponse</returns>
        SuppressionUploadResponse ImportSuppressions(SuppressionImportJson suppressionImportJson, int operationIndex = 0);

        /// <summary>
        /// Import Suppressions
        /// </summary>
        /// <remarks>
        ///  Import Suppressions 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suppressionImportJson"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuppressionUploadResponse</returns>
        ApiResponse<SuppressionUploadResponse> ImportSuppressionsWithHttpInfo(SuppressionImportJson suppressionImportJson, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISuppressionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Bulk delete suppressions
        /// </summary>
        /// <remarks>
        /// Bulk delete suppressions 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuppressionsDeleteSuccess</returns>
        System.Threading.Tasks.Task<SuppressionsDeleteSuccess> BulkDeleteSuppressionsAsync(List<string> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Bulk delete suppressions
        /// </summary>
        /// <remarks>
        /// Bulk delete suppressions 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuppressionsDeleteSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuppressionsDeleteSuccess>> BulkDeleteSuppressionsWithHttpInfoAsync(List<string> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete suppressions
        /// </summary>
        /// <remarks>
        /// Delete suppressions 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suppressionFilterRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuppressionsDeleteSuccess</returns>
        System.Threading.Tasks.Task<SuppressionsDeleteSuccess> DeleteFilterSuppressionsAsync(SuppressionFilterRequestBody suppressionFilterRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete suppressions
        /// </summary>
        /// <remarks>
        /// Delete suppressions 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suppressionFilterRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuppressionsDeleteSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuppressionsDeleteSuccess>> DeleteFilterSuppressionsWithHttpInfoAsync(SuppressionFilterRequestBody suppressionFilterRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Export filtered suppressions
        /// </summary>
        /// <remarks>
        /// Export Filtered Suppressions 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suppressionFilterRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportFilterSuppressionsAsync(SuppressionFilterRequestBody suppressionFilterRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Export filtered suppressions
        /// </summary>
        /// <remarks>
        /// Export Filtered Suppressions 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suppressionFilterRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportFilterSuppressionsWithHttpInfoAsync(SuppressionFilterRequestBody suppressionFilterRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Export Suppressions data in CSV file
        /// </summary>
        /// <remarks>
        /// Export Suppressions data in CSV file 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start date</param>
        /// <param name="to">End date</param>
        /// <param name="tz">Timezone Offset (optional)</param>
        /// <param name="filter">Text to search (recipient, sender, email subject or reason for suppression) (optional)</param>
        /// <param name="filterBy"> (optional)</param>
        /// <param name="smartSearch">Smart search (optional, default to false)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="ordertype"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportSuppressionsDataCSVAsync(DateTime from, DateTime to, string tz = default(string), string filter = default(string), List<SuppressionSource> filterBy = default(List<SuppressionSource>), bool? smartSearch = default(bool?), SuppressionOrderBy orderby = default(SuppressionOrderBy), OrderType ordertype = default(OrderType), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Export Suppressions data in CSV file
        /// </summary>
        /// <remarks>
        /// Export Suppressions data in CSV file 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start date</param>
        /// <param name="to">End date</param>
        /// <param name="tz">Timezone Offset (optional)</param>
        /// <param name="filter">Text to search (recipient, sender, email subject or reason for suppression) (optional)</param>
        /// <param name="filterBy"> (optional)</param>
        /// <param name="smartSearch">Smart search (optional, default to false)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="ordertype"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportSuppressionsDataCSVWithHttpInfoAsync(DateTime from, DateTime to, string tz = default(string), string filter = default(string), List<SuppressionSource> filterBy = default(List<SuppressionSource>), bool? smartSearch = default(bool?), SuppressionOrderBy orderby = default(SuppressionOrderBy), OrderType ordertype = default(OrderType), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Filter suppressions
        /// </summary>
        /// <remarks>
        /// Get Suppressions Data 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suppressionFilterOrderPageRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuppressionsSucessResponsetBody</returns>
        System.Threading.Tasks.Task<SuppressionsSucessResponsetBody> FilterSuppressionsAsync(SuppressionFilterOrderPageRequestBody suppressionFilterOrderPageRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Filter suppressions
        /// </summary>
        /// <remarks>
        /// Get Suppressions Data 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suppressionFilterOrderPageRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuppressionsSucessResponsetBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuppressionsSucessResponsetBody>> FilterSuppressionsWithHttpInfoAsync(SuppressionFilterOrderPageRequestBody suppressionFilterOrderPageRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Suppressions Data
        /// </summary>
        /// <remarks>
        /// Get Suppressions Data 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start date</param>
        /// <param name="to">End date</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The numbers of rows per page to return (optional, default to 10)</param>
        /// <param name="tz">Timezone Offset (optional)</param>
        /// <param name="filter">Text to search (recipient, sender, email subject or reason for suppression) (optional)</param>
        /// <param name="filterBy"> (optional)</param>
        /// <param name="smartSearch">Smart search (optional, default to false)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="ordertype"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuppressionsSucessResponsetBody</returns>
        System.Threading.Tasks.Task<SuppressionsSucessResponsetBody> GetSuppressionsAsync(DateTime from, DateTime to, int? page = default(int?), int? limit = default(int?), string tz = default(string), string filter = default(string), List<SuppressionSource> filterBy = default(List<SuppressionSource>), bool? smartSearch = default(bool?), SuppressionOrderBy orderby = default(SuppressionOrderBy), OrderType ordertype = default(OrderType), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Suppressions Data
        /// </summary>
        /// <remarks>
        /// Get Suppressions Data 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start date</param>
        /// <param name="to">End date</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The numbers of rows per page to return (optional, default to 10)</param>
        /// <param name="tz">Timezone Offset (optional)</param>
        /// <param name="filter">Text to search (recipient, sender, email subject or reason for suppression) (optional)</param>
        /// <param name="filterBy"> (optional)</param>
        /// <param name="smartSearch">Smart search (optional, default to false)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="ordertype"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuppressionsSucessResponsetBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuppressionsSucessResponsetBody>> GetSuppressionsWithHttpInfoAsync(DateTime from, DateTime to, int? page = default(int?), int? limit = default(int?), string tz = default(string), string filter = default(string), List<SuppressionSource> filterBy = default(List<SuppressionSource>), bool? smartSearch = default(bool?), SuppressionOrderBy orderby = default(SuppressionOrderBy), OrderType ordertype = default(OrderType), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Import Suppressions
        /// </summary>
        /// <remarks>
        ///  Import Suppressions 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suppressionImportJson"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuppressionUploadResponse</returns>
        System.Threading.Tasks.Task<SuppressionUploadResponse> ImportSuppressionsAsync(SuppressionImportJson suppressionImportJson, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Import Suppressions
        /// </summary>
        /// <remarks>
        ///  Import Suppressions 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suppressionImportJson"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuppressionUploadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuppressionUploadResponse>> ImportSuppressionsWithHttpInfoAsync(SuppressionImportJson suppressionImportJson, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISuppressionsApi : ISuppressionsApiSync, ISuppressionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SuppressionsApi : ISuppressionsApi
    {
        private API.TurboSMTP.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SuppressionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SuppressionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SuppressionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SuppressionsApi(string basePath)
        {
            this.Configuration = API.TurboSMTP.Client.Configuration.MergeConfigurations(
                API.TurboSMTP.Client.GlobalConfiguration.Instance,
                new API.TurboSMTP.Client.Configuration { BasePath = basePath }
            );
            this.Client = new API.TurboSMTP.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new API.TurboSMTP.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = API.TurboSMTP.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SuppressionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SuppressionsApi(API.TurboSMTP.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = API.TurboSMTP.Client.Configuration.MergeConfigurations(
                API.TurboSMTP.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new API.TurboSMTP.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new API.TurboSMTP.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = API.TurboSMTP.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SuppressionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SuppressionsApi(API.TurboSMTP.Client.ISynchronousClient client, API.TurboSMTP.Client.IAsynchronousClient asyncClient, API.TurboSMTP.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = API.TurboSMTP.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public API.TurboSMTP.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public API.TurboSMTP.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public API.TurboSMTP.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public API.TurboSMTP.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Bulk delete suppressions Bulk delete suppressions 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuppressionsDeleteSuccess</returns>
        public SuppressionsDeleteSuccess BulkDeleteSuppressions(List<string> requestBody, int operationIndex = 0)
        {
            API.TurboSMTP.Client.ApiResponse<SuppressionsDeleteSuccess> localVarResponse = BulkDeleteSuppressionsWithHttpInfo(requestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk delete suppressions Bulk delete suppressions 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuppressionsDeleteSuccess</returns>
        public API.TurboSMTP.Client.ApiResponse<SuppressionsDeleteSuccess> BulkDeleteSuppressionsWithHttpInfo(List<string> requestBody, int operationIndex = 0)
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new API.TurboSMTP.Client.ApiException(400, "Missing required parameter 'requestBody' when calling SuppressionsApi->BulkDeleteSuppressions");
            }

            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "SuppressionsApi.BulkDeleteSuppressions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SuppressionsDeleteSuccess>("/suppressions/bulk_delete", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BulkDeleteSuppressions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Bulk delete suppressions Bulk delete suppressions 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuppressionsDeleteSuccess</returns>
        public async System.Threading.Tasks.Task<SuppressionsDeleteSuccess> BulkDeleteSuppressionsAsync(List<string> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            API.TurboSMTP.Client.ApiResponse<SuppressionsDeleteSuccess> localVarResponse = await BulkDeleteSuppressionsWithHttpInfoAsync(requestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk delete suppressions Bulk delete suppressions 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuppressionsDeleteSuccess)</returns>
        public async System.Threading.Tasks.Task<API.TurboSMTP.Client.ApiResponse<SuppressionsDeleteSuccess>> BulkDeleteSuppressionsWithHttpInfoAsync(List<string> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new API.TurboSMTP.Client.ApiException(400, "Missing required parameter 'requestBody' when calling SuppressionsApi->BulkDeleteSuppressions");
            }


            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "SuppressionsApi.BulkDeleteSuppressions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SuppressionsDeleteSuccess>("/suppressions/bulk_delete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BulkDeleteSuppressions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete suppressions Delete suppressions 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suppressionFilterRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuppressionsDeleteSuccess</returns>
        public SuppressionsDeleteSuccess DeleteFilterSuppressions(SuppressionFilterRequestBody suppressionFilterRequestBody, int operationIndex = 0)
        {
            API.TurboSMTP.Client.ApiResponse<SuppressionsDeleteSuccess> localVarResponse = DeleteFilterSuppressionsWithHttpInfo(suppressionFilterRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete suppressions Delete suppressions 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suppressionFilterRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuppressionsDeleteSuccess</returns>
        public API.TurboSMTP.Client.ApiResponse<SuppressionsDeleteSuccess> DeleteFilterSuppressionsWithHttpInfo(SuppressionFilterRequestBody suppressionFilterRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'suppressionFilterRequestBody' is set
            if (suppressionFilterRequestBody == null)
            {
                throw new API.TurboSMTP.Client.ApiException(400, "Missing required parameter 'suppressionFilterRequestBody' when calling SuppressionsApi->DeleteFilterSuppressions");
            }

            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = suppressionFilterRequestBody;

            localVarRequestOptions.Operation = "SuppressionsApi.DeleteFilterSuppressions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SuppressionsDeleteSuccess>("/suppressions/delete", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFilterSuppressions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete suppressions Delete suppressions 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suppressionFilterRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuppressionsDeleteSuccess</returns>
        public async System.Threading.Tasks.Task<SuppressionsDeleteSuccess> DeleteFilterSuppressionsAsync(SuppressionFilterRequestBody suppressionFilterRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            API.TurboSMTP.Client.ApiResponse<SuppressionsDeleteSuccess> localVarResponse = await DeleteFilterSuppressionsWithHttpInfoAsync(suppressionFilterRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete suppressions Delete suppressions 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suppressionFilterRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuppressionsDeleteSuccess)</returns>
        public async System.Threading.Tasks.Task<API.TurboSMTP.Client.ApiResponse<SuppressionsDeleteSuccess>> DeleteFilterSuppressionsWithHttpInfoAsync(SuppressionFilterRequestBody suppressionFilterRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'suppressionFilterRequestBody' is set
            if (suppressionFilterRequestBody == null)
            {
                throw new API.TurboSMTP.Client.ApiException(400, "Missing required parameter 'suppressionFilterRequestBody' when calling SuppressionsApi->DeleteFilterSuppressions");
            }


            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = suppressionFilterRequestBody;

            localVarRequestOptions.Operation = "SuppressionsApi.DeleteFilterSuppressions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SuppressionsDeleteSuccess>("/suppressions/delete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFilterSuppressions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export filtered suppressions Export Filtered Suppressions 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suppressionFilterRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string ExportFilterSuppressions(SuppressionFilterRequestBody suppressionFilterRequestBody, int operationIndex = 0)
        {
            API.TurboSMTP.Client.ApiResponse<string> localVarResponse = ExportFilterSuppressionsWithHttpInfo(suppressionFilterRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export filtered suppressions Export Filtered Suppressions 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suppressionFilterRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public API.TurboSMTP.Client.ApiResponse<string> ExportFilterSuppressionsWithHttpInfo(SuppressionFilterRequestBody suppressionFilterRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'suppressionFilterRequestBody' is set
            if (suppressionFilterRequestBody == null)
            {
                throw new API.TurboSMTP.Client.ApiException(400, "Missing required parameter 'suppressionFilterRequestBody' when calling SuppressionsApi->ExportFilterSuppressions");
            }

            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/csv",
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = suppressionFilterRequestBody;

            localVarRequestOptions.Operation = "SuppressionsApi.ExportFilterSuppressions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/suppressions/csv", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportFilterSuppressions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export filtered suppressions Export Filtered Suppressions 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suppressionFilterRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportFilterSuppressionsAsync(SuppressionFilterRequestBody suppressionFilterRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            API.TurboSMTP.Client.ApiResponse<string> localVarResponse = await ExportFilterSuppressionsWithHttpInfoAsync(suppressionFilterRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export filtered suppressions Export Filtered Suppressions 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suppressionFilterRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<API.TurboSMTP.Client.ApiResponse<string>> ExportFilterSuppressionsWithHttpInfoAsync(SuppressionFilterRequestBody suppressionFilterRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'suppressionFilterRequestBody' is set
            if (suppressionFilterRequestBody == null)
            {
                throw new API.TurboSMTP.Client.ApiException(400, "Missing required parameter 'suppressionFilterRequestBody' when calling SuppressionsApi->ExportFilterSuppressions");
            }


            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/csv",
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = suppressionFilterRequestBody;

            localVarRequestOptions.Operation = "SuppressionsApi.ExportFilterSuppressions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/suppressions/csv", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportFilterSuppressions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export Suppressions data in CSV file Export Suppressions data in CSV file 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start date</param>
        /// <param name="to">End date</param>
        /// <param name="tz">Timezone Offset (optional)</param>
        /// <param name="filter">Text to search (recipient, sender, email subject or reason for suppression) (optional)</param>
        /// <param name="filterBy"> (optional)</param>
        /// <param name="smartSearch">Smart search (optional, default to false)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="ordertype"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string ExportSuppressionsDataCSV(DateTime from, DateTime to, string tz = default(string), string filter = default(string), List<SuppressionSource> filterBy = default(List<SuppressionSource>), bool? smartSearch = default(bool?), SuppressionOrderBy orderby = default(SuppressionOrderBy), OrderType ordertype = default(OrderType), int operationIndex = 0)
        {
            API.TurboSMTP.Client.ApiResponse<string> localVarResponse = ExportSuppressionsDataCSVWithHttpInfo(from, to, tz, filter, filterBy, smartSearch, orderby, ordertype);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export Suppressions data in CSV file Export Suppressions data in CSV file 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start date</param>
        /// <param name="to">End date</param>
        /// <param name="tz">Timezone Offset (optional)</param>
        /// <param name="filter">Text to search (recipient, sender, email subject or reason for suppression) (optional)</param>
        /// <param name="filterBy"> (optional)</param>
        /// <param name="smartSearch">Smart search (optional, default to false)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="ordertype"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public API.TurboSMTP.Client.ApiResponse<string> ExportSuppressionsDataCSVWithHttpInfo(DateTime from, DateTime to, string tz = default(string), string filter = default(string), List<SuppressionSource> filterBy = default(List<SuppressionSource>), bool? smartSearch = default(bool?), SuppressionOrderBy orderby = default(SuppressionOrderBy), OrderType ordertype = default(OrderType), int operationIndex = 0)
        {
            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/csv",
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            if (tz != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "tz", tz));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (filterBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("multi", "filter_by", filterBy));
            }
            if (smartSearch != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "smart_search", smartSearch));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby));
            }
            if (ordertype != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "ordertype", ordertype));
            }

            localVarRequestOptions.Operation = "SuppressionsApi.ExportSuppressionsDataCSV";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/suppressions/csv", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportSuppressionsDataCSV", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export Suppressions data in CSV file Export Suppressions data in CSV file 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start date</param>
        /// <param name="to">End date</param>
        /// <param name="tz">Timezone Offset (optional)</param>
        /// <param name="filter">Text to search (recipient, sender, email subject or reason for suppression) (optional)</param>
        /// <param name="filterBy"> (optional)</param>
        /// <param name="smartSearch">Smart search (optional, default to false)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="ordertype"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportSuppressionsDataCSVAsync(DateTime from, DateTime to, string tz = default(string), string filter = default(string), List<SuppressionSource> filterBy = default(List<SuppressionSource>), bool? smartSearch = default(bool?), SuppressionOrderBy orderby = default(SuppressionOrderBy), OrderType ordertype = default(OrderType), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            API.TurboSMTP.Client.ApiResponse<string> localVarResponse = await ExportSuppressionsDataCSVWithHttpInfoAsync(from, to, tz, filter, filterBy, smartSearch, orderby, ordertype, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export Suppressions data in CSV file Export Suppressions data in CSV file 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start date</param>
        /// <param name="to">End date</param>
        /// <param name="tz">Timezone Offset (optional)</param>
        /// <param name="filter">Text to search (recipient, sender, email subject or reason for suppression) (optional)</param>
        /// <param name="filterBy"> (optional)</param>
        /// <param name="smartSearch">Smart search (optional, default to false)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="ordertype"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<API.TurboSMTP.Client.ApiResponse<string>> ExportSuppressionsDataCSVWithHttpInfoAsync(DateTime from, DateTime to, string tz = default(string), string filter = default(string), List<SuppressionSource> filterBy = default(List<SuppressionSource>), bool? smartSearch = default(bool?), SuppressionOrderBy orderby = default(SuppressionOrderBy), OrderType ordertype = default(OrderType), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/csv",
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            if (tz != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "tz", tz));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (filterBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("multi", "filter_by", filterBy));
            }
            if (smartSearch != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "smart_search", smartSearch));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby));
            }
            if (ordertype != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "ordertype", ordertype));
            }

            localVarRequestOptions.Operation = "SuppressionsApi.ExportSuppressionsDataCSV";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/suppressions/csv", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportSuppressionsDataCSV", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Filter suppressions Get Suppressions Data 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suppressionFilterOrderPageRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuppressionsSucessResponsetBody</returns>
        public SuppressionsSucessResponsetBody FilterSuppressions(SuppressionFilterOrderPageRequestBody suppressionFilterOrderPageRequestBody, int operationIndex = 0)
        {
            API.TurboSMTP.Client.ApiResponse<SuppressionsSucessResponsetBody> localVarResponse = FilterSuppressionsWithHttpInfo(suppressionFilterOrderPageRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Filter suppressions Get Suppressions Data 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suppressionFilterOrderPageRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuppressionsSucessResponsetBody</returns>
        public API.TurboSMTP.Client.ApiResponse<SuppressionsSucessResponsetBody> FilterSuppressionsWithHttpInfo(SuppressionFilterOrderPageRequestBody suppressionFilterOrderPageRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'suppressionFilterOrderPageRequestBody' is set
            if (suppressionFilterOrderPageRequestBody == null)
            {
                throw new API.TurboSMTP.Client.ApiException(400, "Missing required parameter 'suppressionFilterOrderPageRequestBody' when calling SuppressionsApi->FilterSuppressions");
            }

            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = suppressionFilterOrderPageRequestBody;

            localVarRequestOptions.Operation = "SuppressionsApi.FilterSuppressions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SuppressionsSucessResponsetBody>("/suppressions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilterSuppressions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Filter suppressions Get Suppressions Data 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suppressionFilterOrderPageRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuppressionsSucessResponsetBody</returns>
        public async System.Threading.Tasks.Task<SuppressionsSucessResponsetBody> FilterSuppressionsAsync(SuppressionFilterOrderPageRequestBody suppressionFilterOrderPageRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            API.TurboSMTP.Client.ApiResponse<SuppressionsSucessResponsetBody> localVarResponse = await FilterSuppressionsWithHttpInfoAsync(suppressionFilterOrderPageRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Filter suppressions Get Suppressions Data 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suppressionFilterOrderPageRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuppressionsSucessResponsetBody)</returns>
        public async System.Threading.Tasks.Task<API.TurboSMTP.Client.ApiResponse<SuppressionsSucessResponsetBody>> FilterSuppressionsWithHttpInfoAsync(SuppressionFilterOrderPageRequestBody suppressionFilterOrderPageRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'suppressionFilterOrderPageRequestBody' is set
            if (suppressionFilterOrderPageRequestBody == null)
            {
                throw new API.TurboSMTP.Client.ApiException(400, "Missing required parameter 'suppressionFilterOrderPageRequestBody' when calling SuppressionsApi->FilterSuppressions");
            }


            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = suppressionFilterOrderPageRequestBody;

            localVarRequestOptions.Operation = "SuppressionsApi.FilterSuppressions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SuppressionsSucessResponsetBody>("/suppressions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilterSuppressions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Suppressions Data Get Suppressions Data 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start date</param>
        /// <param name="to">End date</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The numbers of rows per page to return (optional, default to 10)</param>
        /// <param name="tz">Timezone Offset (optional)</param>
        /// <param name="filter">Text to search (recipient, sender, email subject or reason for suppression) (optional)</param>
        /// <param name="filterBy"> (optional)</param>
        /// <param name="smartSearch">Smart search (optional, default to false)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="ordertype"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuppressionsSucessResponsetBody</returns>
        public SuppressionsSucessResponsetBody GetSuppressions(DateTime from, DateTime to, int? page = default(int?), int? limit = default(int?), string tz = default(string), string filter = default(string), List<SuppressionSource> filterBy = default(List<SuppressionSource>), bool? smartSearch = default(bool?), SuppressionOrderBy orderby = default(SuppressionOrderBy), OrderType ordertype = default(OrderType), int operationIndex = 0)
        {
            API.TurboSMTP.Client.ApiResponse<SuppressionsSucessResponsetBody> localVarResponse = GetSuppressionsWithHttpInfo(from, to, page, limit, tz, filter, filterBy, smartSearch, orderby, ordertype);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Suppressions Data Get Suppressions Data 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start date</param>
        /// <param name="to">End date</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The numbers of rows per page to return (optional, default to 10)</param>
        /// <param name="tz">Timezone Offset (optional)</param>
        /// <param name="filter">Text to search (recipient, sender, email subject or reason for suppression) (optional)</param>
        /// <param name="filterBy"> (optional)</param>
        /// <param name="smartSearch">Smart search (optional, default to false)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="ordertype"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuppressionsSucessResponsetBody</returns>
        public API.TurboSMTP.Client.ApiResponse<SuppressionsSucessResponsetBody> GetSuppressionsWithHttpInfo(DateTime from, DateTime to, int? page = default(int?), int? limit = default(int?), string tz = default(string), string filter = default(string), List<SuppressionSource> filterBy = default(List<SuppressionSource>), bool? smartSearch = default(bool?), SuppressionOrderBy orderby = default(SuppressionOrderBy), OrderType ordertype = default(OrderType), int operationIndex = 0)
        {
            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            if (tz != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "tz", tz));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (filterBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("multi", "filter_by", filterBy));
            }
            if (smartSearch != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "smart_search", smartSearch));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby));
            }
            if (ordertype != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "ordertype", ordertype));
            }

            localVarRequestOptions.Operation = "SuppressionsApi.GetSuppressions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SuppressionsSucessResponsetBody>("/suppressions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSuppressions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Suppressions Data Get Suppressions Data 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start date</param>
        /// <param name="to">End date</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The numbers of rows per page to return (optional, default to 10)</param>
        /// <param name="tz">Timezone Offset (optional)</param>
        /// <param name="filter">Text to search (recipient, sender, email subject or reason for suppression) (optional)</param>
        /// <param name="filterBy"> (optional)</param>
        /// <param name="smartSearch">Smart search (optional, default to false)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="ordertype"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuppressionsSucessResponsetBody</returns>
        public async System.Threading.Tasks.Task<SuppressionsSucessResponsetBody> GetSuppressionsAsync(DateTime from, DateTime to, int? page = default(int?), int? limit = default(int?), string tz = default(string), string filter = default(string), List<SuppressionSource> filterBy = default(List<SuppressionSource>), bool? smartSearch = default(bool?), SuppressionOrderBy orderby = default(SuppressionOrderBy), OrderType ordertype = default(OrderType), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            API.TurboSMTP.Client.ApiResponse<SuppressionsSucessResponsetBody> localVarResponse = await GetSuppressionsWithHttpInfoAsync(from, to, page, limit, tz, filter, filterBy, smartSearch, orderby, ordertype, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Suppressions Data Get Suppressions Data 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start date</param>
        /// <param name="to">End date</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The numbers of rows per page to return (optional, default to 10)</param>
        /// <param name="tz">Timezone Offset (optional)</param>
        /// <param name="filter">Text to search (recipient, sender, email subject or reason for suppression) (optional)</param>
        /// <param name="filterBy"> (optional)</param>
        /// <param name="smartSearch">Smart search (optional, default to false)</param>
        /// <param name="orderby"> (optional)</param>
        /// <param name="ordertype"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuppressionsSucessResponsetBody)</returns>
        public async System.Threading.Tasks.Task<API.TurboSMTP.Client.ApiResponse<SuppressionsSucessResponsetBody>> GetSuppressionsWithHttpInfoAsync(DateTime from, DateTime to, int? page = default(int?), int? limit = default(int?), string tz = default(string), string filter = default(string), List<SuppressionSource> filterBy = default(List<SuppressionSource>), bool? smartSearch = default(bool?), SuppressionOrderBy orderby = default(SuppressionOrderBy), OrderType ordertype = default(OrderType), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            if (tz != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "tz", tz));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (filterBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("multi", "filter_by", filterBy));
            }
            if (smartSearch != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "smart_search", smartSearch));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby));
            }
            if (ordertype != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "ordertype", ordertype));
            }

            localVarRequestOptions.Operation = "SuppressionsApi.GetSuppressions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SuppressionsSucessResponsetBody>("/suppressions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSuppressions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import Suppressions  Import Suppressions 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suppressionImportJson"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuppressionUploadResponse</returns>
        public SuppressionUploadResponse ImportSuppressions(SuppressionImportJson suppressionImportJson, int operationIndex = 0)
        {
            API.TurboSMTP.Client.ApiResponse<SuppressionUploadResponse> localVarResponse = ImportSuppressionsWithHttpInfo(suppressionImportJson);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import Suppressions  Import Suppressions 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suppressionImportJson"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuppressionUploadResponse</returns>
        public API.TurboSMTP.Client.ApiResponse<SuppressionUploadResponse> ImportSuppressionsWithHttpInfo(SuppressionImportJson suppressionImportJson, int operationIndex = 0)
        {
            // verify the required parameter 'suppressionImportJson' is set
            if (suppressionImportJson == null)
            {
                throw new API.TurboSMTP.Client.ApiException(400, "Missing required parameter 'suppressionImportJson' when calling SuppressionsApi->ImportSuppressions");
            }

            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = suppressionImportJson;

            localVarRequestOptions.Operation = "SuppressionsApi.ImportSuppressions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SuppressionUploadResponse>("/suppressions/import", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportSuppressions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import Suppressions  Import Suppressions 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suppressionImportJson"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuppressionUploadResponse</returns>
        public async System.Threading.Tasks.Task<SuppressionUploadResponse> ImportSuppressionsAsync(SuppressionImportJson suppressionImportJson, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            API.TurboSMTP.Client.ApiResponse<SuppressionUploadResponse> localVarResponse = await ImportSuppressionsWithHttpInfoAsync(suppressionImportJson, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import Suppressions  Import Suppressions 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="suppressionImportJson"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuppressionUploadResponse)</returns>
        public async System.Threading.Tasks.Task<API.TurboSMTP.Client.ApiResponse<SuppressionUploadResponse>> ImportSuppressionsWithHttpInfoAsync(SuppressionImportJson suppressionImportJson, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'suppressionImportJson' is set
            if (suppressionImportJson == null)
            {
                throw new API.TurboSMTP.Client.ApiException(400, "Missing required parameter 'suppressionImportJson' when calling SuppressionsApi->ImportSuppressions");
            }


            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = suppressionImportJson;

            localVarRequestOptions.Operation = "SuppressionsApi.ImportSuppressions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SuppressionUploadResponse>("/suppressions/import", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportSuppressions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
