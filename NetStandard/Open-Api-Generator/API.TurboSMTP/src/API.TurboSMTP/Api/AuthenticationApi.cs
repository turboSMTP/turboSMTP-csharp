/*
 * TurboSMTP Public APIs
 *
 * This document describes all public turboSMTP **V2** API and offers endpoints Descriptions, Parameters, Requests, Responses and Samples of usage.  [Click here to view the previous version of turboSMTP Public API Version 1.0](https://www.serversmtp.com/turbo-api-1)   # Security For the most part (and where not otherwise explicit) turboSMTP’s API requires Authorization.   Authorization to access a user’s resource is granted to clients provided they set  authentication headers into their request, valued with the proper values issued by turboSMTP servers.  ## *  Authorization via ConsumerKey/ConsumerSecret  This type of authorization consists of a pair of headers, named consumerKey and consumerSecret that are created and granted to the end user to be used in a permanent way (unless they´re deleted of course). This kind of authentication is intended to provide access to endpoints features without the need of providing the user the account details (email address + password).  *consumerKey:* Consumer Key Granted.  *consumerSecret:* Consumer Secret Granted.  (Use [/consumerKeys/create](#/consumerkey/createConsumerKey) create a consumer key/secret pair).      ## *  Authorization via Authentication Key  The authentication key is user-based and it is issued by turboSMTP servers upon successful user’s email address + password challenge, performed by means of appropriate request.      *Authorization:* Authorization_Key  (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)  # Data Interchange Format  For the most part (and where not otherwise explicit) turboSMTP’s API uses JSON as the data format of choice when it comes to request and response bodies.       
 *
 * The version of the OpenAPI document: 2.0.0-oas3
 * Contact: api@turbo-smtp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using API.TurboSMTP.Client;
using API.TurboSMTP.Model;

namespace API.TurboSMTP.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthenticationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Login - Get API Key
        /// </summary>
        /// <remarks>
        /// **This endpoint allows you to get an API Key**  By providing your turboSMTP authentication details you will be able to get an API Key.  Use your API Key to consume APIs that require authorization. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationLoginRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AuthenticationLoginSucessResponsetBody</returns>
        AuthenticationLoginSucessResponsetBody AuthenticationLogin(AuthenticationLoginRequestBody authenticationLoginRequestBody, int operationIndex = 0);

        /// <summary>
        /// Login - Get API Key
        /// </summary>
        /// <remarks>
        /// **This endpoint allows you to get an API Key**  By providing your turboSMTP authentication details you will be able to get an API Key.  Use your API Key to consume APIs that require authorization. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationLoginRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AuthenticationLoginSucessResponsetBody</returns>
        ApiResponse<AuthenticationLoginSucessResponsetBody> AuthenticationLoginWithHttpInfo(AuthenticationLoginRequestBody authenticationLoginRequestBody, int operationIndex = 0);
        /// <summary>
        /// Logout - Revoke API Key
        /// </summary>
        /// <remarks>
        /// **This endpoint allows you to revoke your API Key** 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommonMessageResponseBody</returns>
        CommonMessageResponseBody AuthenticationLogout(int operationIndex = 0);

        /// <summary>
        /// Logout - Revoke API Key
        /// </summary>
        /// <remarks>
        /// **This endpoint allows you to revoke your API Key** 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommonMessageResponseBody</returns>
        ApiResponse<CommonMessageResponseBody> AuthenticationLogoutWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Change turboSMTP password
        /// </summary>
        /// <remarks>
        /// **This endpoint allows you to change your current password**  ## PASSWORD RULES    * Passwords must have at least 10 characters.   * At least one character must be uppercase.   * At least one character must be lowercase.   * At least one character must be numeric. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePasswordRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommonSuccessResponseBody</returns>
        CommonSuccessResponseBody ChangePassword(ChangePasswordRequestBody changePasswordRequestBody, int operationIndex = 0);

        /// <summary>
        /// Change turboSMTP password
        /// </summary>
        /// <remarks>
        /// **This endpoint allows you to change your current password**  ## PASSWORD RULES    * Passwords must have at least 10 characters.   * At least one character must be uppercase.   * At least one character must be lowercase.   * At least one character must be numeric. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePasswordRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommonSuccessResponseBody</returns>
        ApiResponse<CommonSuccessResponseBody> ChangePasswordWithHttpInfo(ChangePasswordRequestBody changePasswordRequestBody, int operationIndex = 0);
        /// <summary>
        /// Forgot Password - Verify if Secret Passord Recovery token is valid.
        /// </summary>
        /// <remarks>
        /// Forgot Password - check if secret token is valid  **Note**: Tokens are valid for 1 hour. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Secret Token</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommonSuccessResponseBody</returns>
        CommonSuccessResponseBody CheckValidityTokenResetPassword(string token, int operationIndex = 0);

        /// <summary>
        /// Forgot Password - Verify if Secret Passord Recovery token is valid.
        /// </summary>
        /// <remarks>
        /// Forgot Password - check if secret token is valid  **Note**: Tokens are valid for 1 hour. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Secret Token</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommonSuccessResponseBody</returns>
        ApiResponse<CommonSuccessResponseBody> CheckValidityTokenResetPasswordWithHttpInfo(string token, int operationIndex = 0);
        /// <summary>
        /// Forgot Password - Use in case you don´t remember your turboSMTP password
        /// </summary>
        /// <remarks>
        /// **This endpoint will allow you to get an email that will help you reset your turboSMTP password**  In your password reset email you will find:  * A **Reset Password** button that will take you to the password reset form on turboSMTP website. * A secret token to be used to reset the password via [/authentication/forgot-password](#/authentication/updateResetPassword). **Note**: Token is vaid for 1 hour. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendSecretTokenResetPasswordRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommonSuccessResponseBody</returns>
        CommonSuccessResponseBody SendSecretTokenResetPassword(SendSecretTokenResetPasswordRequestBody sendSecretTokenResetPasswordRequestBody, int operationIndex = 0);

        /// <summary>
        /// Forgot Password - Use in case you don´t remember your turboSMTP password
        /// </summary>
        /// <remarks>
        /// **This endpoint will allow you to get an email that will help you reset your turboSMTP password**  In your password reset email you will find:  * A **Reset Password** button that will take you to the password reset form on turboSMTP website. * A secret token to be used to reset the password via [/authentication/forgot-password](#/authentication/updateResetPassword). **Note**: Token is vaid for 1 hour. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendSecretTokenResetPasswordRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommonSuccessResponseBody</returns>
        ApiResponse<CommonSuccessResponseBody> SendSecretTokenResetPasswordWithHttpInfo(SendSecretTokenResetPasswordRequestBody sendSecretTokenResetPasswordRequestBody, int operationIndex = 0);
        /// <summary>
        /// Forgot Password - change password
        /// </summary>
        /// <remarks>
        /// **This endpoint allows you to reset your password by using a password reset token**  ## PASSWORD RULES    * Passwords must have at least 10 characters.   * At least one character must be uppercase.   * At least one character must be lowercase.   * At least one character must be numeric. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateResetPasswordRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommonSuccessResponseBody</returns>
        CommonSuccessResponseBody UpdateResetPassword(UpdateResetPasswordRequestBody updateResetPasswordRequestBody, int operationIndex = 0);

        /// <summary>
        /// Forgot Password - change password
        /// </summary>
        /// <remarks>
        /// **This endpoint allows you to reset your password by using a password reset token**  ## PASSWORD RULES    * Passwords must have at least 10 characters.   * At least one character must be uppercase.   * At least one character must be lowercase.   * At least one character must be numeric. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateResetPasswordRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommonSuccessResponseBody</returns>
        ApiResponse<CommonSuccessResponseBody> UpdateResetPasswordWithHttpInfo(UpdateResetPasswordRequestBody updateResetPasswordRequestBody, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthenticationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Login - Get API Key
        /// </summary>
        /// <remarks>
        /// **This endpoint allows you to get an API Key**  By providing your turboSMTP authentication details you will be able to get an API Key.  Use your API Key to consume APIs that require authorization. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationLoginRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthenticationLoginSucessResponsetBody</returns>
        System.Threading.Tasks.Task<AuthenticationLoginSucessResponsetBody> AuthenticationLoginAsync(AuthenticationLoginRequestBody authenticationLoginRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Login - Get API Key
        /// </summary>
        /// <remarks>
        /// **This endpoint allows you to get an API Key**  By providing your turboSMTP authentication details you will be able to get an API Key.  Use your API Key to consume APIs that require authorization. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationLoginRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthenticationLoginSucessResponsetBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthenticationLoginSucessResponsetBody>> AuthenticationLoginWithHttpInfoAsync(AuthenticationLoginRequestBody authenticationLoginRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Logout - Revoke API Key
        /// </summary>
        /// <remarks>
        /// **This endpoint allows you to revoke your API Key** 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonMessageResponseBody</returns>
        System.Threading.Tasks.Task<CommonMessageResponseBody> AuthenticationLogoutAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Logout - Revoke API Key
        /// </summary>
        /// <remarks>
        /// **This endpoint allows you to revoke your API Key** 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonMessageResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommonMessageResponseBody>> AuthenticationLogoutWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Change turboSMTP password
        /// </summary>
        /// <remarks>
        /// **This endpoint allows you to change your current password**  ## PASSWORD RULES    * Passwords must have at least 10 characters.   * At least one character must be uppercase.   * At least one character must be lowercase.   * At least one character must be numeric. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePasswordRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonSuccessResponseBody</returns>
        System.Threading.Tasks.Task<CommonSuccessResponseBody> ChangePasswordAsync(ChangePasswordRequestBody changePasswordRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Change turboSMTP password
        /// </summary>
        /// <remarks>
        /// **This endpoint allows you to change your current password**  ## PASSWORD RULES    * Passwords must have at least 10 characters.   * At least one character must be uppercase.   * At least one character must be lowercase.   * At least one character must be numeric. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePasswordRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonSuccessResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommonSuccessResponseBody>> ChangePasswordWithHttpInfoAsync(ChangePasswordRequestBody changePasswordRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Forgot Password - Verify if Secret Passord Recovery token is valid.
        /// </summary>
        /// <remarks>
        /// Forgot Password - check if secret token is valid  **Note**: Tokens are valid for 1 hour. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Secret Token</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonSuccessResponseBody</returns>
        System.Threading.Tasks.Task<CommonSuccessResponseBody> CheckValidityTokenResetPasswordAsync(string token, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Forgot Password - Verify if Secret Passord Recovery token is valid.
        /// </summary>
        /// <remarks>
        /// Forgot Password - check if secret token is valid  **Note**: Tokens are valid for 1 hour. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Secret Token</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonSuccessResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommonSuccessResponseBody>> CheckValidityTokenResetPasswordWithHttpInfoAsync(string token, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Forgot Password - Use in case you don´t remember your turboSMTP password
        /// </summary>
        /// <remarks>
        /// **This endpoint will allow you to get an email that will help you reset your turboSMTP password**  In your password reset email you will find:  * A **Reset Password** button that will take you to the password reset form on turboSMTP website. * A secret token to be used to reset the password via [/authentication/forgot-password](#/authentication/updateResetPassword). **Note**: Token is vaid for 1 hour. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendSecretTokenResetPasswordRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonSuccessResponseBody</returns>
        System.Threading.Tasks.Task<CommonSuccessResponseBody> SendSecretTokenResetPasswordAsync(SendSecretTokenResetPasswordRequestBody sendSecretTokenResetPasswordRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Forgot Password - Use in case you don´t remember your turboSMTP password
        /// </summary>
        /// <remarks>
        /// **This endpoint will allow you to get an email that will help you reset your turboSMTP password**  In your password reset email you will find:  * A **Reset Password** button that will take you to the password reset form on turboSMTP website. * A secret token to be used to reset the password via [/authentication/forgot-password](#/authentication/updateResetPassword). **Note**: Token is vaid for 1 hour. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendSecretTokenResetPasswordRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonSuccessResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommonSuccessResponseBody>> SendSecretTokenResetPasswordWithHttpInfoAsync(SendSecretTokenResetPasswordRequestBody sendSecretTokenResetPasswordRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Forgot Password - change password
        /// </summary>
        /// <remarks>
        /// **This endpoint allows you to reset your password by using a password reset token**  ## PASSWORD RULES    * Passwords must have at least 10 characters.   * At least one character must be uppercase.   * At least one character must be lowercase.   * At least one character must be numeric. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateResetPasswordRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonSuccessResponseBody</returns>
        System.Threading.Tasks.Task<CommonSuccessResponseBody> UpdateResetPasswordAsync(UpdateResetPasswordRequestBody updateResetPasswordRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Forgot Password - change password
        /// </summary>
        /// <remarks>
        /// **This endpoint allows you to reset your password by using a password reset token**  ## PASSWORD RULES    * Passwords must have at least 10 characters.   * At least one character must be uppercase.   * At least one character must be lowercase.   * At least one character must be numeric. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateResetPasswordRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonSuccessResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommonSuccessResponseBody>> UpdateResetPasswordWithHttpInfoAsync(UpdateResetPasswordRequestBody updateResetPasswordRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthenticationApi : IAuthenticationApiSync, IAuthenticationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuthenticationApi : IAuthenticationApi
    {
        private API.TurboSMTP.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthenticationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthenticationApi(string basePath)
        {
            this.Configuration = API.TurboSMTP.Client.Configuration.MergeConfigurations(
                API.TurboSMTP.Client.GlobalConfiguration.Instance,
                new API.TurboSMTP.Client.Configuration { BasePath = basePath }
            );
            this.Client = new API.TurboSMTP.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new API.TurboSMTP.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = API.TurboSMTP.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuthenticationApi(API.TurboSMTP.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = API.TurboSMTP.Client.Configuration.MergeConfigurations(
                API.TurboSMTP.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new API.TurboSMTP.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new API.TurboSMTP.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = API.TurboSMTP.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AuthenticationApi(API.TurboSMTP.Client.ISynchronousClient client, API.TurboSMTP.Client.IAsynchronousClient asyncClient, API.TurboSMTP.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = API.TurboSMTP.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public API.TurboSMTP.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public API.TurboSMTP.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public API.TurboSMTP.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public API.TurboSMTP.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Login - Get API Key **This endpoint allows you to get an API Key**  By providing your turboSMTP authentication details you will be able to get an API Key.  Use your API Key to consume APIs that require authorization. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationLoginRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AuthenticationLoginSucessResponsetBody</returns>
        public AuthenticationLoginSucessResponsetBody AuthenticationLogin(AuthenticationLoginRequestBody authenticationLoginRequestBody, int operationIndex = 0)
        {
            API.TurboSMTP.Client.ApiResponse<AuthenticationLoginSucessResponsetBody> localVarResponse = AuthenticationLoginWithHttpInfo(authenticationLoginRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Login - Get API Key **This endpoint allows you to get an API Key**  By providing your turboSMTP authentication details you will be able to get an API Key.  Use your API Key to consume APIs that require authorization. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationLoginRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AuthenticationLoginSucessResponsetBody</returns>
        public API.TurboSMTP.Client.ApiResponse<AuthenticationLoginSucessResponsetBody> AuthenticationLoginWithHttpInfo(AuthenticationLoginRequestBody authenticationLoginRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'authenticationLoginRequestBody' is set
            if (authenticationLoginRequestBody == null)
            {
                throw new API.TurboSMTP.Client.ApiException(400, "Missing required parameter 'authenticationLoginRequestBody' when calling AuthenticationApi->AuthenticationLogin");
            }

            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = authenticationLoginRequestBody;

            localVarRequestOptions.Operation = "AuthenticationApi.AuthenticationLogin";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AuthenticationLoginSucessResponsetBody>("/authorize", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthenticationLogin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Login - Get API Key **This endpoint allows you to get an API Key**  By providing your turboSMTP authentication details you will be able to get an API Key.  Use your API Key to consume APIs that require authorization. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationLoginRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthenticationLoginSucessResponsetBody</returns>
        public async System.Threading.Tasks.Task<AuthenticationLoginSucessResponsetBody> AuthenticationLoginAsync(AuthenticationLoginRequestBody authenticationLoginRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            API.TurboSMTP.Client.ApiResponse<AuthenticationLoginSucessResponsetBody> localVarResponse = await AuthenticationLoginWithHttpInfoAsync(authenticationLoginRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Login - Get API Key **This endpoint allows you to get an API Key**  By providing your turboSMTP authentication details you will be able to get an API Key.  Use your API Key to consume APIs that require authorization. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationLoginRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthenticationLoginSucessResponsetBody)</returns>
        public async System.Threading.Tasks.Task<API.TurboSMTP.Client.ApiResponse<AuthenticationLoginSucessResponsetBody>> AuthenticationLoginWithHttpInfoAsync(AuthenticationLoginRequestBody authenticationLoginRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authenticationLoginRequestBody' is set
            if (authenticationLoginRequestBody == null)
            {
                throw new API.TurboSMTP.Client.ApiException(400, "Missing required parameter 'authenticationLoginRequestBody' when calling AuthenticationApi->AuthenticationLogin");
            }


            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = authenticationLoginRequestBody;

            localVarRequestOptions.Operation = "AuthenticationApi.AuthenticationLogin";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AuthenticationLoginSucessResponsetBody>("/authorize", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthenticationLogin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Logout - Revoke API Key **This endpoint allows you to revoke your API Key** 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommonMessageResponseBody</returns>
        public CommonMessageResponseBody AuthenticationLogout(int operationIndex = 0)
        {
            API.TurboSMTP.Client.ApiResponse<CommonMessageResponseBody> localVarResponse = AuthenticationLogoutWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Logout - Revoke API Key **This endpoint allows you to revoke your API Key** 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommonMessageResponseBody</returns>
        public API.TurboSMTP.Client.ApiResponse<CommonMessageResponseBody> AuthenticationLogoutWithHttpInfo(int operationIndex = 0)
        {
            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AuthenticationApi.AuthenticationLogout";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CommonMessageResponseBody>("/deauthorize", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthenticationLogout", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Logout - Revoke API Key **This endpoint allows you to revoke your API Key** 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonMessageResponseBody</returns>
        public async System.Threading.Tasks.Task<CommonMessageResponseBody> AuthenticationLogoutAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            API.TurboSMTP.Client.ApiResponse<CommonMessageResponseBody> localVarResponse = await AuthenticationLogoutWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Logout - Revoke API Key **This endpoint allows you to revoke your API Key** 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonMessageResponseBody)</returns>
        public async System.Threading.Tasks.Task<API.TurboSMTP.Client.ApiResponse<CommonMessageResponseBody>> AuthenticationLogoutWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AuthenticationApi.AuthenticationLogout";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CommonMessageResponseBody>("/deauthorize", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthenticationLogout", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Change turboSMTP password **This endpoint allows you to change your current password**  ## PASSWORD RULES    * Passwords must have at least 10 characters.   * At least one character must be uppercase.   * At least one character must be lowercase.   * At least one character must be numeric. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePasswordRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommonSuccessResponseBody</returns>
        public CommonSuccessResponseBody ChangePassword(ChangePasswordRequestBody changePasswordRequestBody, int operationIndex = 0)
        {
            API.TurboSMTP.Client.ApiResponse<CommonSuccessResponseBody> localVarResponse = ChangePasswordWithHttpInfo(changePasswordRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Change turboSMTP password **This endpoint allows you to change your current password**  ## PASSWORD RULES    * Passwords must have at least 10 characters.   * At least one character must be uppercase.   * At least one character must be lowercase.   * At least one character must be numeric. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePasswordRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommonSuccessResponseBody</returns>
        public API.TurboSMTP.Client.ApiResponse<CommonSuccessResponseBody> ChangePasswordWithHttpInfo(ChangePasswordRequestBody changePasswordRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'changePasswordRequestBody' is set
            if (changePasswordRequestBody == null)
            {
                throw new API.TurboSMTP.Client.ApiException(400, "Missing required parameter 'changePasswordRequestBody' when calling AuthenticationApi->ChangePassword");
            }

            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = changePasswordRequestBody;

            localVarRequestOptions.Operation = "AuthenticationApi.ChangePassword";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<CommonSuccessResponseBody>("/change-password", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangePassword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Change turboSMTP password **This endpoint allows you to change your current password**  ## PASSWORD RULES    * Passwords must have at least 10 characters.   * At least one character must be uppercase.   * At least one character must be lowercase.   * At least one character must be numeric. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePasswordRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonSuccessResponseBody</returns>
        public async System.Threading.Tasks.Task<CommonSuccessResponseBody> ChangePasswordAsync(ChangePasswordRequestBody changePasswordRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            API.TurboSMTP.Client.ApiResponse<CommonSuccessResponseBody> localVarResponse = await ChangePasswordWithHttpInfoAsync(changePasswordRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Change turboSMTP password **This endpoint allows you to change your current password**  ## PASSWORD RULES    * Passwords must have at least 10 characters.   * At least one character must be uppercase.   * At least one character must be lowercase.   * At least one character must be numeric. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePasswordRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonSuccessResponseBody)</returns>
        public async System.Threading.Tasks.Task<API.TurboSMTP.Client.ApiResponse<CommonSuccessResponseBody>> ChangePasswordWithHttpInfoAsync(ChangePasswordRequestBody changePasswordRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'changePasswordRequestBody' is set
            if (changePasswordRequestBody == null)
            {
                throw new API.TurboSMTP.Client.ApiException(400, "Missing required parameter 'changePasswordRequestBody' when calling AuthenticationApi->ChangePassword");
            }


            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = changePasswordRequestBody;

            localVarRequestOptions.Operation = "AuthenticationApi.ChangePassword";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<CommonSuccessResponseBody>("/change-password", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangePassword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Forgot Password - Verify if Secret Passord Recovery token is valid. Forgot Password - check if secret token is valid  **Note**: Tokens are valid for 1 hour. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Secret Token</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommonSuccessResponseBody</returns>
        public CommonSuccessResponseBody CheckValidityTokenResetPassword(string token, int operationIndex = 0)
        {
            API.TurboSMTP.Client.ApiResponse<CommonSuccessResponseBody> localVarResponse = CheckValidityTokenResetPasswordWithHttpInfo(token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Forgot Password - Verify if Secret Passord Recovery token is valid. Forgot Password - check if secret token is valid  **Note**: Tokens are valid for 1 hour. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Secret Token</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommonSuccessResponseBody</returns>
        public API.TurboSMTP.Client.ApiResponse<CommonSuccessResponseBody> CheckValidityTokenResetPasswordWithHttpInfo(string token, int operationIndex = 0)
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new API.TurboSMTP.Client.ApiException(400, "Missing required parameter 'token' when calling AuthenticationApi->CheckValidityTokenResetPassword");
            }

            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "token", token));

            localVarRequestOptions.Operation = "AuthenticationApi.CheckValidityTokenResetPassword";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CommonSuccessResponseBody>("/forgot-password", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckValidityTokenResetPassword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Forgot Password - Verify if Secret Passord Recovery token is valid. Forgot Password - check if secret token is valid  **Note**: Tokens are valid for 1 hour. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Secret Token</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonSuccessResponseBody</returns>
        public async System.Threading.Tasks.Task<CommonSuccessResponseBody> CheckValidityTokenResetPasswordAsync(string token, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            API.TurboSMTP.Client.ApiResponse<CommonSuccessResponseBody> localVarResponse = await CheckValidityTokenResetPasswordWithHttpInfoAsync(token, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Forgot Password - Verify if Secret Passord Recovery token is valid. Forgot Password - check if secret token is valid  **Note**: Tokens are valid for 1 hour. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Secret Token</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonSuccessResponseBody)</returns>
        public async System.Threading.Tasks.Task<API.TurboSMTP.Client.ApiResponse<CommonSuccessResponseBody>> CheckValidityTokenResetPasswordWithHttpInfoAsync(string token, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new API.TurboSMTP.Client.ApiException(400, "Missing required parameter 'token' when calling AuthenticationApi->CheckValidityTokenResetPassword");
            }


            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "token", token));

            localVarRequestOptions.Operation = "AuthenticationApi.CheckValidityTokenResetPassword";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CommonSuccessResponseBody>("/forgot-password", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckValidityTokenResetPassword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Forgot Password - Use in case you don´t remember your turboSMTP password **This endpoint will allow you to get an email that will help you reset your turboSMTP password**  In your password reset email you will find:  * A **Reset Password** button that will take you to the password reset form on turboSMTP website. * A secret token to be used to reset the password via [/authentication/forgot-password](#/authentication/updateResetPassword). **Note**: Token is vaid for 1 hour. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendSecretTokenResetPasswordRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommonSuccessResponseBody</returns>
        public CommonSuccessResponseBody SendSecretTokenResetPassword(SendSecretTokenResetPasswordRequestBody sendSecretTokenResetPasswordRequestBody, int operationIndex = 0)
        {
            API.TurboSMTP.Client.ApiResponse<CommonSuccessResponseBody> localVarResponse = SendSecretTokenResetPasswordWithHttpInfo(sendSecretTokenResetPasswordRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Forgot Password - Use in case you don´t remember your turboSMTP password **This endpoint will allow you to get an email that will help you reset your turboSMTP password**  In your password reset email you will find:  * A **Reset Password** button that will take you to the password reset form on turboSMTP website. * A secret token to be used to reset the password via [/authentication/forgot-password](#/authentication/updateResetPassword). **Note**: Token is vaid for 1 hour. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendSecretTokenResetPasswordRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommonSuccessResponseBody</returns>
        public API.TurboSMTP.Client.ApiResponse<CommonSuccessResponseBody> SendSecretTokenResetPasswordWithHttpInfo(SendSecretTokenResetPasswordRequestBody sendSecretTokenResetPasswordRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'sendSecretTokenResetPasswordRequestBody' is set
            if (sendSecretTokenResetPasswordRequestBody == null)
            {
                throw new API.TurboSMTP.Client.ApiException(400, "Missing required parameter 'sendSecretTokenResetPasswordRequestBody' when calling AuthenticationApi->SendSecretTokenResetPassword");
            }

            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sendSecretTokenResetPasswordRequestBody;

            localVarRequestOptions.Operation = "AuthenticationApi.SendSecretTokenResetPassword";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CommonSuccessResponseBody>("/forgot-password", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendSecretTokenResetPassword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Forgot Password - Use in case you don´t remember your turboSMTP password **This endpoint will allow you to get an email that will help you reset your turboSMTP password**  In your password reset email you will find:  * A **Reset Password** button that will take you to the password reset form on turboSMTP website. * A secret token to be used to reset the password via [/authentication/forgot-password](#/authentication/updateResetPassword). **Note**: Token is vaid for 1 hour. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendSecretTokenResetPasswordRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonSuccessResponseBody</returns>
        public async System.Threading.Tasks.Task<CommonSuccessResponseBody> SendSecretTokenResetPasswordAsync(SendSecretTokenResetPasswordRequestBody sendSecretTokenResetPasswordRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            API.TurboSMTP.Client.ApiResponse<CommonSuccessResponseBody> localVarResponse = await SendSecretTokenResetPasswordWithHttpInfoAsync(sendSecretTokenResetPasswordRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Forgot Password - Use in case you don´t remember your turboSMTP password **This endpoint will allow you to get an email that will help you reset your turboSMTP password**  In your password reset email you will find:  * A **Reset Password** button that will take you to the password reset form on turboSMTP website. * A secret token to be used to reset the password via [/authentication/forgot-password](#/authentication/updateResetPassword). **Note**: Token is vaid for 1 hour. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendSecretTokenResetPasswordRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonSuccessResponseBody)</returns>
        public async System.Threading.Tasks.Task<API.TurboSMTP.Client.ApiResponse<CommonSuccessResponseBody>> SendSecretTokenResetPasswordWithHttpInfoAsync(SendSecretTokenResetPasswordRequestBody sendSecretTokenResetPasswordRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sendSecretTokenResetPasswordRequestBody' is set
            if (sendSecretTokenResetPasswordRequestBody == null)
            {
                throw new API.TurboSMTP.Client.ApiException(400, "Missing required parameter 'sendSecretTokenResetPasswordRequestBody' when calling AuthenticationApi->SendSecretTokenResetPassword");
            }


            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = sendSecretTokenResetPasswordRequestBody;

            localVarRequestOptions.Operation = "AuthenticationApi.SendSecretTokenResetPassword";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CommonSuccessResponseBody>("/forgot-password", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendSecretTokenResetPassword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Forgot Password - change password **This endpoint allows you to reset your password by using a password reset token**  ## PASSWORD RULES    * Passwords must have at least 10 characters.   * At least one character must be uppercase.   * At least one character must be lowercase.   * At least one character must be numeric. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateResetPasswordRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommonSuccessResponseBody</returns>
        public CommonSuccessResponseBody UpdateResetPassword(UpdateResetPasswordRequestBody updateResetPasswordRequestBody, int operationIndex = 0)
        {
            API.TurboSMTP.Client.ApiResponse<CommonSuccessResponseBody> localVarResponse = UpdateResetPasswordWithHttpInfo(updateResetPasswordRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Forgot Password - change password **This endpoint allows you to reset your password by using a password reset token**  ## PASSWORD RULES    * Passwords must have at least 10 characters.   * At least one character must be uppercase.   * At least one character must be lowercase.   * At least one character must be numeric. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateResetPasswordRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommonSuccessResponseBody</returns>
        public API.TurboSMTP.Client.ApiResponse<CommonSuccessResponseBody> UpdateResetPasswordWithHttpInfo(UpdateResetPasswordRequestBody updateResetPasswordRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'updateResetPasswordRequestBody' is set
            if (updateResetPasswordRequestBody == null)
            {
                throw new API.TurboSMTP.Client.ApiException(400, "Missing required parameter 'updateResetPasswordRequestBody' when calling AuthenticationApi->UpdateResetPassword");
            }

            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateResetPasswordRequestBody;

            localVarRequestOptions.Operation = "AuthenticationApi.UpdateResetPassword";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<CommonSuccessResponseBody>("/forgot-password", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateResetPassword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Forgot Password - change password **This endpoint allows you to reset your password by using a password reset token**  ## PASSWORD RULES    * Passwords must have at least 10 characters.   * At least one character must be uppercase.   * At least one character must be lowercase.   * At least one character must be numeric. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateResetPasswordRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonSuccessResponseBody</returns>
        public async System.Threading.Tasks.Task<CommonSuccessResponseBody> UpdateResetPasswordAsync(UpdateResetPasswordRequestBody updateResetPasswordRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            API.TurboSMTP.Client.ApiResponse<CommonSuccessResponseBody> localVarResponse = await UpdateResetPasswordWithHttpInfoAsync(updateResetPasswordRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Forgot Password - change password **This endpoint allows you to reset your password by using a password reset token**  ## PASSWORD RULES    * Passwords must have at least 10 characters.   * At least one character must be uppercase.   * At least one character must be lowercase.   * At least one character must be numeric. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateResetPasswordRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonSuccessResponseBody)</returns>
        public async System.Threading.Tasks.Task<API.TurboSMTP.Client.ApiResponse<CommonSuccessResponseBody>> UpdateResetPasswordWithHttpInfoAsync(UpdateResetPasswordRequestBody updateResetPasswordRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateResetPasswordRequestBody' is set
            if (updateResetPasswordRequestBody == null)
            {
                throw new API.TurboSMTP.Client.ApiException(400, "Missing required parameter 'updateResetPasswordRequestBody' when calling AuthenticationApi->UpdateResetPassword");
            }


            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateResetPasswordRequestBody;

            localVarRequestOptions.Operation = "AuthenticationApi.UpdateResetPassword";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<CommonSuccessResponseBody>("/forgot-password", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateResetPassword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
