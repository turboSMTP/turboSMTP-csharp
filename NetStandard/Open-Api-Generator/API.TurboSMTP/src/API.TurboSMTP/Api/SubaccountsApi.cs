/*
 * TurboSMTP Public APIs
 *
 * This document describes all public turboSMTP **V2** API and offers endpoints Descriptions, Parameters, Requests, Responses and Samples of usage.  [Click here to view the previous version of turboSMTP Public API Version 1.0](https://www.serversmtp.com/turbo-api-1)   # Security For the most part (and where not otherwise explicit) turboSMTP’s API requires Authorization.   Authorization to access a user’s resource is granted to clients provided they set  authentication headers into their request, valued with the proper values issued by turboSMTP servers.  ## *  Authorization via ConsumerKey/ConsumerSecret  This type of authorization consists of a pair of headers, named consumerKey and consumerSecret that are created and granted to the end user to be used in a permanent way (unless they´re deleted of course). This kind of authentication is intended to provide access to endpoints features without the need of providing the user the account details (email address + password).  *consumerKey:* Consumer Key Granted.  *consumerSecret:* Consumer Secret Granted.  (Use [/consumerKeys/create](#/consumerkey/createConsumerKey) create a consumer key/secret pair).      ## *  Authorization via Authentication Key  The authentication key is user-based and it is issued by turboSMTP servers upon successful user’s email address + password challenge, performed by means of appropriate request.      *Authorization:* Authorization_Key  (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)  # Data Interchange Format  For the most part (and where not otherwise explicit) turboSMTP’s API uses JSON as the data format of choice when it comes to request and response bodies.       
 *
 * The version of the OpenAPI document: 2.0.0-oas3
 * Contact: api@turbo-smtp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using API.TurboSMTP.Client;
using API.TurboSMTP.Model;

namespace API.TurboSMTP.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubaccountsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Check if account email exists in turboSMTP
        /// </summary>
        /// <remarks>
        ///  Check if account email exists in turboSMTP 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommmonResultResponseBody</returns>
        CommmonResultResponseBody CheckIfAccountEmailExists(string email, int operationIndex = 0);

        /// <summary>
        /// Check if account email exists in turboSMTP
        /// </summary>
        /// <remarks>
        ///  Check if account email exists in turboSMTP 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommmonResultResponseBody</returns>
        ApiResponse<CommmonResultResponseBody> CheckIfAccountEmailExistsWithHttpInfo(string email, int operationIndex = 0);
        /// <summary>
        /// Create Subaccount.
        /// </summary>
        /// <remarks>
        ///  Create subaccount. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subaccountCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Subaccount</returns>
        Subaccount CreateSubaccount(SubaccountCreateRequest subaccountCreateRequest, int operationIndex = 0);

        /// <summary>
        /// Create Subaccount.
        /// </summary>
        /// <remarks>
        ///  Create subaccount. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subaccountCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Subaccount</returns>
        ApiResponse<Subaccount> CreateSubaccountWithHttpInfo(SubaccountCreateRequest subaccountCreateRequest, int operationIndex = 0);
        /// <summary>
        /// Delete agency logo
        /// </summary>
        /// <remarks>
        ///  Delete agency logo 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommonSuccessResponseBody</returns>
        CommonSuccessResponseBody DeleteLogoFile(int operationIndex = 0);

        /// <summary>
        /// Delete agency logo
        /// </summary>
        /// <remarks>
        ///  Delete agency logo 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommonSuccessResponseBody</returns>
        ApiResponse<CommonSuccessResponseBody> DeleteLogoFileWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get subaccount active plan.
        /// </summary>
        /// <remarks>
        ///  Get subaccount active plan. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubaccountActivePlan</returns>
        SubaccountActivePlan GetActivePlan(int id, int operationIndex = 0);

        /// <summary>
        /// Get subaccount active plan.
        /// </summary>
        /// <remarks>
        ///  Get subaccount active plan. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubaccountActivePlan</returns>
        ApiResponse<SubaccountActivePlan> GetActivePlanWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Update Agency details
        /// </summary>
        /// <remarks>
        ///  Get Agency details. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AgencySettings</returns>
        AgencySettings GetAgencySettings(int operationIndex = 0);

        /// <summary>
        /// Update Agency details
        /// </summary>
        /// <remarks>
        ///  Get Agency details. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AgencySettings</returns>
        ApiResponse<AgencySettings> GetAgencySettingsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get agency logo
        /// </summary>
        /// <remarks>
        ///  Get agency logo 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Logo</returns>
        Logo GetLogoFile(int operationIndex = 0);

        /// <summary>
        /// Get agency logo
        /// </summary>
        /// <remarks>
        ///  Get agency logo 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Logo</returns>
        ApiResponse<Logo> GetLogoFileWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get sub account details
        /// </summary>
        /// <remarks>
        ///  Get sub account details. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Subaccount</returns>
        Subaccount GetSubaccountDetails(int id, int operationIndex = 0);

        /// <summary>
        /// Get sub account details
        /// </summary>
        /// <remarks>
        ///  Get sub account details. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Subaccount</returns>
        ApiResponse<Subaccount> GetSubaccountDetailsWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Get Subaccounts lists information
        /// </summary>
        /// <remarks>
        ///  List subaccounts information 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The numbers of rows per page to return (optional, default to 10)</param>
        /// <param name="filterByEmail">Filter by email addresses that fully/partially match the search value. (optional)</param>
        /// <param name="filterByActive">Filter by subaccount status. (optional)</param>
        /// <param name="filterByIP">Filter by IP Addresses. (optional)</param>
        /// <param name="orderby">Field to sort by (optional, default to email)</param>
        /// <param name="ordertype"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubAccountListSucessResponsetBody</returns>
        SubAccountListSucessResponsetBody GetSubaccounts(int? page = default(int?), int? limit = default(int?), string filterByEmail = default(string), bool? filterByActive = default(bool?), List<string> filterByIP = default(List<string>), string orderby = default(string), OrderType ordertype = default(OrderType), int operationIndex = 0);

        /// <summary>
        /// Get Subaccounts lists information
        /// </summary>
        /// <remarks>
        ///  List subaccounts information 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The numbers of rows per page to return (optional, default to 10)</param>
        /// <param name="filterByEmail">Filter by email addresses that fully/partially match the search value. (optional)</param>
        /// <param name="filterByActive">Filter by subaccount status. (optional)</param>
        /// <param name="filterByIP">Filter by IP Addresses. (optional)</param>
        /// <param name="orderby">Field to sort by (optional, default to email)</param>
        /// <param name="ordertype"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubAccountListSucessResponsetBody</returns>
        ApiResponse<SubAccountListSucessResponsetBody> GetSubaccountsWithHttpInfo(int? page = default(int?), int? limit = default(int?), string filterByEmail = default(string), bool? filterByActive = default(bool?), List<string> filterByIP = default(List<string>), string orderby = default(string), OrderType ordertype = default(OrderType), int operationIndex = 0);
        /// <summary>
        /// Login to a subaccount
        /// </summary>
        /// <remarks>
        ///  Login to a subaccount. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AuthenticationLoginSucessResponsetBody</returns>
        AuthenticationLoginSucessResponsetBody SubaccountAuthenticationLogin(Email1 email1, int operationIndex = 0);

        /// <summary>
        /// Login to a subaccount
        /// </summary>
        /// <remarks>
        ///  Login to a subaccount. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AuthenticationLoginSucessResponsetBody</returns>
        ApiResponse<AuthenticationLoginSucessResponsetBody> SubaccountAuthenticationLoginWithHttpInfo(Email1 email1, int operationIndex = 0);
        /// <summary>
        /// Update Agency details
        /// </summary>
        /// <remarks>
        ///  Update Agency Details 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseAgencySettings"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommonSuccessResponseBody</returns>
        CommonSuccessResponseBody UpdateAgencySettings(BaseAgencySettings baseAgencySettings, int operationIndex = 0);

        /// <summary>
        /// Update Agency details
        /// </summary>
        /// <remarks>
        ///  Update Agency Details 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseAgencySettings"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommonSuccessResponseBody</returns>
        ApiResponse<CommonSuccessResponseBody> UpdateAgencySettingsWithHttpInfo(BaseAgencySettings baseAgencySettings, int operationIndex = 0);
        /// <summary>
        /// Update sub account details
        /// </summary>
        /// <remarks>
        ///  Update sub account details. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="subaccountUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Subaccount</returns>
        Subaccount UpdateSubaccountDetails(int id, SubaccountUpdateRequest subaccountUpdateRequest, int operationIndex = 0);

        /// <summary>
        /// Update sub account details
        /// </summary>
        /// <remarks>
        ///  Update sub account details. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="subaccountUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Subaccount</returns>
        ApiResponse<Subaccount> UpdateSubaccountDetailsWithHttpInfo(int id, SubaccountUpdateRequest subaccountUpdateRequest, int operationIndex = 0);
        /// <summary>
        /// Set subaccount smtp limit
        /// </summary>
        /// <remarks>
        ///  Set subaccount smtp limit. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="subaccountSMTPLimit"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubaccountActivePlan</returns>
        SubaccountActivePlan UpdateSubaccountSMTPLimit(int id, SubaccountSMTPLimit subaccountSMTPLimit, int operationIndex = 0);

        /// <summary>
        /// Set subaccount smtp limit
        /// </summary>
        /// <remarks>
        ///  Set subaccount smtp limit. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="subaccountSMTPLimit"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubaccountActivePlan</returns>
        ApiResponse<SubaccountActivePlan> UpdateSubaccountSMTPLimitWithHttpInfo(int id, SubaccountSMTPLimit subaccountSMTPLimit, int operationIndex = 0);
        /// <summary>
        /// Set subaccount status
        /// </summary>
        /// <remarks>
        ///  Set subaccount status. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="subaccountActiveStatus"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubaccountActivePlan</returns>
        SubaccountActivePlan UpdateSubaccountStatus(int id, SubaccountActiveStatus subaccountActiveStatus, int operationIndex = 0);

        /// <summary>
        /// Set subaccount status
        /// </summary>
        /// <remarks>
        ///  Set subaccount status. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="subaccountActiveStatus"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubaccountActivePlan</returns>
        ApiResponse<SubaccountActivePlan> UpdateSubaccountStatusWithHttpInfo(int id, SubaccountActiveStatus subaccountActiveStatus, int operationIndex = 0);
        /// <summary>
        /// Upload agency logo
        /// </summary>
        /// <remarks>
        ///  Upload agency logo.  Logo must be a png or jpeg image. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommonSuccessResponseBody</returns>
        CommonSuccessResponseBody UploadLogoFile(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0);

        /// <summary>
        /// Upload agency logo
        /// </summary>
        /// <remarks>
        ///  Upload agency logo.  Logo must be a png or jpeg image. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommonSuccessResponseBody</returns>
        ApiResponse<CommonSuccessResponseBody> UploadLogoFileWithHttpInfo(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubaccountsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Check if account email exists in turboSMTP
        /// </summary>
        /// <remarks>
        ///  Check if account email exists in turboSMTP 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommmonResultResponseBody</returns>
        System.Threading.Tasks.Task<CommmonResultResponseBody> CheckIfAccountEmailExistsAsync(string email, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check if account email exists in turboSMTP
        /// </summary>
        /// <remarks>
        ///  Check if account email exists in turboSMTP 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommmonResultResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommmonResultResponseBody>> CheckIfAccountEmailExistsWithHttpInfoAsync(string email, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Subaccount.
        /// </summary>
        /// <remarks>
        ///  Create subaccount. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subaccountCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Subaccount</returns>
        System.Threading.Tasks.Task<Subaccount> CreateSubaccountAsync(SubaccountCreateRequest subaccountCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Subaccount.
        /// </summary>
        /// <remarks>
        ///  Create subaccount. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subaccountCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Subaccount)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subaccount>> CreateSubaccountWithHttpInfoAsync(SubaccountCreateRequest subaccountCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete agency logo
        /// </summary>
        /// <remarks>
        ///  Delete agency logo 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonSuccessResponseBody</returns>
        System.Threading.Tasks.Task<CommonSuccessResponseBody> DeleteLogoFileAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete agency logo
        /// </summary>
        /// <remarks>
        ///  Delete agency logo 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonSuccessResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommonSuccessResponseBody>> DeleteLogoFileWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get subaccount active plan.
        /// </summary>
        /// <remarks>
        ///  Get subaccount active plan. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubaccountActivePlan</returns>
        System.Threading.Tasks.Task<SubaccountActivePlan> GetActivePlanAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get subaccount active plan.
        /// </summary>
        /// <remarks>
        ///  Get subaccount active plan. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubaccountActivePlan)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubaccountActivePlan>> GetActivePlanWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Agency details
        /// </summary>
        /// <remarks>
        ///  Get Agency details. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AgencySettings</returns>
        System.Threading.Tasks.Task<AgencySettings> GetAgencySettingsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Agency details
        /// </summary>
        /// <remarks>
        ///  Get Agency details. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AgencySettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<AgencySettings>> GetAgencySettingsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get agency logo
        /// </summary>
        /// <remarks>
        ///  Get agency logo 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Logo</returns>
        System.Threading.Tasks.Task<Logo> GetLogoFileAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get agency logo
        /// </summary>
        /// <remarks>
        ///  Get agency logo 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Logo)</returns>
        System.Threading.Tasks.Task<ApiResponse<Logo>> GetLogoFileWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get sub account details
        /// </summary>
        /// <remarks>
        ///  Get sub account details. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Subaccount</returns>
        System.Threading.Tasks.Task<Subaccount> GetSubaccountDetailsAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get sub account details
        /// </summary>
        /// <remarks>
        ///  Get sub account details. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Subaccount)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subaccount>> GetSubaccountDetailsWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Subaccounts lists information
        /// </summary>
        /// <remarks>
        ///  List subaccounts information 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The numbers of rows per page to return (optional, default to 10)</param>
        /// <param name="filterByEmail">Filter by email addresses that fully/partially match the search value. (optional)</param>
        /// <param name="filterByActive">Filter by subaccount status. (optional)</param>
        /// <param name="filterByIP">Filter by IP Addresses. (optional)</param>
        /// <param name="orderby">Field to sort by (optional, default to email)</param>
        /// <param name="ordertype"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubAccountListSucessResponsetBody</returns>
        System.Threading.Tasks.Task<SubAccountListSucessResponsetBody> GetSubaccountsAsync(int? page = default(int?), int? limit = default(int?), string filterByEmail = default(string), bool? filterByActive = default(bool?), List<string> filterByIP = default(List<string>), string orderby = default(string), OrderType ordertype = default(OrderType), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Subaccounts lists information
        /// </summary>
        /// <remarks>
        ///  List subaccounts information 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The numbers of rows per page to return (optional, default to 10)</param>
        /// <param name="filterByEmail">Filter by email addresses that fully/partially match the search value. (optional)</param>
        /// <param name="filterByActive">Filter by subaccount status. (optional)</param>
        /// <param name="filterByIP">Filter by IP Addresses. (optional)</param>
        /// <param name="orderby">Field to sort by (optional, default to email)</param>
        /// <param name="ordertype"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubAccountListSucessResponsetBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubAccountListSucessResponsetBody>> GetSubaccountsWithHttpInfoAsync(int? page = default(int?), int? limit = default(int?), string filterByEmail = default(string), bool? filterByActive = default(bool?), List<string> filterByIP = default(List<string>), string orderby = default(string), OrderType ordertype = default(OrderType), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Login to a subaccount
        /// </summary>
        /// <remarks>
        ///  Login to a subaccount. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthenticationLoginSucessResponsetBody</returns>
        System.Threading.Tasks.Task<AuthenticationLoginSucessResponsetBody> SubaccountAuthenticationLoginAsync(Email1 email1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Login to a subaccount
        /// </summary>
        /// <remarks>
        ///  Login to a subaccount. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthenticationLoginSucessResponsetBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthenticationLoginSucessResponsetBody>> SubaccountAuthenticationLoginWithHttpInfoAsync(Email1 email1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Agency details
        /// </summary>
        /// <remarks>
        ///  Update Agency Details 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseAgencySettings"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonSuccessResponseBody</returns>
        System.Threading.Tasks.Task<CommonSuccessResponseBody> UpdateAgencySettingsAsync(BaseAgencySettings baseAgencySettings, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Agency details
        /// </summary>
        /// <remarks>
        ///  Update Agency Details 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseAgencySettings"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonSuccessResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommonSuccessResponseBody>> UpdateAgencySettingsWithHttpInfoAsync(BaseAgencySettings baseAgencySettings, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update sub account details
        /// </summary>
        /// <remarks>
        ///  Update sub account details. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="subaccountUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Subaccount</returns>
        System.Threading.Tasks.Task<Subaccount> UpdateSubaccountDetailsAsync(int id, SubaccountUpdateRequest subaccountUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update sub account details
        /// </summary>
        /// <remarks>
        ///  Update sub account details. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="subaccountUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Subaccount)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subaccount>> UpdateSubaccountDetailsWithHttpInfoAsync(int id, SubaccountUpdateRequest subaccountUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set subaccount smtp limit
        /// </summary>
        /// <remarks>
        ///  Set subaccount smtp limit. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="subaccountSMTPLimit"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubaccountActivePlan</returns>
        System.Threading.Tasks.Task<SubaccountActivePlan> UpdateSubaccountSMTPLimitAsync(int id, SubaccountSMTPLimit subaccountSMTPLimit, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set subaccount smtp limit
        /// </summary>
        /// <remarks>
        ///  Set subaccount smtp limit. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="subaccountSMTPLimit"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubaccountActivePlan)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubaccountActivePlan>> UpdateSubaccountSMTPLimitWithHttpInfoAsync(int id, SubaccountSMTPLimit subaccountSMTPLimit, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set subaccount status
        /// </summary>
        /// <remarks>
        ///  Set subaccount status. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="subaccountActiveStatus"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubaccountActivePlan</returns>
        System.Threading.Tasks.Task<SubaccountActivePlan> UpdateSubaccountStatusAsync(int id, SubaccountActiveStatus subaccountActiveStatus, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set subaccount status
        /// </summary>
        /// <remarks>
        ///  Set subaccount status. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="subaccountActiveStatus"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubaccountActivePlan)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubaccountActivePlan>> UpdateSubaccountStatusWithHttpInfoAsync(int id, SubaccountActiveStatus subaccountActiveStatus, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upload agency logo
        /// </summary>
        /// <remarks>
        ///  Upload agency logo.  Logo must be a png or jpeg image. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonSuccessResponseBody</returns>
        System.Threading.Tasks.Task<CommonSuccessResponseBody> UploadLogoFileAsync(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upload agency logo
        /// </summary>
        /// <remarks>
        ///  Upload agency logo.  Logo must be a png or jpeg image. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonSuccessResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommonSuccessResponseBody>> UploadLogoFileWithHttpInfoAsync(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubaccountsApi : ISubaccountsApiSync, ISubaccountsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SubaccountsApi : ISubaccountsApi
    {
        private API.TurboSMTP.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SubaccountsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SubaccountsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubaccountsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SubaccountsApi(string basePath)
        {
            this.Configuration = API.TurboSMTP.Client.Configuration.MergeConfigurations(
                API.TurboSMTP.Client.GlobalConfiguration.Instance,
                new API.TurboSMTP.Client.Configuration { BasePath = basePath }
            );
            this.Client = new API.TurboSMTP.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new API.TurboSMTP.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = API.TurboSMTP.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubaccountsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SubaccountsApi(API.TurboSMTP.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = API.TurboSMTP.Client.Configuration.MergeConfigurations(
                API.TurboSMTP.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new API.TurboSMTP.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new API.TurboSMTP.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = API.TurboSMTP.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubaccountsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SubaccountsApi(API.TurboSMTP.Client.ISynchronousClient client, API.TurboSMTP.Client.IAsynchronousClient asyncClient, API.TurboSMTP.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = API.TurboSMTP.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public API.TurboSMTP.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public API.TurboSMTP.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public API.TurboSMTP.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public API.TurboSMTP.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Check if account email exists in turboSMTP  Check if account email exists in turboSMTP 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommmonResultResponseBody</returns>
        public CommmonResultResponseBody CheckIfAccountEmailExists(string email, int operationIndex = 0)
        {
            API.TurboSMTP.Client.ApiResponse<CommmonResultResponseBody> localVarResponse = CheckIfAccountEmailExistsWithHttpInfo(email);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check if account email exists in turboSMTP  Check if account email exists in turboSMTP 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommmonResultResponseBody</returns>
        public API.TurboSMTP.Client.ApiResponse<CommmonResultResponseBody> CheckIfAccountEmailExistsWithHttpInfo(string email, int operationIndex = 0)
        {
            // verify the required parameter 'email' is set
            if (email == null)
            {
                throw new API.TurboSMTP.Client.ApiException(400, "Missing required parameter 'email' when calling SubaccountsApi->CheckIfAccountEmailExists");
            }

            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "Email", email));

            localVarRequestOptions.Operation = "SubaccountsApi.CheckIfAccountEmailExists";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CommmonResultResponseBody>("/subaccounts/email-exists", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckIfAccountEmailExists", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if account email exists in turboSMTP  Check if account email exists in turboSMTP 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommmonResultResponseBody</returns>
        public async System.Threading.Tasks.Task<CommmonResultResponseBody> CheckIfAccountEmailExistsAsync(string email, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            API.TurboSMTP.Client.ApiResponse<CommmonResultResponseBody> localVarResponse = await CheckIfAccountEmailExistsWithHttpInfoAsync(email, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check if account email exists in turboSMTP  Check if account email exists in turboSMTP 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">Email address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommmonResultResponseBody)</returns>
        public async System.Threading.Tasks.Task<API.TurboSMTP.Client.ApiResponse<CommmonResultResponseBody>> CheckIfAccountEmailExistsWithHttpInfoAsync(string email, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'email' is set
            if (email == null)
            {
                throw new API.TurboSMTP.Client.ApiException(400, "Missing required parameter 'email' when calling SubaccountsApi->CheckIfAccountEmailExists");
            }


            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "Email", email));

            localVarRequestOptions.Operation = "SubaccountsApi.CheckIfAccountEmailExists";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CommmonResultResponseBody>("/subaccounts/email-exists", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckIfAccountEmailExists", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Subaccount.  Create subaccount. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subaccountCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Subaccount</returns>
        public Subaccount CreateSubaccount(SubaccountCreateRequest subaccountCreateRequest, int operationIndex = 0)
        {
            API.TurboSMTP.Client.ApiResponse<Subaccount> localVarResponse = CreateSubaccountWithHttpInfo(subaccountCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Subaccount.  Create subaccount. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subaccountCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Subaccount</returns>
        public API.TurboSMTP.Client.ApiResponse<Subaccount> CreateSubaccountWithHttpInfo(SubaccountCreateRequest subaccountCreateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'subaccountCreateRequest' is set
            if (subaccountCreateRequest == null)
            {
                throw new API.TurboSMTP.Client.ApiException(400, "Missing required parameter 'subaccountCreateRequest' when calling SubaccountsApi->CreateSubaccount");
            }

            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = subaccountCreateRequest;

            localVarRequestOptions.Operation = "SubaccountsApi.CreateSubaccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Subaccount>("/subaccounts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSubaccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Subaccount.  Create subaccount. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subaccountCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Subaccount</returns>
        public async System.Threading.Tasks.Task<Subaccount> CreateSubaccountAsync(SubaccountCreateRequest subaccountCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            API.TurboSMTP.Client.ApiResponse<Subaccount> localVarResponse = await CreateSubaccountWithHttpInfoAsync(subaccountCreateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Subaccount.  Create subaccount. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subaccountCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Subaccount)</returns>
        public async System.Threading.Tasks.Task<API.TurboSMTP.Client.ApiResponse<Subaccount>> CreateSubaccountWithHttpInfoAsync(SubaccountCreateRequest subaccountCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subaccountCreateRequest' is set
            if (subaccountCreateRequest == null)
            {
                throw new API.TurboSMTP.Client.ApiException(400, "Missing required parameter 'subaccountCreateRequest' when calling SubaccountsApi->CreateSubaccount");
            }


            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = subaccountCreateRequest;

            localVarRequestOptions.Operation = "SubaccountsApi.CreateSubaccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Subaccount>("/subaccounts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSubaccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete agency logo  Delete agency logo 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommonSuccessResponseBody</returns>
        public CommonSuccessResponseBody DeleteLogoFile(int operationIndex = 0)
        {
            API.TurboSMTP.Client.ApiResponse<CommonSuccessResponseBody> localVarResponse = DeleteLogoFileWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete agency logo  Delete agency logo 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommonSuccessResponseBody</returns>
        public API.TurboSMTP.Client.ApiResponse<CommonSuccessResponseBody> DeleteLogoFileWithHttpInfo(int operationIndex = 0)
        {
            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "SubaccountsApi.DeleteLogoFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<CommonSuccessResponseBody>("/subaccounts/logo", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLogoFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete agency logo  Delete agency logo 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonSuccessResponseBody</returns>
        public async System.Threading.Tasks.Task<CommonSuccessResponseBody> DeleteLogoFileAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            API.TurboSMTP.Client.ApiResponse<CommonSuccessResponseBody> localVarResponse = await DeleteLogoFileWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete agency logo  Delete agency logo 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonSuccessResponseBody)</returns>
        public async System.Threading.Tasks.Task<API.TurboSMTP.Client.ApiResponse<CommonSuccessResponseBody>> DeleteLogoFileWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "SubaccountsApi.DeleteLogoFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<CommonSuccessResponseBody>("/subaccounts/logo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLogoFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get subaccount active plan.  Get subaccount active plan. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubaccountActivePlan</returns>
        public SubaccountActivePlan GetActivePlan(int id, int operationIndex = 0)
        {
            API.TurboSMTP.Client.ApiResponse<SubaccountActivePlan> localVarResponse = GetActivePlanWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get subaccount active plan.  Get subaccount active plan. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubaccountActivePlan</returns>
        public API.TurboSMTP.Client.ApiResponse<SubaccountActivePlan> GetActivePlanWithHttpInfo(int id, int operationIndex = 0)
        {
            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Id", API.TurboSMTP.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "SubaccountsApi.GetActivePlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SubaccountActivePlan>("/subaccounts/{Id}/active-plan", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetActivePlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get subaccount active plan.  Get subaccount active plan. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubaccountActivePlan</returns>
        public async System.Threading.Tasks.Task<SubaccountActivePlan> GetActivePlanAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            API.TurboSMTP.Client.ApiResponse<SubaccountActivePlan> localVarResponse = await GetActivePlanWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get subaccount active plan.  Get subaccount active plan. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubaccountActivePlan)</returns>
        public async System.Threading.Tasks.Task<API.TurboSMTP.Client.ApiResponse<SubaccountActivePlan>> GetActivePlanWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Id", API.TurboSMTP.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "SubaccountsApi.GetActivePlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SubaccountActivePlan>("/subaccounts/{Id}/active-plan", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetActivePlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Agency details  Get Agency details. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AgencySettings</returns>
        public AgencySettings GetAgencySettings(int operationIndex = 0)
        {
            API.TurboSMTP.Client.ApiResponse<AgencySettings> localVarResponse = GetAgencySettingsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Agency details  Get Agency details. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AgencySettings</returns>
        public API.TurboSMTP.Client.ApiResponse<AgencySettings> GetAgencySettingsWithHttpInfo(int operationIndex = 0)
        {
            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "SubaccountsApi.GetAgencySettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AgencySettings>("/subaccounts/agency", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAgencySettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Agency details  Get Agency details. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AgencySettings</returns>
        public async System.Threading.Tasks.Task<AgencySettings> GetAgencySettingsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            API.TurboSMTP.Client.ApiResponse<AgencySettings> localVarResponse = await GetAgencySettingsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Agency details  Get Agency details. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AgencySettings)</returns>
        public async System.Threading.Tasks.Task<API.TurboSMTP.Client.ApiResponse<AgencySettings>> GetAgencySettingsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "SubaccountsApi.GetAgencySettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AgencySettings>("/subaccounts/agency", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAgencySettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get agency logo  Get agency logo 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Logo</returns>
        public Logo GetLogoFile(int operationIndex = 0)
        {
            API.TurboSMTP.Client.ApiResponse<Logo> localVarResponse = GetLogoFileWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get agency logo  Get agency logo 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Logo</returns>
        public API.TurboSMTP.Client.ApiResponse<Logo> GetLogoFileWithHttpInfo(int operationIndex = 0)
        {
            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "SubaccountsApi.GetLogoFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Logo>("/subaccounts/logo", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLogoFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get agency logo  Get agency logo 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Logo</returns>
        public async System.Threading.Tasks.Task<Logo> GetLogoFileAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            API.TurboSMTP.Client.ApiResponse<Logo> localVarResponse = await GetLogoFileWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get agency logo  Get agency logo 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Logo)</returns>
        public async System.Threading.Tasks.Task<API.TurboSMTP.Client.ApiResponse<Logo>> GetLogoFileWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "SubaccountsApi.GetLogoFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Logo>("/subaccounts/logo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLogoFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get sub account details  Get sub account details. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Subaccount</returns>
        public Subaccount GetSubaccountDetails(int id, int operationIndex = 0)
        {
            API.TurboSMTP.Client.ApiResponse<Subaccount> localVarResponse = GetSubaccountDetailsWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get sub account details  Get sub account details. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Subaccount</returns>
        public API.TurboSMTP.Client.ApiResponse<Subaccount> GetSubaccountDetailsWithHttpInfo(int id, int operationIndex = 0)
        {
            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Id", API.TurboSMTP.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "SubaccountsApi.GetSubaccountDetails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Subaccount>("/subaccounts/{Id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubaccountDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get sub account details  Get sub account details. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Subaccount</returns>
        public async System.Threading.Tasks.Task<Subaccount> GetSubaccountDetailsAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            API.TurboSMTP.Client.ApiResponse<Subaccount> localVarResponse = await GetSubaccountDetailsWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get sub account details  Get sub account details. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Subaccount)</returns>
        public async System.Threading.Tasks.Task<API.TurboSMTP.Client.ApiResponse<Subaccount>> GetSubaccountDetailsWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Id", API.TurboSMTP.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "SubaccountsApi.GetSubaccountDetails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Subaccount>("/subaccounts/{Id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubaccountDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Subaccounts lists information  List subaccounts information 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The numbers of rows per page to return (optional, default to 10)</param>
        /// <param name="filterByEmail">Filter by email addresses that fully/partially match the search value. (optional)</param>
        /// <param name="filterByActive">Filter by subaccount status. (optional)</param>
        /// <param name="filterByIP">Filter by IP Addresses. (optional)</param>
        /// <param name="orderby">Field to sort by (optional, default to email)</param>
        /// <param name="ordertype"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubAccountListSucessResponsetBody</returns>
        public SubAccountListSucessResponsetBody GetSubaccounts(int? page = default(int?), int? limit = default(int?), string filterByEmail = default(string), bool? filterByActive = default(bool?), List<string> filterByIP = default(List<string>), string orderby = default(string), OrderType ordertype = default(OrderType), int operationIndex = 0)
        {
            API.TurboSMTP.Client.ApiResponse<SubAccountListSucessResponsetBody> localVarResponse = GetSubaccountsWithHttpInfo(page, limit, filterByEmail, filterByActive, filterByIP, orderby, ordertype);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Subaccounts lists information  List subaccounts information 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The numbers of rows per page to return (optional, default to 10)</param>
        /// <param name="filterByEmail">Filter by email addresses that fully/partially match the search value. (optional)</param>
        /// <param name="filterByActive">Filter by subaccount status. (optional)</param>
        /// <param name="filterByIP">Filter by IP Addresses. (optional)</param>
        /// <param name="orderby">Field to sort by (optional, default to email)</param>
        /// <param name="ordertype"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubAccountListSucessResponsetBody</returns>
        public API.TurboSMTP.Client.ApiResponse<SubAccountListSucessResponsetBody> GetSubaccountsWithHttpInfo(int? page = default(int?), int? limit = default(int?), string filterByEmail = default(string), bool? filterByActive = default(bool?), List<string> filterByIP = default(List<string>), string orderby = default(string), OrderType ordertype = default(OrderType), int operationIndex = 0)
        {
            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (filterByEmail != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "filterByEmail", filterByEmail));
            }
            if (filterByActive != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "filterByActive", filterByActive));
            }
            if (filterByIP != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("multi", "filterByIP[]", filterByIP));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby));
            }
            if (ordertype != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "ordertype", ordertype));
            }

            localVarRequestOptions.Operation = "SubaccountsApi.GetSubaccounts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SubAccountListSucessResponsetBody>("/subaccounts/list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubaccounts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Subaccounts lists information  List subaccounts information 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The numbers of rows per page to return (optional, default to 10)</param>
        /// <param name="filterByEmail">Filter by email addresses that fully/partially match the search value. (optional)</param>
        /// <param name="filterByActive">Filter by subaccount status. (optional)</param>
        /// <param name="filterByIP">Filter by IP Addresses. (optional)</param>
        /// <param name="orderby">Field to sort by (optional, default to email)</param>
        /// <param name="ordertype"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubAccountListSucessResponsetBody</returns>
        public async System.Threading.Tasks.Task<SubAccountListSucessResponsetBody> GetSubaccountsAsync(int? page = default(int?), int? limit = default(int?), string filterByEmail = default(string), bool? filterByActive = default(bool?), List<string> filterByIP = default(List<string>), string orderby = default(string), OrderType ordertype = default(OrderType), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            API.TurboSMTP.Client.ApiResponse<SubAccountListSucessResponsetBody> localVarResponse = await GetSubaccountsWithHttpInfoAsync(page, limit, filterByEmail, filterByActive, filterByIP, orderby, ordertype, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Subaccounts lists information  List subaccounts information 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The numbers of rows per page to return (optional, default to 10)</param>
        /// <param name="filterByEmail">Filter by email addresses that fully/partially match the search value. (optional)</param>
        /// <param name="filterByActive">Filter by subaccount status. (optional)</param>
        /// <param name="filterByIP">Filter by IP Addresses. (optional)</param>
        /// <param name="orderby">Field to sort by (optional, default to email)</param>
        /// <param name="ordertype"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubAccountListSucessResponsetBody)</returns>
        public async System.Threading.Tasks.Task<API.TurboSMTP.Client.ApiResponse<SubAccountListSucessResponsetBody>> GetSubaccountsWithHttpInfoAsync(int? page = default(int?), int? limit = default(int?), string filterByEmail = default(string), bool? filterByActive = default(bool?), List<string> filterByIP = default(List<string>), string orderby = default(string), OrderType ordertype = default(OrderType), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (filterByEmail != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "filterByEmail", filterByEmail));
            }
            if (filterByActive != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "filterByActive", filterByActive));
            }
            if (filterByIP != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("multi", "filterByIP[]", filterByIP));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby));
            }
            if (ordertype != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "ordertype", ordertype));
            }

            localVarRequestOptions.Operation = "SubaccountsApi.GetSubaccounts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SubAccountListSucessResponsetBody>("/subaccounts/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubaccounts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Login to a subaccount  Login to a subaccount. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AuthenticationLoginSucessResponsetBody</returns>
        public AuthenticationLoginSucessResponsetBody SubaccountAuthenticationLogin(Email1 email1, int operationIndex = 0)
        {
            API.TurboSMTP.Client.ApiResponse<AuthenticationLoginSucessResponsetBody> localVarResponse = SubaccountAuthenticationLoginWithHttpInfo(email1);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Login to a subaccount  Login to a subaccount. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AuthenticationLoginSucessResponsetBody</returns>
        public API.TurboSMTP.Client.ApiResponse<AuthenticationLoginSucessResponsetBody> SubaccountAuthenticationLoginWithHttpInfo(Email1 email1, int operationIndex = 0)
        {
            // verify the required parameter 'email1' is set
            if (email1 == null)
            {
                throw new API.TurboSMTP.Client.ApiException(400, "Missing required parameter 'email1' when calling SubaccountsApi->SubaccountAuthenticationLogin");
            }

            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = email1;

            localVarRequestOptions.Operation = "SubaccountsApi.SubaccountAuthenticationLogin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AuthenticationLoginSucessResponsetBody>("/subaccounts/authorize", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubaccountAuthenticationLogin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Login to a subaccount  Login to a subaccount. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthenticationLoginSucessResponsetBody</returns>
        public async System.Threading.Tasks.Task<AuthenticationLoginSucessResponsetBody> SubaccountAuthenticationLoginAsync(Email1 email1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            API.TurboSMTP.Client.ApiResponse<AuthenticationLoginSucessResponsetBody> localVarResponse = await SubaccountAuthenticationLoginWithHttpInfoAsync(email1, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Login to a subaccount  Login to a subaccount. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email1"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthenticationLoginSucessResponsetBody)</returns>
        public async System.Threading.Tasks.Task<API.TurboSMTP.Client.ApiResponse<AuthenticationLoginSucessResponsetBody>> SubaccountAuthenticationLoginWithHttpInfoAsync(Email1 email1, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'email1' is set
            if (email1 == null)
            {
                throw new API.TurboSMTP.Client.ApiException(400, "Missing required parameter 'email1' when calling SubaccountsApi->SubaccountAuthenticationLogin");
            }


            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = email1;

            localVarRequestOptions.Operation = "SubaccountsApi.SubaccountAuthenticationLogin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AuthenticationLoginSucessResponsetBody>("/subaccounts/authorize", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubaccountAuthenticationLogin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Agency details  Update Agency Details 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseAgencySettings"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommonSuccessResponseBody</returns>
        public CommonSuccessResponseBody UpdateAgencySettings(BaseAgencySettings baseAgencySettings, int operationIndex = 0)
        {
            API.TurboSMTP.Client.ApiResponse<CommonSuccessResponseBody> localVarResponse = UpdateAgencySettingsWithHttpInfo(baseAgencySettings);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Agency details  Update Agency Details 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseAgencySettings"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommonSuccessResponseBody</returns>
        public API.TurboSMTP.Client.ApiResponse<CommonSuccessResponseBody> UpdateAgencySettingsWithHttpInfo(BaseAgencySettings baseAgencySettings, int operationIndex = 0)
        {
            // verify the required parameter 'baseAgencySettings' is set
            if (baseAgencySettings == null)
            {
                throw new API.TurboSMTP.Client.ApiException(400, "Missing required parameter 'baseAgencySettings' when calling SubaccountsApi->UpdateAgencySettings");
            }

            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = baseAgencySettings;

            localVarRequestOptions.Operation = "SubaccountsApi.UpdateAgencySettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<CommonSuccessResponseBody>("/subaccounts/agency", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAgencySettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Agency details  Update Agency Details 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseAgencySettings"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonSuccessResponseBody</returns>
        public async System.Threading.Tasks.Task<CommonSuccessResponseBody> UpdateAgencySettingsAsync(BaseAgencySettings baseAgencySettings, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            API.TurboSMTP.Client.ApiResponse<CommonSuccessResponseBody> localVarResponse = await UpdateAgencySettingsWithHttpInfoAsync(baseAgencySettings, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Agency details  Update Agency Details 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseAgencySettings"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonSuccessResponseBody)</returns>
        public async System.Threading.Tasks.Task<API.TurboSMTP.Client.ApiResponse<CommonSuccessResponseBody>> UpdateAgencySettingsWithHttpInfoAsync(BaseAgencySettings baseAgencySettings, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'baseAgencySettings' is set
            if (baseAgencySettings == null)
            {
                throw new API.TurboSMTP.Client.ApiException(400, "Missing required parameter 'baseAgencySettings' when calling SubaccountsApi->UpdateAgencySettings");
            }


            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = baseAgencySettings;

            localVarRequestOptions.Operation = "SubaccountsApi.UpdateAgencySettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<CommonSuccessResponseBody>("/subaccounts/agency", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAgencySettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update sub account details  Update sub account details. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="subaccountUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Subaccount</returns>
        public Subaccount UpdateSubaccountDetails(int id, SubaccountUpdateRequest subaccountUpdateRequest, int operationIndex = 0)
        {
            API.TurboSMTP.Client.ApiResponse<Subaccount> localVarResponse = UpdateSubaccountDetailsWithHttpInfo(id, subaccountUpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update sub account details  Update sub account details. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="subaccountUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Subaccount</returns>
        public API.TurboSMTP.Client.ApiResponse<Subaccount> UpdateSubaccountDetailsWithHttpInfo(int id, SubaccountUpdateRequest subaccountUpdateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'subaccountUpdateRequest' is set
            if (subaccountUpdateRequest == null)
            {
                throw new API.TurboSMTP.Client.ApiException(400, "Missing required parameter 'subaccountUpdateRequest' when calling SubaccountsApi->UpdateSubaccountDetails");
            }

            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Id", API.TurboSMTP.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = subaccountUpdateRequest;

            localVarRequestOptions.Operation = "SubaccountsApi.UpdateSubaccountDetails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Subaccount>("/subaccounts/{Id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSubaccountDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update sub account details  Update sub account details. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="subaccountUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Subaccount</returns>
        public async System.Threading.Tasks.Task<Subaccount> UpdateSubaccountDetailsAsync(int id, SubaccountUpdateRequest subaccountUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            API.TurboSMTP.Client.ApiResponse<Subaccount> localVarResponse = await UpdateSubaccountDetailsWithHttpInfoAsync(id, subaccountUpdateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update sub account details  Update sub account details. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="subaccountUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Subaccount)</returns>
        public async System.Threading.Tasks.Task<API.TurboSMTP.Client.ApiResponse<Subaccount>> UpdateSubaccountDetailsWithHttpInfoAsync(int id, SubaccountUpdateRequest subaccountUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subaccountUpdateRequest' is set
            if (subaccountUpdateRequest == null)
            {
                throw new API.TurboSMTP.Client.ApiException(400, "Missing required parameter 'subaccountUpdateRequest' when calling SubaccountsApi->UpdateSubaccountDetails");
            }


            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Id", API.TurboSMTP.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = subaccountUpdateRequest;

            localVarRequestOptions.Operation = "SubaccountsApi.UpdateSubaccountDetails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Subaccount>("/subaccounts/{Id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSubaccountDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set subaccount smtp limit  Set subaccount smtp limit. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="subaccountSMTPLimit"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubaccountActivePlan</returns>
        public SubaccountActivePlan UpdateSubaccountSMTPLimit(int id, SubaccountSMTPLimit subaccountSMTPLimit, int operationIndex = 0)
        {
            API.TurboSMTP.Client.ApiResponse<SubaccountActivePlan> localVarResponse = UpdateSubaccountSMTPLimitWithHttpInfo(id, subaccountSMTPLimit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set subaccount smtp limit  Set subaccount smtp limit. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="subaccountSMTPLimit"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubaccountActivePlan</returns>
        public API.TurboSMTP.Client.ApiResponse<SubaccountActivePlan> UpdateSubaccountSMTPLimitWithHttpInfo(int id, SubaccountSMTPLimit subaccountSMTPLimit, int operationIndex = 0)
        {
            // verify the required parameter 'subaccountSMTPLimit' is set
            if (subaccountSMTPLimit == null)
            {
                throw new API.TurboSMTP.Client.ApiException(400, "Missing required parameter 'subaccountSMTPLimit' when calling SubaccountsApi->UpdateSubaccountSMTPLimit");
            }

            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Id", API.TurboSMTP.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = subaccountSMTPLimit;

            localVarRequestOptions.Operation = "SubaccountsApi.UpdateSubaccountSMTPLimit";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SubaccountActivePlan>("/subaccounts/{Id}/updatesubaccountsmtplimit", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSubaccountSMTPLimit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set subaccount smtp limit  Set subaccount smtp limit. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="subaccountSMTPLimit"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubaccountActivePlan</returns>
        public async System.Threading.Tasks.Task<SubaccountActivePlan> UpdateSubaccountSMTPLimitAsync(int id, SubaccountSMTPLimit subaccountSMTPLimit, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            API.TurboSMTP.Client.ApiResponse<SubaccountActivePlan> localVarResponse = await UpdateSubaccountSMTPLimitWithHttpInfoAsync(id, subaccountSMTPLimit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set subaccount smtp limit  Set subaccount smtp limit. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="subaccountSMTPLimit"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubaccountActivePlan)</returns>
        public async System.Threading.Tasks.Task<API.TurboSMTP.Client.ApiResponse<SubaccountActivePlan>> UpdateSubaccountSMTPLimitWithHttpInfoAsync(int id, SubaccountSMTPLimit subaccountSMTPLimit, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subaccountSMTPLimit' is set
            if (subaccountSMTPLimit == null)
            {
                throw new API.TurboSMTP.Client.ApiException(400, "Missing required parameter 'subaccountSMTPLimit' when calling SubaccountsApi->UpdateSubaccountSMTPLimit");
            }


            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Id", API.TurboSMTP.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = subaccountSMTPLimit;

            localVarRequestOptions.Operation = "SubaccountsApi.UpdateSubaccountSMTPLimit";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SubaccountActivePlan>("/subaccounts/{Id}/updatesubaccountsmtplimit", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSubaccountSMTPLimit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set subaccount status  Set subaccount status. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="subaccountActiveStatus"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubaccountActivePlan</returns>
        public SubaccountActivePlan UpdateSubaccountStatus(int id, SubaccountActiveStatus subaccountActiveStatus, int operationIndex = 0)
        {
            API.TurboSMTP.Client.ApiResponse<SubaccountActivePlan> localVarResponse = UpdateSubaccountStatusWithHttpInfo(id, subaccountActiveStatus);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set subaccount status  Set subaccount status. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="subaccountActiveStatus"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubaccountActivePlan</returns>
        public API.TurboSMTP.Client.ApiResponse<SubaccountActivePlan> UpdateSubaccountStatusWithHttpInfo(int id, SubaccountActiveStatus subaccountActiveStatus, int operationIndex = 0)
        {
            // verify the required parameter 'subaccountActiveStatus' is set
            if (subaccountActiveStatus == null)
            {
                throw new API.TurboSMTP.Client.ApiException(400, "Missing required parameter 'subaccountActiveStatus' when calling SubaccountsApi->UpdateSubaccountStatus");
            }

            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Id", API.TurboSMTP.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = subaccountActiveStatus;

            localVarRequestOptions.Operation = "SubaccountsApi.UpdateSubaccountStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SubaccountActivePlan>("/subaccounts/{Id}/updatesubaccountstatus", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSubaccountStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set subaccount status  Set subaccount status. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="subaccountActiveStatus"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubaccountActivePlan</returns>
        public async System.Threading.Tasks.Task<SubaccountActivePlan> UpdateSubaccountStatusAsync(int id, SubaccountActiveStatus subaccountActiveStatus, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            API.TurboSMTP.Client.ApiResponse<SubaccountActivePlan> localVarResponse = await UpdateSubaccountStatusWithHttpInfoAsync(id, subaccountActiveStatus, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set subaccount status  Set subaccount status. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="subaccountActiveStatus"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubaccountActivePlan)</returns>
        public async System.Threading.Tasks.Task<API.TurboSMTP.Client.ApiResponse<SubaccountActivePlan>> UpdateSubaccountStatusWithHttpInfoAsync(int id, SubaccountActiveStatus subaccountActiveStatus, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'subaccountActiveStatus' is set
            if (subaccountActiveStatus == null)
            {
                throw new API.TurboSMTP.Client.ApiException(400, "Missing required parameter 'subaccountActiveStatus' when calling SubaccountsApi->UpdateSubaccountStatus");
            }


            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Id", API.TurboSMTP.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = subaccountActiveStatus;

            localVarRequestOptions.Operation = "SubaccountsApi.UpdateSubaccountStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SubaccountActivePlan>("/subaccounts/{Id}/updatesubaccountstatus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSubaccountStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload agency logo  Upload agency logo.  Logo must be a png or jpeg image. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CommonSuccessResponseBody</returns>
        public CommonSuccessResponseBody UploadLogoFile(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0)
        {
            API.TurboSMTP.Client.ApiResponse<CommonSuccessResponseBody> localVarResponse = UploadLogoFileWithHttpInfo(file);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload agency logo  Upload agency logo.  Logo must be a png or jpeg image. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CommonSuccessResponseBody</returns>
        public API.TurboSMTP.Client.ApiResponse<CommonSuccessResponseBody> UploadLogoFileWithHttpInfo(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0)
        {
            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            localVarRequestOptions.Operation = "SubaccountsApi.UploadLogoFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CommonSuccessResponseBody>("/subaccounts/logo", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadLogoFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload agency logo  Upload agency logo.  Logo must be a png or jpeg image. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CommonSuccessResponseBody</returns>
        public async System.Threading.Tasks.Task<CommonSuccessResponseBody> UploadLogoFileAsync(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            API.TurboSMTP.Client.ApiResponse<CommonSuccessResponseBody> localVarResponse = await UploadLogoFileWithHttpInfoAsync(file, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload agency logo  Upload agency logo.  Logo must be a png or jpeg image. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CommonSuccessResponseBody)</returns>
        public async System.Threading.Tasks.Task<API.TurboSMTP.Client.ApiResponse<CommonSuccessResponseBody>> UploadLogoFileWithHttpInfoAsync(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            localVarRequestOptions.Operation = "SubaccountsApi.UploadLogoFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CommonSuccessResponseBody>("/subaccounts/logo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadLogoFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
