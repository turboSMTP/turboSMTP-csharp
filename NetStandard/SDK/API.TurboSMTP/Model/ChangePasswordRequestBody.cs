/*
 * TurboSMTP Public APIs
 *
 * This document describes all public turboSMTP **V2** API and offers endpoints Descriptions, Parameters, Requests, Responses and Samples of usage.  [Click here to view the previous version of turboSMTP Public API Version 1.0](https://www.serversmtp.com/turbo-api-1)   # Security For the most part (and where not otherwise explicit) turboSMTP’s API requires Authorization.   Authorization to access a user’s resource is granted to clients provided they set  authentication headers into their request, valued with the proper values issued by turboSMTP servers.  ## *  Authorization via ConsumerKey/ConsumerSecret  This type of authorization consists of a pair of headers, named consumerKey and consumerSecret that are created and granted to the end user to be used in a permanent way (unless they´re deleted of course). This kind of authentication is intended to provide access to endpoints features without the need of providing the user the account details (email address + password).  *consumerKey:* Consumer Key Granted.  *consumerSecret:* Consumer Secret Granted.  (Use [/consumerKeys/create](#/consumerkey/createConsumerKey) create a consumer key/secret pair).      ## *  Authorization via Authentication Key  The authentication key is user-based and it is issued by turboSMTP servers upon successful user’s email address + password challenge, performed by means of appropriate request.      *Authorization:* Authorization_Key  (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)  # Data Interchange Format  For the most part (and where not otherwise explicit) turboSMTP’s API uses JSON as the data format of choice when it comes to request and response bodies.       
 *
 * The version of the OpenAPI document: 2.0.0-oas3
 * Contact: api@turbo-smtp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = API.TurboSMTP.Client.OpenAPIDateConverter;

namespace API.TurboSMTP.Model
{
    /// <summary>
    /// ChangePasswordRequestBody
    /// </summary>
    [DataContract(Name = "ChangePasswordRequestBody")]
    public partial class ChangePasswordRequestBody
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangePasswordRequestBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChangePasswordRequestBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangePasswordRequestBody" /> class.
        /// </summary>
        /// <param name="currentPassword">Current Password. (required).</param>
        /// <param name="password">New Password to be used. (required).</param>
        /// <param name="confirmPassword">New Password to be used. (required).</param>
        public ChangePasswordRequestBody(string currentPassword = default(string), string password = default(string), string confirmPassword = default(string))
        {
            // to ensure "currentPassword" is required (not null)
            if (currentPassword == null)
            {
                throw new ArgumentNullException("currentPassword is a required property for ChangePasswordRequestBody and cannot be null");
            }
            this.CurrentPassword = currentPassword;
            // to ensure "password" is required (not null)
            if (password == null)
            {
                throw new ArgumentNullException("password is a required property for ChangePasswordRequestBody and cannot be null");
            }
            this.Password = password;
            // to ensure "confirmPassword" is required (not null)
            if (confirmPassword == null)
            {
                throw new ArgumentNullException("confirmPassword is a required property for ChangePasswordRequestBody and cannot be null");
            }
            this.ConfirmPassword = confirmPassword;
        }

        /// <summary>
        /// Current Password.
        /// </summary>
        /// <value>Current Password.</value>
        [DataMember(Name = "current_password", IsRequired = true, EmitDefaultValue = true)]
        public string CurrentPassword { get; set; }

        /// <summary>
        /// New Password to be used.
        /// </summary>
        /// <value>New Password to be used.</value>
        [DataMember(Name = "password", IsRequired = true, EmitDefaultValue = true)]
        public string Password { get; set; }

        /// <summary>
        /// New Password to be used.
        /// </summary>
        /// <value>New Password to be used.</value>
        [DataMember(Name = "confirm_password", IsRequired = true, EmitDefaultValue = true)]
        public string ConfirmPassword { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChangePasswordRequestBody {\n");
            sb.Append("  CurrentPassword: ").Append(CurrentPassword).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  ConfirmPassword: ").Append(ConfirmPassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
