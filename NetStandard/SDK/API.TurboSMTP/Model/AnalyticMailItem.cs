/*
 * TurboSMTP Public APIs
 *
 * This document describes all public turboSMTP **V2** API and offers endpoints Descriptions, Parameters, Requests, Responses and Samples of usage.  [Click here to view the previous version of turboSMTP Public API Version 1.0](https://www.serversmtp.com/turbo-api-1)   # Security For the most part (and where not otherwise explicit) turboSMTP’s API requires Authorization.   Authorization to access a user’s resource is granted to clients provided they set  authentication headers into their request, valued with the proper values issued by turboSMTP servers.  ## *  Authorization via ConsumerKey/ConsumerSecret  This type of authorization consists of a pair of headers, named consumerKey and consumerSecret that are created and granted to the end user to be used in a permanent way (unless they´re deleted of course). This kind of authentication is intended to provide access to endpoints features without the need of providing the user the account details (email address + password).  *consumerKey:* Consumer Key Granted.  *consumerSecret:* Consumer Secret Granted.  (Use [/consumerKeys/create](#/consumerkey/createConsumerKey) create a consumer key/secret pair).      ## *  Authorization via Authentication Key  The authentication key is user-based and it is issued by turboSMTP servers upon successful user’s email address + password challenge, performed by means of appropriate request.      *Authorization:* Authorization_Key  (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)  # Data Interchange Format  For the most part (and where not otherwise explicit) turboSMTP’s API uses JSON as the data format of choice when it comes to request and response bodies.       
 *
 * The version of the OpenAPI document: 2.0.0-oas3
 * Contact: api@turbo-smtp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = API.TurboSMTP.Client.OpenAPIDateConverter;

namespace API.TurboSMTP.Model
{
    /// <summary>
    /// Sent Email
    /// </summary>
    [DataContract(Name = "AnalyticMailItem")]
    public partial class AnalyticMailItem
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public AnalyticMailStatus? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticMailItem" /> class.
        /// </summary>
        /// <param name="id">Email Id..</param>
        /// <param name="subject">Email Subject..</param>
        /// <param name="sender">Email Sender..</param>
        /// <param name="recipient">Email Recipient..</param>
        /// <param name="sendTime">Date Time email was sent..</param>
        /// <param name="status">status.</param>
        /// <param name="domain">The portion of the sender´s email address after the \&quot;@\&quot; symbol..</param>
        /// <param name="contactDomain">The portion of the recipient´s email address after the \&quot;@\&quot; symbol..</param>
        /// <param name="xCampaignId">Value specified in the x_campaign_id custom header to track campaigns specific data..</param>
        /// <param name="error">Error returned when delivering the email message..</param>
        public AnalyticMailItem(long id = default(long), string subject = default(string), string sender = default(string), string recipient = default(string), string sendTime = default(string), AnalyticMailStatus? status = default(AnalyticMailStatus?), string domain = default(string), string contactDomain = default(string), string xCampaignId = default(string), string error = default(string))
        {
            this.Id = id;
            this.Subject = subject;
            this.Sender = sender;
            this.Recipient = recipient;
            this.SendTime = sendTime;
            this.Status = status;
            this.Domain = domain;
            this.ContactDomain = contactDomain;
            this.XCampaignId = xCampaignId;
            this.Error = error;
        }

        /// <summary>
        /// Email Id.
        /// </summary>
        /// <value>Email Id.</value>
        /// <example>1800872493473406976</example>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Email Subject.
        /// </summary>
        /// <value>Email Subject.</value>
        /// <example>Business Card.</example>
        [DataMember(Name = "subject", EmitDefaultValue = false)]
        public string Subject { get; set; }

        /// <summary>
        /// Email Sender.
        /// </summary>
        /// <value>Email Sender.</value>
        /// <example>user@example.com</example>
        [DataMember(Name = "sender", EmitDefaultValue = false)]
        public string Sender { get; set; }

        /// <summary>
        /// Email Recipient.
        /// </summary>
        /// <value>Email Recipient.</value>
        /// <example>user@gmail.com</example>
        [DataMember(Name = "recipient", EmitDefaultValue = false)]
        public string Recipient { get; set; }

        /// <summary>
        /// Date Time email was sent.
        /// </summary>
        /// <value>Date Time email was sent.</value>
        /// <example>2022-11-20 00:00:00</example>
        [DataMember(Name = "send_time", EmitDefaultValue = false)]
        public string SendTime { get; set; }

        /// <summary>
        /// The portion of the sender´s email address after the \&quot;@\&quot; symbol.
        /// </summary>
        /// <value>The portion of the sender´s email address after the \&quot;@\&quot; symbol.</value>
        /// <example>example.com</example>
        [DataMember(Name = "domain", EmitDefaultValue = false)]
        public string Domain { get; set; }

        /// <summary>
        /// The portion of the recipient´s email address after the \&quot;@\&quot; symbol.
        /// </summary>
        /// <value>The portion of the recipient´s email address after the \&quot;@\&quot; symbol.</value>
        /// <example>gmail.com</example>
        [DataMember(Name = "contact_domain", EmitDefaultValue = false)]
        public string ContactDomain { get; set; }

        /// <summary>
        /// Value specified in the x_campaign_id custom header to track campaigns specific data.
        /// </summary>
        /// <value>Value specified in the x_campaign_id custom header to track campaigns specific data.</value>
        /// <example>Offer AB Test.</example>
        [DataMember(Name = "x_campaign_id", EmitDefaultValue = false)]
        public string XCampaignId { get; set; }

        /// <summary>
        /// Error returned when delivering the email message.
        /// </summary>
        /// <value>Error returned when delivering the email message.</value>
        /// <example>142.250.138.27 does not like recipient.\nRemote host said: 550-5.1.1 The email account does not exist.</example>
        [DataMember(Name = "error", EmitDefaultValue = false)]
        public string Error { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AnalyticMailItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  Recipient: ").Append(Recipient).Append("\n");
            sb.Append("  SendTime: ").Append(SendTime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  ContactDomain: ").Append(ContactDomain).Append("\n");
            sb.Append("  XCampaignId: ").Append(XCampaignId).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
