/*
 * TurboSMTP Public APIs
 *
 * This document describes all public turboSMTP **V2** API and offers endpoints Descriptions, Parameters, Requests, Responses and Samples of usage.  [Click here to view the previous version of turboSMTP Public API Version 1.0](https://www.serversmtp.com/turbo-api-1)   # Security For the most part (and where not otherwise explicit) turboSMTP’s API requires Authorization.   Authorization to access a user’s resource is granted to clients provided they set  authentication headers into their request, valued with the proper values issued by turboSMTP servers.  ## *  Authorization via ConsumerKey/ConsumerSecret  This type of authorization consists of a pair of headers, named consumerKey and consumerSecret that are created and granted to the end user to be used in a permanent way (unless they´re deleted of course). This kind of authentication is intended to provide access to endpoints features without the need of providing the user the account details (email address + password).  *consumerKey:* Consumer Key Granted.  *consumerSecret:* Consumer Secret Granted.  (Use [/consumerKeys/create](#/consumerkey/createConsumerKey) create a consumer key/secret pair).      ## *  Authorization via Authentication Key  The authentication key is user-based and it is issued by turboSMTP servers upon successful user’s email address + password challenge, performed by means of appropriate request.      *Authorization:* Authorization_Key  (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)  # Data Interchange Format  For the most part (and where not otherwise explicit) turboSMTP’s API uses JSON as the data format of choice when it comes to request and response bodies.       
 *
 * The version of the OpenAPI document: 2.0.0-oas3
 * Contact: api@turbo-smtp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = API.TurboSMTP.Client.OpenAPIDateConverter;

namespace API.TurboSMTP.Model
{
    /// <summary>
    /// SuppressionFilterRequestBody
    /// </summary>
    [DataContract(Name = "SuppressionFilterRequestBody")]
    public partial class SuppressionFilterRequestBody
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SuppressionFilterRequestBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SuppressionFilterRequestBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SuppressionFilterRequestBody" /> class.
        /// </summary>
        /// <param name="from">Start date (required).</param>
        /// <param name="to">End date (required).</param>
        /// <param name="tz">Timezone Offset.</param>
        /// <param name="filter">Query to search.</param>
        /// <param name="filterBy">Filter by.</param>
        /// <param name="smartSearch">Smart search (default to false).</param>
        /// <param name="restrict">xxxx.</param>
        public SuppressionFilterRequestBody(DateTime from = default(DateTime), DateTime to = default(DateTime), string tz = default(string), string filter = default(string), List<SuppressionSource> filterBy = default(List<SuppressionSource>), bool? smartSearch = false, List<SuppressionRestriction> restrict = default(List<SuppressionRestriction>))
        {
            this.From = from;
            this.To = to;
            this.Tz = tz;
            this.Filter = filter;
            this.FilterBy = filterBy;
            // use default value if no "smartSearch" provided
            this.SmartSearch = smartSearch ?? false;
            this.Restrict = restrict;
        }

        /// <summary>
        /// Start date
        /// </summary>
        /// <value>Start date</value>
        /// <example>Tue Dec 31 21:00:00 ART 2019</example>
        [DataMember(Name = "from", IsRequired = true, EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime From { get; set; }

        /// <summary>
        /// End date
        /// </summary>
        /// <value>End date</value>
        /// <example>Tue Dec 30 21:00:00 ART 2025</example>
        [DataMember(Name = "to", IsRequired = true, EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime To { get; set; }

        /// <summary>
        /// Timezone Offset
        /// </summary>
        /// <value>Timezone Offset</value>
        /// <example>-07:00</example>
        [DataMember(Name = "tz", EmitDefaultValue = false)]
        public string Tz { get; set; }

        /// <summary>
        /// Query to search
        /// </summary>
        /// <value>Query to search</value>
        [DataMember(Name = "filter", EmitDefaultValue = false)]
        public string Filter { get; set; }

        /// <summary>
        /// Filter by
        /// </summary>
        /// <value>Filter by</value>
        [DataMember(Name = "filter_by", EmitDefaultValue = false)]
        public List<SuppressionSource> FilterBy { get; set; }

        /// <summary>
        /// Smart search
        /// </summary>
        /// <value>Smart search</value>
        /// <example>false</example>
        [DataMember(Name = "smart_search", EmitDefaultValue = true)]
        public bool? SmartSearch { get; set; }

        /// <summary>
        /// xxxx
        /// </summary>
        /// <value>xxxx</value>
        [DataMember(Name = "restrict", EmitDefaultValue = false)]
        public List<SuppressionRestriction> Restrict { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SuppressionFilterRequestBody {\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Tz: ").Append(Tz).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  FilterBy: ").Append(FilterBy).Append("\n");
            sb.Append("  SmartSearch: ").Append(SmartSearch).Append("\n");
            sb.Append("  Restrict: ").Append(Restrict).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
