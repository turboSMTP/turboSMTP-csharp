/*
 * TurboSMTP Public APIs
 *
 * This document describes all public turboSMTP **V2** API and offers endpoints Descriptions, Parameters, Requests, Responses and Samples of usage.  [Click here to view the previous version of turboSMTP Public API Version 1.0](https://www.serversmtp.com/turbo-api-1)   # Security For the most part (and where not otherwise explicit) turboSMTP’s API requires Authorization.   Authorization to access a user’s resource is granted to clients provided they set  authentication headers into their request, valued with the proper values issued by turboSMTP servers.  ## *  Authorization via ConsumerKey/ConsumerSecret  This type of authorization consists of a pair of headers, named consumerKey and consumerSecret that are created and granted to the end user to be used in a permanent way (unless they´re deleted of course). This kind of authentication is intended to provide access to endpoints features without the need of providing the user the account details (email address + password).  *consumerKey:* Consumer Key Granted.  *consumerSecret:* Consumer Secret Granted.  (Use [/consumerKeys/create](#/consumerkey/createConsumerKey) create a consumer key/secret pair).      ## *  Authorization via Authentication Key  The authentication key is user-based and it is issued by turboSMTP servers upon successful user’s email address + password challenge, performed by means of appropriate request.      *Authorization:* Authorization_Key  (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)  # Data Interchange Format  For the most part (and where not otherwise explicit) turboSMTP’s API uses JSON as the data format of choice when it comes to request and response bodies.       
 *
 * The version of the OpenAPI document: 2.0.0-oas3
 * Contact: api@turbo-smtp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = API.TurboSMTP.Client.OpenAPIDateConverter;

namespace API.TurboSMTP.Model
{
    /// <summary>
    /// SubaccountActivePlan
    /// </summary>
    [DataContract(Name = "SubaccountActivePlan")]
    public partial class SubaccountActivePlan
    {

        /// <summary>
        /// Gets or Sets PlanLimitInterval
        /// </summary>
        [DataMember(Name = "plan_limit_interval", EmitDefaultValue = false)]
        public SmtpLimitInterval? PlanLimitInterval { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubaccountActivePlan" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubaccountActivePlan() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubaccountActivePlan" /> class.
        /// </summary>
        /// <param name="ip">IP address to use for sending emails..</param>
        /// <param name="active">Active subaccounts can be used for login purpose, while users can´t login to inactive subaccounts. Notice that in order to be able to send emails the subaccount subscription must also be active. User can set subaccounts to active / inactive from the dashboard. (required).</param>
        /// <param name="subaccountId">Sub account Id.</param>
        /// <param name="parentId">Sub account parent Id.</param>
        /// <param name="limit">The ammount of emails the sub account is allowed to send over the period specified by plan_limit_interval. Value -1 means no limit. (required).</param>
        /// <param name="sent">The ammount of sent emails from the sub account over the current period..</param>
        /// <param name="lastUsed">The date time the sub account was last used..</param>
        /// <param name="planExpiration">Expiration date time of the plan..</param>
        /// <param name="planLimitInterval">planLimitInterval.</param>
        /// <param name="expired">Expired if plan expiration date is overdue..</param>
        public SubaccountActivePlan(string ip = default(string), bool active = default(bool), int subaccountId = default(int), int parentId = default(int), int limit = default(int), int sent = default(int), string lastUsed = default(string), string planExpiration = default(string), SmtpLimitInterval? planLimitInterval = default(SmtpLimitInterval?), bool expired = default(bool))
        {
            this.Active = active;
            this.Limit = limit;
            this.Ip = ip;
            this.SubaccountId = subaccountId;
            this.ParentId = parentId;
            this.Sent = sent;
            this.LastUsed = lastUsed;
            this.PlanExpiration = planExpiration;
            this.PlanLimitInterval = planLimitInterval;
            this.Expired = expired;
        }

        /// <summary>
        /// IP address to use for sending emails.
        /// </summary>
        /// <value>IP address to use for sending emails.</value>
        /// <example>185.228.36.19</example>
        [DataMember(Name = "ip", EmitDefaultValue = false)]
        public string Ip { get; set; }

        /// <summary>
        /// Active subaccounts can be used for login purpose, while users can´t login to inactive subaccounts. Notice that in order to be able to send emails the subaccount subscription must also be active. User can set subaccounts to active / inactive from the dashboard.
        /// </summary>
        /// <value>Active subaccounts can be used for login purpose, while users can´t login to inactive subaccounts. Notice that in order to be able to send emails the subaccount subscription must also be active. User can set subaccounts to active / inactive from the dashboard.</value>
        /// <example>true</example>
        [DataMember(Name = "active", IsRequired = true, EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// Sub account Id
        /// </summary>
        /// <value>Sub account Id</value>
        /// <example>19302132</example>
        [DataMember(Name = "subaccount_id", EmitDefaultValue = false)]
        public int SubaccountId { get; set; }

        /// <summary>
        /// Sub account parent Id
        /// </summary>
        /// <value>Sub account parent Id</value>
        /// <example>19334162</example>
        [DataMember(Name = "parent_id", EmitDefaultValue = false)]
        public int ParentId { get; set; }

        /// <summary>
        /// The ammount of emails the sub account is allowed to send over the period specified by plan_limit_interval. Value -1 means no limit.
        /// </summary>
        /// <value>The ammount of emails the sub account is allowed to send over the period specified by plan_limit_interval. Value -1 means no limit.</value>
        /// <example>2000</example>
        [DataMember(Name = "limit", IsRequired = true, EmitDefaultValue = true)]
        public int Limit { get; set; }

        /// <summary>
        /// The ammount of sent emails from the sub account over the current period.
        /// </summary>
        /// <value>The ammount of sent emails from the sub account over the current period.</value>
        /// <example>125</example>
        [DataMember(Name = "sent", EmitDefaultValue = false)]
        public int Sent { get; set; }

        /// <summary>
        /// The date time the sub account was last used.
        /// </summary>
        /// <value>The date time the sub account was last used.</value>
        /// <example>2021-03-17 00:00:00</example>
        [DataMember(Name = "last_used", EmitDefaultValue = false)]
        public string LastUsed { get; set; }

        /// <summary>
        /// Expiration date time of the plan.
        /// </summary>
        /// <value>Expiration date time of the plan.</value>
        /// <example>2023-01-17 00:00:00</example>
        [DataMember(Name = "plan_expiration", EmitDefaultValue = true)]
        public string PlanExpiration { get; set; }

        /// <summary>
        /// Expired if plan expiration date is overdue.
        /// </summary>
        /// <value>Expired if plan expiration date is overdue.</value>
        /// <example>false</example>
        [DataMember(Name = "expired", EmitDefaultValue = true)]
        public bool Expired { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubaccountActivePlan {\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  SubaccountId: ").Append(SubaccountId).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Sent: ").Append(Sent).Append("\n");
            sb.Append("  LastUsed: ").Append(LastUsed).Append("\n");
            sb.Append("  PlanExpiration: ").Append(PlanExpiration).Append("\n");
            sb.Append("  PlanLimitInterval: ").Append(PlanLimitInterval).Append("\n");
            sb.Append("  Expired: ").Append(Expired).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
