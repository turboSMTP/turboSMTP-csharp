/*
 * TurboSMTP Public APIs
 *
 * This document describes all public turboSMTP **V2** API and offers endpoints Descriptions, Parameters, Requests, Responses and Samples of usage.  [Click here to view the previous version of turboSMTP Public API Version 1.0](https://www.serversmtp.com/turbo-api-1)   # Security For the most part (and where not otherwise explicit) turboSMTP’s API requires Authorization.   Authorization to access a user’s resource is granted to clients provided they set  authentication headers into their request, valued with the proper values issued by turboSMTP servers.  ## *  Authorization via ConsumerKey/ConsumerSecret  This type of authorization consists of a pair of headers, named consumerKey and consumerSecret that are created and granted to the end user to be used in a permanent way (unless they´re deleted of course). This kind of authentication is intended to provide access to endpoints features without the need of providing the user the account details (email address + password).  *consumerKey:* Consumer Key Granted.  *consumerSecret:* Consumer Secret Granted.  (Use [/consumerKeys/create](#/consumerkey/createConsumerKey) create a consumer key/secret pair).      ## *  Authorization via Authentication Key  The authentication key is user-based and it is issued by turboSMTP servers upon successful user’s email address + password challenge, performed by means of appropriate request.      *Authorization:* Authorization_Key  (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)  # Data Interchange Format  For the most part (and where not otherwise explicit) turboSMTP’s API uses JSON as the data format of choice when it comes to request and response bodies.       
 *
 * The version of the OpenAPI document: 2.0.0-oas3
 * Contact: api@turbo-smtp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using API.TurboSMTP.Client;
using API.TurboSMTP.Model;

namespace API.TurboSMTP.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmailValidatorApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete email validation list
        /// </summary>
        /// <remarks>
        ///  Delete email validation list 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmailValidatorListDeleteSuccess</returns>
        EmailValidatorListDeleteSuccess DeleteEmailValidationListById(int id, int operationIndex = 0);

        /// <summary>
        /// Delete email validation list
        /// </summary>
        /// <remarks>
        ///  Delete email validation list 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmailValidatorListDeleteSuccess</returns>
        ApiResponse<EmailValidatorListDeleteSuccess> DeleteEmailValidationListByIdWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Export Validated Emails by Email Validation List to CSV File
        /// </summary>
        /// <remarks>
        ///  Export Validated Emails by Email Validation List to CSV File 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string ExportCSVValidatedEmailsByList(int id, int operationIndex = 0);

        /// <summary>
        /// Export Validated Emails by Email Validation List to CSV File
        /// </summary>
        /// <remarks>
        ///  Export Validated Emails by Email Validation List to CSV File 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportCSVValidatedEmailsByListWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Get Email validation data by email ID.
        /// </summary>
        /// <remarks>
        ///  Get Email validation data by email ID. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="emailId">Email validation ID obtained from the list.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmailValidatorListEmailDetails</returns>
        EmailValidatorListEmailDetails GetEmailValidationDataByEmailId(int id, int emailId, int operationIndex = 0);

        /// <summary>
        /// Get Email validation data by email ID.
        /// </summary>
        /// <remarks>
        ///  Get Email validation data by email ID. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="emailId">Email validation ID obtained from the list.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmailValidatorListEmailDetails</returns>
        ApiResponse<EmailValidatorListEmailDetails> GetEmailValidationDataByEmailIdWithHttpInfo(int id, int emailId, int operationIndex = 0);
        /// <summary>
        /// Get Email validation list details
        /// </summary>
        /// <remarks>
        ///  Get Email validation list details 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmailValidatorList</returns>
        EmailValidatorList GetEmailValidationListSummary(int id, int operationIndex = 0);

        /// <summary>
        /// Get Email validation list details
        /// </summary>
        /// <remarks>
        ///  Get Email validation list details 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmailValidatorList</returns>
        ApiResponse<EmailValidatorList> GetEmailValidationListSummaryWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Get Email validation lists information
        /// </summary>
        /// <remarks>
        ///  List files for email validation information 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start date</param>
        /// <param name="to">End date</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The numbers of rows per page to return (optional, default to 10)</param>
        /// <param name="tz">Timezone Offset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmailValidatorSucessResponsetBody</returns>
        EmailValidatorSucessResponsetBody GetEmailValidationLists(DateTime from, DateTime to, int? page = default(int?), int? limit = default(int?), string tz = default(string), int operationIndex = 0);

        /// <summary>
        /// Get Email validation lists information
        /// </summary>
        /// <remarks>
        ///  List files for email validation information 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start date</param>
        /// <param name="to">End date</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The numbers of rows per page to return (optional, default to 10)</param>
        /// <param name="tz">Timezone Offset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmailValidatorSucessResponsetBody</returns>
        ApiResponse<EmailValidatorSucessResponsetBody> GetEmailValidationListsWithHttpInfo(DateTime from, DateTime to, int? page = default(int?), int? limit = default(int?), string tz = default(string), int operationIndex = 0);
        /// <summary>
        /// Get Email Validation subscription
        /// </summary>
        /// <remarks>
        ///  This endpoint allows to get details about remaining credit / balance for email validation. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmailValidatorSubscription</returns>
        EmailValidatorSubscription GetEmailValidationSubscription(int operationIndex = 0);

        /// <summary>
        /// Get Email Validation subscription
        /// </summary>
        /// <remarks>
        ///  This endpoint allows to get details about remaining credit / balance for email validation. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmailValidatorSubscription</returns>
        ApiResponse<EmailValidatorSubscription> GetEmailValidationSubscriptionWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get Validated Emails by Email Validation List
        /// </summary>
        /// <remarks>
        ///  Get Validated Emails by Email Validation List 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The numbers of rows per page to return (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmailValidatorValidatedMailsResults</returns>
        EmailValidatorValidatedMailsResults GetValidatedEmailsByList(int id, int? page = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get Validated Emails by Email Validation List
        /// </summary>
        /// <remarks>
        ///  Get Validated Emails by Email Validation List 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The numbers of rows per page to return (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmailValidatorValidatedMailsResults</returns>
        ApiResponse<EmailValidatorValidatedMailsResults> GetValidatedEmailsByListWithHttpInfo(int id, int? page = default(int?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// Upload file for email validation
        /// </summary>
        /// <remarks>
        ///  Upload file for email validation 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmailValidationUploadResponse</returns>
        EmailValidationUploadResponse UploadEmailValidationFile(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0);

        /// <summary>
        /// Upload file for email validation
        /// </summary>
        /// <remarks>
        ///  Upload file for email validation 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmailValidationUploadResponse</returns>
        ApiResponse<EmailValidationUploadResponse> UploadEmailValidationFileWithHttpInfo(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0);
        /// <summary>
        /// Validate single email address
        /// </summary>
        /// <remarks>
        ///  Validate singleemail adddress. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddressRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmailValidatorMailDetails</returns>
        EmailValidatorMailDetails ValidateEmail(EmailAddressRequestBody emailAddressRequestBody, int operationIndex = 0);

        /// <summary>
        /// Validate single email address
        /// </summary>
        /// <remarks>
        ///  Validate singleemail adddress. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddressRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmailValidatorMailDetails</returns>
        ApiResponse<EmailValidatorMailDetails> ValidateEmailWithHttpInfo(EmailAddressRequestBody emailAddressRequestBody, int operationIndex = 0);
        /// <summary>
        /// Validate list in Email Validator 
        /// </summary>
        /// <remarks>
        /// Validate list in Email Validator 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ValidateEmailValidatorList(int id, int operationIndex = 0);

        /// <summary>
        /// Validate list in Email Validator 
        /// </summary>
        /// <remarks>
        /// Validate list in Email Validator 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ValidateEmailValidatorListWithHttpInfo(int id, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmailValidatorApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete email validation list
        /// </summary>
        /// <remarks>
        ///  Delete email validation list 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailValidatorListDeleteSuccess</returns>
        System.Threading.Tasks.Task<EmailValidatorListDeleteSuccess> DeleteEmailValidationListByIdAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete email validation list
        /// </summary>
        /// <remarks>
        ///  Delete email validation list 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailValidatorListDeleteSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailValidatorListDeleteSuccess>> DeleteEmailValidationListByIdWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Export Validated Emails by Email Validation List to CSV File
        /// </summary>
        /// <remarks>
        ///  Export Validated Emails by Email Validation List to CSV File 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportCSVValidatedEmailsByListAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Export Validated Emails by Email Validation List to CSV File
        /// </summary>
        /// <remarks>
        ///  Export Validated Emails by Email Validation List to CSV File 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportCSVValidatedEmailsByListWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Email validation data by email ID.
        /// </summary>
        /// <remarks>
        ///  Get Email validation data by email ID. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="emailId">Email validation ID obtained from the list.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailValidatorListEmailDetails</returns>
        System.Threading.Tasks.Task<EmailValidatorListEmailDetails> GetEmailValidationDataByEmailIdAsync(int id, int emailId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Email validation data by email ID.
        /// </summary>
        /// <remarks>
        ///  Get Email validation data by email ID. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="emailId">Email validation ID obtained from the list.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailValidatorListEmailDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailValidatorListEmailDetails>> GetEmailValidationDataByEmailIdWithHttpInfoAsync(int id, int emailId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Email validation list details
        /// </summary>
        /// <remarks>
        ///  Get Email validation list details 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailValidatorList</returns>
        System.Threading.Tasks.Task<EmailValidatorList> GetEmailValidationListSummaryAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Email validation list details
        /// </summary>
        /// <remarks>
        ///  Get Email validation list details 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailValidatorList)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailValidatorList>> GetEmailValidationListSummaryWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Email validation lists information
        /// </summary>
        /// <remarks>
        ///  List files for email validation information 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start date</param>
        /// <param name="to">End date</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The numbers of rows per page to return (optional, default to 10)</param>
        /// <param name="tz">Timezone Offset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailValidatorSucessResponsetBody</returns>
        System.Threading.Tasks.Task<EmailValidatorSucessResponsetBody> GetEmailValidationListsAsync(DateTime from, DateTime to, int? page = default(int?), int? limit = default(int?), string tz = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Email validation lists information
        /// </summary>
        /// <remarks>
        ///  List files for email validation information 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start date</param>
        /// <param name="to">End date</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The numbers of rows per page to return (optional, default to 10)</param>
        /// <param name="tz">Timezone Offset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailValidatorSucessResponsetBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailValidatorSucessResponsetBody>> GetEmailValidationListsWithHttpInfoAsync(DateTime from, DateTime to, int? page = default(int?), int? limit = default(int?), string tz = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Email Validation subscription
        /// </summary>
        /// <remarks>
        ///  This endpoint allows to get details about remaining credit / balance for email validation. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailValidatorSubscription</returns>
        System.Threading.Tasks.Task<EmailValidatorSubscription> GetEmailValidationSubscriptionAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Email Validation subscription
        /// </summary>
        /// <remarks>
        ///  This endpoint allows to get details about remaining credit / balance for email validation. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailValidatorSubscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailValidatorSubscription>> GetEmailValidationSubscriptionWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Validated Emails by Email Validation List
        /// </summary>
        /// <remarks>
        ///  Get Validated Emails by Email Validation List 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The numbers of rows per page to return (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailValidatorValidatedMailsResults</returns>
        System.Threading.Tasks.Task<EmailValidatorValidatedMailsResults> GetValidatedEmailsByListAsync(int id, int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Validated Emails by Email Validation List
        /// </summary>
        /// <remarks>
        ///  Get Validated Emails by Email Validation List 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The numbers of rows per page to return (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailValidatorValidatedMailsResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailValidatorValidatedMailsResults>> GetValidatedEmailsByListWithHttpInfoAsync(int id, int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Upload file for email validation
        /// </summary>
        /// <remarks>
        ///  Upload file for email validation 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailValidationUploadResponse</returns>
        System.Threading.Tasks.Task<EmailValidationUploadResponse> UploadEmailValidationFileAsync(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upload file for email validation
        /// </summary>
        /// <remarks>
        ///  Upload file for email validation 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailValidationUploadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailValidationUploadResponse>> UploadEmailValidationFileWithHttpInfoAsync(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Validate single email address
        /// </summary>
        /// <remarks>
        ///  Validate singleemail adddress. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddressRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailValidatorMailDetails</returns>
        System.Threading.Tasks.Task<EmailValidatorMailDetails> ValidateEmailAsync(EmailAddressRequestBody emailAddressRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Validate single email address
        /// </summary>
        /// <remarks>
        ///  Validate singleemail adddress. 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddressRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailValidatorMailDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailValidatorMailDetails>> ValidateEmailWithHttpInfoAsync(EmailAddressRequestBody emailAddressRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Validate list in Email Validator 
        /// </summary>
        /// <remarks>
        /// Validate list in Email Validator 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ValidateEmailValidatorListAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Validate list in Email Validator 
        /// </summary>
        /// <remarks>
        /// Validate list in Email Validator 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ValidateEmailValidatorListWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmailValidatorApi : IEmailValidatorApiSync, IEmailValidatorApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EmailValidatorApi : IEmailValidatorApi
    {
        private API.TurboSMTP.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailValidatorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmailValidatorApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailValidatorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmailValidatorApi(string basePath)
        {
            this.Configuration = API.TurboSMTP.Client.Configuration.MergeConfigurations(
                API.TurboSMTP.Client.GlobalConfiguration.Instance,
                new API.TurboSMTP.Client.Configuration { BasePath = basePath }
            );
            this.Client = new API.TurboSMTP.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new API.TurboSMTP.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = API.TurboSMTP.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailValidatorApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EmailValidatorApi(API.TurboSMTP.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = API.TurboSMTP.Client.Configuration.MergeConfigurations(
                API.TurboSMTP.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new API.TurboSMTP.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new API.TurboSMTP.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = API.TurboSMTP.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailValidatorApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EmailValidatorApi(API.TurboSMTP.Client.ISynchronousClient client, API.TurboSMTP.Client.IAsynchronousClient asyncClient, API.TurboSMTP.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = API.TurboSMTP.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public API.TurboSMTP.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public API.TurboSMTP.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public API.TurboSMTP.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public API.TurboSMTP.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete email validation list  Delete email validation list 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmailValidatorListDeleteSuccess</returns>
        public EmailValidatorListDeleteSuccess DeleteEmailValidationListById(int id, int operationIndex = 0)
        {
            API.TurboSMTP.Client.ApiResponse<EmailValidatorListDeleteSuccess> localVarResponse = DeleteEmailValidationListByIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete email validation list  Delete email validation list 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmailValidatorListDeleteSuccess</returns>
        public API.TurboSMTP.Client.ApiResponse<EmailValidatorListDeleteSuccess> DeleteEmailValidationListByIdWithHttpInfo(int id, int operationIndex = 0)
        {
            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Id", API.TurboSMTP.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "EmailValidatorApi.DeleteEmailValidationListById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<EmailValidatorListDeleteSuccess>("/emailvalidation/lists/{Id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEmailValidationListById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete email validation list  Delete email validation list 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailValidatorListDeleteSuccess</returns>
        public async System.Threading.Tasks.Task<EmailValidatorListDeleteSuccess> DeleteEmailValidationListByIdAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            API.TurboSMTP.Client.ApiResponse<EmailValidatorListDeleteSuccess> localVarResponse = await DeleteEmailValidationListByIdWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete email validation list  Delete email validation list 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailValidatorListDeleteSuccess)</returns>
        public async System.Threading.Tasks.Task<API.TurboSMTP.Client.ApiResponse<EmailValidatorListDeleteSuccess>> DeleteEmailValidationListByIdWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Id", API.TurboSMTP.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "EmailValidatorApi.DeleteEmailValidationListById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<EmailValidatorListDeleteSuccess>("/emailvalidation/lists/{Id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEmailValidationListById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export Validated Emails by Email Validation List to CSV File  Export Validated Emails by Email Validation List to CSV File 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string ExportCSVValidatedEmailsByList(int id, int operationIndex = 0)
        {
            API.TurboSMTP.Client.ApiResponse<string> localVarResponse = ExportCSVValidatedEmailsByListWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export Validated Emails by Email Validation List to CSV File  Export Validated Emails by Email Validation List to CSV File 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public API.TurboSMTP.Client.ApiResponse<string> ExportCSVValidatedEmailsByListWithHttpInfo(int id, int operationIndex = 0)
        {
            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/csv",
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Id", API.TurboSMTP.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "EmailValidatorApi.ExportCSVValidatedEmailsByList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/emailvalidation/lists/{Id}/csv", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportCSVValidatedEmailsByList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export Validated Emails by Email Validation List to CSV File  Export Validated Emails by Email Validation List to CSV File 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportCSVValidatedEmailsByListAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            API.TurboSMTP.Client.ApiResponse<string> localVarResponse = await ExportCSVValidatedEmailsByListWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export Validated Emails by Email Validation List to CSV File  Export Validated Emails by Email Validation List to CSV File 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<API.TurboSMTP.Client.ApiResponse<string>> ExportCSVValidatedEmailsByListWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/csv",
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Id", API.TurboSMTP.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "EmailValidatorApi.ExportCSVValidatedEmailsByList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/emailvalidation/lists/{Id}/csv", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportCSVValidatedEmailsByList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Email validation data by email ID.  Get Email validation data by email ID. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="emailId">Email validation ID obtained from the list.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmailValidatorListEmailDetails</returns>
        public EmailValidatorListEmailDetails GetEmailValidationDataByEmailId(int id, int emailId, int operationIndex = 0)
        {
            API.TurboSMTP.Client.ApiResponse<EmailValidatorListEmailDetails> localVarResponse = GetEmailValidationDataByEmailIdWithHttpInfo(id, emailId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Email validation data by email ID.  Get Email validation data by email ID. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="emailId">Email validation ID obtained from the list.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmailValidatorListEmailDetails</returns>
        public API.TurboSMTP.Client.ApiResponse<EmailValidatorListEmailDetails> GetEmailValidationDataByEmailIdWithHttpInfo(int id, int emailId, int operationIndex = 0)
        {
            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Id", API.TurboSMTP.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("emailId", API.TurboSMTP.Client.ClientUtils.ParameterToString(emailId)); // path parameter

            localVarRequestOptions.Operation = "EmailValidatorApi.GetEmailValidationDataByEmailId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EmailValidatorListEmailDetails>("/emailvalidation/lists/{Id}/emails/{emailId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailValidationDataByEmailId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Email validation data by email ID.  Get Email validation data by email ID. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="emailId">Email validation ID obtained from the list.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailValidatorListEmailDetails</returns>
        public async System.Threading.Tasks.Task<EmailValidatorListEmailDetails> GetEmailValidationDataByEmailIdAsync(int id, int emailId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            API.TurboSMTP.Client.ApiResponse<EmailValidatorListEmailDetails> localVarResponse = await GetEmailValidationDataByEmailIdWithHttpInfoAsync(id, emailId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Email validation data by email ID.  Get Email validation data by email ID. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="emailId">Email validation ID obtained from the list.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailValidatorListEmailDetails)</returns>
        public async System.Threading.Tasks.Task<API.TurboSMTP.Client.ApiResponse<EmailValidatorListEmailDetails>> GetEmailValidationDataByEmailIdWithHttpInfoAsync(int id, int emailId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Id", API.TurboSMTP.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("emailId", API.TurboSMTP.Client.ClientUtils.ParameterToString(emailId)); // path parameter

            localVarRequestOptions.Operation = "EmailValidatorApi.GetEmailValidationDataByEmailId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EmailValidatorListEmailDetails>("/emailvalidation/lists/{Id}/emails/{emailId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailValidationDataByEmailId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Email validation list details  Get Email validation list details 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmailValidatorList</returns>
        public EmailValidatorList GetEmailValidationListSummary(int id, int operationIndex = 0)
        {
            API.TurboSMTP.Client.ApiResponse<EmailValidatorList> localVarResponse = GetEmailValidationListSummaryWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Email validation list details  Get Email validation list details 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmailValidatorList</returns>
        public API.TurboSMTP.Client.ApiResponse<EmailValidatorList> GetEmailValidationListSummaryWithHttpInfo(int id, int operationIndex = 0)
        {
            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Id", API.TurboSMTP.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "EmailValidatorApi.GetEmailValidationListSummary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EmailValidatorList>("/emailvalidation/lists/{Id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailValidationListSummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Email validation list details  Get Email validation list details 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailValidatorList</returns>
        public async System.Threading.Tasks.Task<EmailValidatorList> GetEmailValidationListSummaryAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            API.TurboSMTP.Client.ApiResponse<EmailValidatorList> localVarResponse = await GetEmailValidationListSummaryWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Email validation list details  Get Email validation list details 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailValidatorList)</returns>
        public async System.Threading.Tasks.Task<API.TurboSMTP.Client.ApiResponse<EmailValidatorList>> GetEmailValidationListSummaryWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Id", API.TurboSMTP.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "EmailValidatorApi.GetEmailValidationListSummary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EmailValidatorList>("/emailvalidation/lists/{Id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailValidationListSummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Email validation lists information  List files for email validation information 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start date</param>
        /// <param name="to">End date</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The numbers of rows per page to return (optional, default to 10)</param>
        /// <param name="tz">Timezone Offset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmailValidatorSucessResponsetBody</returns>
        public EmailValidatorSucessResponsetBody GetEmailValidationLists(DateTime from, DateTime to, int? page = default(int?), int? limit = default(int?), string tz = default(string), int operationIndex = 0)
        {
            API.TurboSMTP.Client.ApiResponse<EmailValidatorSucessResponsetBody> localVarResponse = GetEmailValidationListsWithHttpInfo(from, to, page, limit, tz);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Email validation lists information  List files for email validation information 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start date</param>
        /// <param name="to">End date</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The numbers of rows per page to return (optional, default to 10)</param>
        /// <param name="tz">Timezone Offset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmailValidatorSucessResponsetBody</returns>
        public API.TurboSMTP.Client.ApiResponse<EmailValidatorSucessResponsetBody> GetEmailValidationListsWithHttpInfo(DateTime from, DateTime to, int? page = default(int?), int? limit = default(int?), string tz = default(string), int operationIndex = 0)
        {
            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            if (tz != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "tz", tz));
            }

            localVarRequestOptions.Operation = "EmailValidatorApi.GetEmailValidationLists";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EmailValidatorSucessResponsetBody>("/emailvalidation/lists", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailValidationLists", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Email validation lists information  List files for email validation information 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start date</param>
        /// <param name="to">End date</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The numbers of rows per page to return (optional, default to 10)</param>
        /// <param name="tz">Timezone Offset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailValidatorSucessResponsetBody</returns>
        public async System.Threading.Tasks.Task<EmailValidatorSucessResponsetBody> GetEmailValidationListsAsync(DateTime from, DateTime to, int? page = default(int?), int? limit = default(int?), string tz = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            API.TurboSMTP.Client.ApiResponse<EmailValidatorSucessResponsetBody> localVarResponse = await GetEmailValidationListsWithHttpInfoAsync(from, to, page, limit, tz, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Email validation lists information  List files for email validation information 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start date</param>
        /// <param name="to">End date</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The numbers of rows per page to return (optional, default to 10)</param>
        /// <param name="tz">Timezone Offset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailValidatorSucessResponsetBody)</returns>
        public async System.Threading.Tasks.Task<API.TurboSMTP.Client.ApiResponse<EmailValidatorSucessResponsetBody>> GetEmailValidationListsWithHttpInfoAsync(DateTime from, DateTime to, int? page = default(int?), int? limit = default(int?), string tz = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            if (tz != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "tz", tz));
            }

            localVarRequestOptions.Operation = "EmailValidatorApi.GetEmailValidationLists";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EmailValidatorSucessResponsetBody>("/emailvalidation/lists", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailValidationLists", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Email Validation subscription  This endpoint allows to get details about remaining credit / balance for email validation. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmailValidatorSubscription</returns>
        public EmailValidatorSubscription GetEmailValidationSubscription(int operationIndex = 0)
        {
            API.TurboSMTP.Client.ApiResponse<EmailValidatorSubscription> localVarResponse = GetEmailValidationSubscriptionWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Email Validation subscription  This endpoint allows to get details about remaining credit / balance for email validation. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmailValidatorSubscription</returns>
        public API.TurboSMTP.Client.ApiResponse<EmailValidatorSubscription> GetEmailValidationSubscriptionWithHttpInfo(int operationIndex = 0)
        {
            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "EmailValidatorApi.GetEmailValidationSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EmailValidatorSubscription>("/emailvalidation/subscription", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailValidationSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Email Validation subscription  This endpoint allows to get details about remaining credit / balance for email validation. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailValidatorSubscription</returns>
        public async System.Threading.Tasks.Task<EmailValidatorSubscription> GetEmailValidationSubscriptionAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            API.TurboSMTP.Client.ApiResponse<EmailValidatorSubscription> localVarResponse = await GetEmailValidationSubscriptionWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Email Validation subscription  This endpoint allows to get details about remaining credit / balance for email validation. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailValidatorSubscription)</returns>
        public async System.Threading.Tasks.Task<API.TurboSMTP.Client.ApiResponse<EmailValidatorSubscription>> GetEmailValidationSubscriptionWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "EmailValidatorApi.GetEmailValidationSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EmailValidatorSubscription>("/emailvalidation/subscription", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailValidationSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Validated Emails by Email Validation List  Get Validated Emails by Email Validation List 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The numbers of rows per page to return (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmailValidatorValidatedMailsResults</returns>
        public EmailValidatorValidatedMailsResults GetValidatedEmailsByList(int id, int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            API.TurboSMTP.Client.ApiResponse<EmailValidatorValidatedMailsResults> localVarResponse = GetValidatedEmailsByListWithHttpInfo(id, page, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Validated Emails by Email Validation List  Get Validated Emails by Email Validation List 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The numbers of rows per page to return (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmailValidatorValidatedMailsResults</returns>
        public API.TurboSMTP.Client.ApiResponse<EmailValidatorValidatedMailsResults> GetValidatedEmailsByListWithHttpInfo(int id, int? page = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Id", API.TurboSMTP.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "EmailValidatorApi.GetValidatedEmailsByList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EmailValidatorValidatedMailsResults>("/emailvalidation/lists/{Id}/emails", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetValidatedEmailsByList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Validated Emails by Email Validation List  Get Validated Emails by Email Validation List 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The numbers of rows per page to return (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailValidatorValidatedMailsResults</returns>
        public async System.Threading.Tasks.Task<EmailValidatorValidatedMailsResults> GetValidatedEmailsByListAsync(int id, int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            API.TurboSMTP.Client.ApiResponse<EmailValidatorValidatedMailsResults> localVarResponse = await GetValidatedEmailsByListWithHttpInfoAsync(id, page, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Validated Emails by Email Validation List  Get Validated Emails by Email Validation List 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The numbers of rows per page to return (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailValidatorValidatedMailsResults)</returns>
        public async System.Threading.Tasks.Task<API.TurboSMTP.Client.ApiResponse<EmailValidatorValidatedMailsResults>> GetValidatedEmailsByListWithHttpInfoAsync(int id, int? page = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Id", API.TurboSMTP.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "EmailValidatorApi.GetValidatedEmailsByList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EmailValidatorValidatedMailsResults>("/emailvalidation/lists/{Id}/emails", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetValidatedEmailsByList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload file for email validation  Upload file for email validation 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmailValidationUploadResponse</returns>
        public EmailValidationUploadResponse UploadEmailValidationFile(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0)
        {
            API.TurboSMTP.Client.ApiResponse<EmailValidationUploadResponse> localVarResponse = UploadEmailValidationFileWithHttpInfo(file);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload file for email validation  Upload file for email validation 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmailValidationUploadResponse</returns>
        public API.TurboSMTP.Client.ApiResponse<EmailValidationUploadResponse> UploadEmailValidationFileWithHttpInfo(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0)
        {
            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            localVarRequestOptions.Operation = "EmailValidatorApi.UploadEmailValidationFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EmailValidationUploadResponse>("/emailvalidation/upload", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadEmailValidationFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload file for email validation  Upload file for email validation 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailValidationUploadResponse</returns>
        public async System.Threading.Tasks.Task<EmailValidationUploadResponse> UploadEmailValidationFileAsync(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            API.TurboSMTP.Client.ApiResponse<EmailValidationUploadResponse> localVarResponse = await UploadEmailValidationFileWithHttpInfoAsync(file, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload file for email validation  Upload file for email validation 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailValidationUploadResponse)</returns>
        public async System.Threading.Tasks.Task<API.TurboSMTP.Client.ApiResponse<EmailValidationUploadResponse>> UploadEmailValidationFileWithHttpInfoAsync(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            localVarRequestOptions.Operation = "EmailValidatorApi.UploadEmailValidationFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EmailValidationUploadResponse>("/emailvalidation/upload", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadEmailValidationFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate single email address  Validate singleemail adddress. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddressRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EmailValidatorMailDetails</returns>
        public EmailValidatorMailDetails ValidateEmail(EmailAddressRequestBody emailAddressRequestBody, int operationIndex = 0)
        {
            API.TurboSMTP.Client.ApiResponse<EmailValidatorMailDetails> localVarResponse = ValidateEmailWithHttpInfo(emailAddressRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Validate single email address  Validate singleemail adddress. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddressRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EmailValidatorMailDetails</returns>
        public API.TurboSMTP.Client.ApiResponse<EmailValidatorMailDetails> ValidateEmailWithHttpInfo(EmailAddressRequestBody emailAddressRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'emailAddressRequestBody' is set
            if (emailAddressRequestBody == null)
            {
                throw new API.TurboSMTP.Client.ApiException(400, "Missing required parameter 'emailAddressRequestBody' when calling EmailValidatorApi->ValidateEmail");
            }

            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = emailAddressRequestBody;

            localVarRequestOptions.Operation = "EmailValidatorApi.ValidateEmail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EmailValidatorMailDetails>("/emailvalidation/validateEmail", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidateEmail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate single email address  Validate singleemail adddress. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddressRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailValidatorMailDetails</returns>
        public async System.Threading.Tasks.Task<EmailValidatorMailDetails> ValidateEmailAsync(EmailAddressRequestBody emailAddressRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            API.TurboSMTP.Client.ApiResponse<EmailValidatorMailDetails> localVarResponse = await ValidateEmailWithHttpInfoAsync(emailAddressRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Validate single email address  Validate singleemail adddress. 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailAddressRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailValidatorMailDetails)</returns>
        public async System.Threading.Tasks.Task<API.TurboSMTP.Client.ApiResponse<EmailValidatorMailDetails>> ValidateEmailWithHttpInfoAsync(EmailAddressRequestBody emailAddressRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'emailAddressRequestBody' is set
            if (emailAddressRequestBody == null)
            {
                throw new API.TurboSMTP.Client.ApiException(400, "Missing required parameter 'emailAddressRequestBody' when calling EmailValidatorApi->ValidateEmail");
            }


            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = emailAddressRequestBody;

            localVarRequestOptions.Operation = "EmailValidatorApi.ValidateEmail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EmailValidatorMailDetails>("/emailvalidation/validateEmail", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidateEmail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate list in Email Validator  Validate list in Email Validator 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ValidateEmailValidatorList(int id, int operationIndex = 0)
        {
            ValidateEmailValidatorListWithHttpInfo(id);
        }

        /// <summary>
        /// Validate list in Email Validator  Validate list in Email Validator 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public API.TurboSMTP.Client.ApiResponse<Object> ValidateEmailValidatorListWithHttpInfo(int id, int operationIndex = 0)
        {
            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Id", API.TurboSMTP.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "EmailValidatorApi.ValidateEmailValidatorList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/emailvalidation/lists/{Id}/validate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidateEmailValidatorList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate list in Email Validator  Validate list in Email Validator 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ValidateEmailValidatorListAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ValidateEmailValidatorListWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Validate list in Email Validator  Validate list in Email Validator 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<API.TurboSMTP.Client.ApiResponse<Object>> ValidateEmailValidatorListWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Id", API.TurboSMTP.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "EmailValidatorApi.ValidateEmailValidatorList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/emailvalidation/lists/{Id}/validate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidateEmailValidatorList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
