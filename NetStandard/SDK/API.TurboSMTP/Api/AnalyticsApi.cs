/*
 * TurboSMTP Public APIs
 *
 * This document describes all public turboSMTP **V2** API and offers endpoints Descriptions, Parameters, Requests, Responses and Samples of usage.  [Click here to view the previous version of turboSMTP Public API Version 1.0](https://www.serversmtp.com/turbo-api-1)   # Security For the most part (and where not otherwise explicit) turboSMTP’s API requires Authorization.   Authorization to access a user’s resource is granted to clients provided they set  authentication headers into their request, valued with the proper values issued by turboSMTP servers.  ## *  Authorization via ConsumerKey/ConsumerSecret  This type of authorization consists of a pair of headers, named consumerKey and consumerSecret that are created and granted to the end user to be used in a permanent way (unless they´re deleted of course). This kind of authentication is intended to provide access to endpoints features without the need of providing the user the account details (email address + password).  *consumerKey:* Consumer Key Granted.  *consumerSecret:* Consumer Secret Granted.  (Use [/consumerKeys/create](#/consumerkey/createConsumerKey) create a consumer key/secret pair).      ## *  Authorization via Authentication Key  The authentication key is user-based and it is issued by turboSMTP servers upon successful user’s email address + password challenge, performed by means of appropriate request.      *Authorization:* Authorization_Key  (Use [/authentication/authorize](#/authentication/AuthenticationLogin) to obtain an API Key)  # Data Interchange Format  For the most part (and where not otherwise explicit) turboSMTP’s API uses JSON as the data format of choice when it comes to request and response bodies.       
 *
 * The version of the OpenAPI document: 2.0.0-oas3
 * Contact: api@turbo-smtp.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using API.TurboSMTP.Client;
using API.TurboSMTP.Model;

namespace API.TurboSMTP.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAnalyticsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Export Analytics data in CSV file
        /// </summary>
        /// <remarks>
        /// Export Analytics data in CSV file 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start date</param>
        /// <param name="to">End date</param>
        /// <param name="status">Filter by Status      NEW: email has been queued for delivery     DEFER: email is in the queue for delivery     SUCCESS: email has been delivered.     OPEN: email has been opened.     CLICK: email has been clicked.     REPORT: email has been reported as spam.     FAIL: email has bounced.     SYSFAIL: email was dropped.     UNSUB: email is unsubscribed.  &lt;br /&gt; Notice that emails that fall into the above statuses can be grouped, ie Turbo-Smtp uses the following groups: &lt;br /&gt;      &#39;Clicks&#39; &#x3D; &#39;CLICK&#39;,     &#39;Unsubscribes&#39; &#x3D; &#39;UNSUB&#39;,     &#39;Spam&#39; &#x3D; &#39;REPORT&#39;,     &#39;Drop&#39; &#x3D; &#39;SYSFAIL&#39;,     &#39;Queued&#39; &#x3D; &#39;NEW&#39; or &#39;DEFER&#39;,     &#39;Opens&#39;&#x3D; &#39;OPEN&#39; or &#39;CLICK&#39; or &#39;UNSUB&#39; or &#39;REPORT&#39;,     &#39;Delivered&#39;&#x3D; &#39;SUCCESS&#39;  or &#39;OPEN&#39; or &#39;CLICK&#39; or &#39;UNSUB&#39; or &#39;REPORT&#39;,     &#39;Bounce&#39;: &#39;FAIL&#39;.    (optional)</param>
        /// <param name="filterBy">Filter by (optional)</param>
        /// <param name="filter">Text to search (recipient, sender, email subject or reason for suppression) (optional)</param>
        /// <param name="smartSearch">Smart search (optional, default to false)</param>
        /// <param name="orderby">Order by (optional)</param>
        /// <param name="ordertype"> (optional)</param>
        /// <param name="tz">Timezone Offset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string ExportAnalyticsDataCSV(DateTime from, DateTime to, List<AnalyticMailStatus> status = default(List<AnalyticMailStatus>), List<AnalyticFilterByOption> filterBy = default(List<AnalyticFilterByOption>), string filter = default(string), bool? smartSearch = default(bool?), AnalyticOrderBy orderby = default(AnalyticOrderBy), OrderType ordertype = default(OrderType), string tz = default(string), int operationIndex = 0);

        /// <summary>
        /// Export Analytics data in CSV file
        /// </summary>
        /// <remarks>
        /// Export Analytics data in CSV file 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start date</param>
        /// <param name="to">End date</param>
        /// <param name="status">Filter by Status      NEW: email has been queued for delivery     DEFER: email is in the queue for delivery     SUCCESS: email has been delivered.     OPEN: email has been opened.     CLICK: email has been clicked.     REPORT: email has been reported as spam.     FAIL: email has bounced.     SYSFAIL: email was dropped.     UNSUB: email is unsubscribed.  &lt;br /&gt; Notice that emails that fall into the above statuses can be grouped, ie Turbo-Smtp uses the following groups: &lt;br /&gt;      &#39;Clicks&#39; &#x3D; &#39;CLICK&#39;,     &#39;Unsubscribes&#39; &#x3D; &#39;UNSUB&#39;,     &#39;Spam&#39; &#x3D; &#39;REPORT&#39;,     &#39;Drop&#39; &#x3D; &#39;SYSFAIL&#39;,     &#39;Queued&#39; &#x3D; &#39;NEW&#39; or &#39;DEFER&#39;,     &#39;Opens&#39;&#x3D; &#39;OPEN&#39; or &#39;CLICK&#39; or &#39;UNSUB&#39; or &#39;REPORT&#39;,     &#39;Delivered&#39;&#x3D; &#39;SUCCESS&#39;  or &#39;OPEN&#39; or &#39;CLICK&#39; or &#39;UNSUB&#39; or &#39;REPORT&#39;,     &#39;Bounce&#39;: &#39;FAIL&#39;.    (optional)</param>
        /// <param name="filterBy">Filter by (optional)</param>
        /// <param name="filter">Text to search (recipient, sender, email subject or reason for suppression) (optional)</param>
        /// <param name="smartSearch">Smart search (optional, default to false)</param>
        /// <param name="orderby">Order by (optional)</param>
        /// <param name="ordertype"> (optional)</param>
        /// <param name="tz">Timezone Offset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportAnalyticsDataCSVWithHttpInfo(DateTime from, DateTime to, List<AnalyticMailStatus> status = default(List<AnalyticMailStatus>), List<AnalyticFilterByOption> filterBy = default(List<AnalyticFilterByOption>), string filter = default(string), bool? smartSearch = default(bool?), AnalyticOrderBy orderby = default(AnalyticOrderBy), OrderType ordertype = default(OrderType), string tz = default(string), int operationIndex = 0);
        /// <summary>
        /// Get Analytics Data
        /// </summary>
        /// <remarks>
        /// Get Analytics Data 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start date</param>
        /// <param name="to">End date</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The numbers of rows per page to return (optional, default to 10)</param>
        /// <param name="status">Filter by Status      NEW: email has been queued for delivery     DEFER: email is in the queue for delivery     SUCCESS: email has been delivered.     OPEN: email has been opened.     CLICK: email has been clicked.     REPORT: email has been reported as spam.     FAIL: email has bounced.     SYSFAIL: email was dropped.     UNSUB: email is unsubscribed.  &lt;br /&gt; Notice that emails that fall into the above statuses can be grouped, ie Turbo-Smtp uses the following groups: &lt;br /&gt;      &#39;Clicks&#39; &#x3D; &#39;CLICK&#39;,     &#39;Unsubscribes&#39; &#x3D; &#39;UNSUB&#39;,     &#39;Spam&#39; &#x3D; &#39;REPORT&#39;,     &#39;Drop&#39; &#x3D; &#39;SYSFAIL&#39;,     &#39;Queued&#39; &#x3D; &#39;NEW&#39; or &#39;DEFER&#39;,     &#39;Opens&#39;&#x3D; &#39;OPEN&#39; or &#39;CLICK&#39; or &#39;UNSUB&#39; or &#39;REPORT&#39;,     &#39;Delivered&#39;&#x3D; &#39;SUCCESS&#39;  or &#39;OPEN&#39; or &#39;CLICK&#39; or &#39;UNSUB&#39; or &#39;REPORT&#39;,     &#39;Bounce&#39;: &#39;FAIL&#39;.    (optional)</param>
        /// <param name="filterBy">Filter by (optional)</param>
        /// <param name="filter">Text to search (recipient, sender, email subject or reason for suppression) (optional)</param>
        /// <param name="smartSearch">Smart search (optional, default to false)</param>
        /// <param name="orderby">Order by (optional)</param>
        /// <param name="ordertype"> (optional)</param>
        /// <param name="tz">Timezone Offset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AnalyticsListSucessResponsetBody</returns>
        AnalyticsListSucessResponsetBody GetAnalyticsData(DateTime from, DateTime to, int? page = default(int?), int? limit = default(int?), List<AnalyticMailStatus> status = default(List<AnalyticMailStatus>), List<AnalyticFilterByOption> filterBy = default(List<AnalyticFilterByOption>), string filter = default(string), bool? smartSearch = default(bool?), AnalyticOrderBy orderby = default(AnalyticOrderBy), OrderType ordertype = default(OrderType), string tz = default(string), int operationIndex = 0);

        /// <summary>
        /// Get Analytics Data
        /// </summary>
        /// <remarks>
        /// Get Analytics Data 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start date</param>
        /// <param name="to">End date</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The numbers of rows per page to return (optional, default to 10)</param>
        /// <param name="status">Filter by Status      NEW: email has been queued for delivery     DEFER: email is in the queue for delivery     SUCCESS: email has been delivered.     OPEN: email has been opened.     CLICK: email has been clicked.     REPORT: email has been reported as spam.     FAIL: email has bounced.     SYSFAIL: email was dropped.     UNSUB: email is unsubscribed.  &lt;br /&gt; Notice that emails that fall into the above statuses can be grouped, ie Turbo-Smtp uses the following groups: &lt;br /&gt;      &#39;Clicks&#39; &#x3D; &#39;CLICK&#39;,     &#39;Unsubscribes&#39; &#x3D; &#39;UNSUB&#39;,     &#39;Spam&#39; &#x3D; &#39;REPORT&#39;,     &#39;Drop&#39; &#x3D; &#39;SYSFAIL&#39;,     &#39;Queued&#39; &#x3D; &#39;NEW&#39; or &#39;DEFER&#39;,     &#39;Opens&#39;&#x3D; &#39;OPEN&#39; or &#39;CLICK&#39; or &#39;UNSUB&#39; or &#39;REPORT&#39;,     &#39;Delivered&#39;&#x3D; &#39;SUCCESS&#39;  or &#39;OPEN&#39; or &#39;CLICK&#39; or &#39;UNSUB&#39; or &#39;REPORT&#39;,     &#39;Bounce&#39;: &#39;FAIL&#39;.    (optional)</param>
        /// <param name="filterBy">Filter by (optional)</param>
        /// <param name="filter">Text to search (recipient, sender, email subject or reason for suppression) (optional)</param>
        /// <param name="smartSearch">Smart search (optional, default to false)</param>
        /// <param name="orderby">Order by (optional)</param>
        /// <param name="ordertype"> (optional)</param>
        /// <param name="tz">Timezone Offset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AnalyticsListSucessResponsetBody</returns>
        ApiResponse<AnalyticsListSucessResponsetBody> GetAnalyticsDataWithHttpInfo(DateTime from, DateTime to, int? page = default(int?), int? limit = default(int?), List<AnalyticMailStatus> status = default(List<AnalyticMailStatus>), List<AnalyticFilterByOption> filterBy = default(List<AnalyticFilterByOption>), string filter = default(string), bool? smartSearch = default(bool?), AnalyticOrderBy orderby = default(AnalyticOrderBy), OrderType ordertype = default(OrderType), string tz = default(string), int operationIndex = 0);
        /// <summary>
        /// Get Analytics Single Item by ID
        /// </summary>
        /// <remarks>
        /// Get Analytics Data by ID 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AnalyticMailItem</returns>
        AnalyticMailItem GetAnalyticsDataByID(int id, int operationIndex = 0);

        /// <summary>
        /// Get Analytics Single Item by ID
        /// </summary>
        /// <remarks>
        /// Get Analytics Data by ID 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AnalyticMailItem</returns>
        ApiResponse<AnalyticMailItem> GetAnalyticsDataByIDWithHttpInfo(int id, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAnalyticsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Export Analytics data in CSV file
        /// </summary>
        /// <remarks>
        /// Export Analytics data in CSV file 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start date</param>
        /// <param name="to">End date</param>
        /// <param name="status">Filter by Status      NEW: email has been queued for delivery     DEFER: email is in the queue for delivery     SUCCESS: email has been delivered.     OPEN: email has been opened.     CLICK: email has been clicked.     REPORT: email has been reported as spam.     FAIL: email has bounced.     SYSFAIL: email was dropped.     UNSUB: email is unsubscribed.  &lt;br /&gt; Notice that emails that fall into the above statuses can be grouped, ie Turbo-Smtp uses the following groups: &lt;br /&gt;      &#39;Clicks&#39; &#x3D; &#39;CLICK&#39;,     &#39;Unsubscribes&#39; &#x3D; &#39;UNSUB&#39;,     &#39;Spam&#39; &#x3D; &#39;REPORT&#39;,     &#39;Drop&#39; &#x3D; &#39;SYSFAIL&#39;,     &#39;Queued&#39; &#x3D; &#39;NEW&#39; or &#39;DEFER&#39;,     &#39;Opens&#39;&#x3D; &#39;OPEN&#39; or &#39;CLICK&#39; or &#39;UNSUB&#39; or &#39;REPORT&#39;,     &#39;Delivered&#39;&#x3D; &#39;SUCCESS&#39;  or &#39;OPEN&#39; or &#39;CLICK&#39; or &#39;UNSUB&#39; or &#39;REPORT&#39;,     &#39;Bounce&#39;: &#39;FAIL&#39;.    (optional)</param>
        /// <param name="filterBy">Filter by (optional)</param>
        /// <param name="filter">Text to search (recipient, sender, email subject or reason for suppression) (optional)</param>
        /// <param name="smartSearch">Smart search (optional, default to false)</param>
        /// <param name="orderby">Order by (optional)</param>
        /// <param name="ordertype"> (optional)</param>
        /// <param name="tz">Timezone Offset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportAnalyticsDataCSVAsync(DateTime from, DateTime to, List<AnalyticMailStatus> status = default(List<AnalyticMailStatus>), List<AnalyticFilterByOption> filterBy = default(List<AnalyticFilterByOption>), string filter = default(string), bool? smartSearch = default(bool?), AnalyticOrderBy orderby = default(AnalyticOrderBy), OrderType ordertype = default(OrderType), string tz = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Export Analytics data in CSV file
        /// </summary>
        /// <remarks>
        /// Export Analytics data in CSV file 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start date</param>
        /// <param name="to">End date</param>
        /// <param name="status">Filter by Status      NEW: email has been queued for delivery     DEFER: email is in the queue for delivery     SUCCESS: email has been delivered.     OPEN: email has been opened.     CLICK: email has been clicked.     REPORT: email has been reported as spam.     FAIL: email has bounced.     SYSFAIL: email was dropped.     UNSUB: email is unsubscribed.  &lt;br /&gt; Notice that emails that fall into the above statuses can be grouped, ie Turbo-Smtp uses the following groups: &lt;br /&gt;      &#39;Clicks&#39; &#x3D; &#39;CLICK&#39;,     &#39;Unsubscribes&#39; &#x3D; &#39;UNSUB&#39;,     &#39;Spam&#39; &#x3D; &#39;REPORT&#39;,     &#39;Drop&#39; &#x3D; &#39;SYSFAIL&#39;,     &#39;Queued&#39; &#x3D; &#39;NEW&#39; or &#39;DEFER&#39;,     &#39;Opens&#39;&#x3D; &#39;OPEN&#39; or &#39;CLICK&#39; or &#39;UNSUB&#39; or &#39;REPORT&#39;,     &#39;Delivered&#39;&#x3D; &#39;SUCCESS&#39;  or &#39;OPEN&#39; or &#39;CLICK&#39; or &#39;UNSUB&#39; or &#39;REPORT&#39;,     &#39;Bounce&#39;: &#39;FAIL&#39;.    (optional)</param>
        /// <param name="filterBy">Filter by (optional)</param>
        /// <param name="filter">Text to search (recipient, sender, email subject or reason for suppression) (optional)</param>
        /// <param name="smartSearch">Smart search (optional, default to false)</param>
        /// <param name="orderby">Order by (optional)</param>
        /// <param name="ordertype"> (optional)</param>
        /// <param name="tz">Timezone Offset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportAnalyticsDataCSVWithHttpInfoAsync(DateTime from, DateTime to, List<AnalyticMailStatus> status = default(List<AnalyticMailStatus>), List<AnalyticFilterByOption> filterBy = default(List<AnalyticFilterByOption>), string filter = default(string), bool? smartSearch = default(bool?), AnalyticOrderBy orderby = default(AnalyticOrderBy), OrderType ordertype = default(OrderType), string tz = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Analytics Data
        /// </summary>
        /// <remarks>
        /// Get Analytics Data 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start date</param>
        /// <param name="to">End date</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The numbers of rows per page to return (optional, default to 10)</param>
        /// <param name="status">Filter by Status      NEW: email has been queued for delivery     DEFER: email is in the queue for delivery     SUCCESS: email has been delivered.     OPEN: email has been opened.     CLICK: email has been clicked.     REPORT: email has been reported as spam.     FAIL: email has bounced.     SYSFAIL: email was dropped.     UNSUB: email is unsubscribed.  &lt;br /&gt; Notice that emails that fall into the above statuses can be grouped, ie Turbo-Smtp uses the following groups: &lt;br /&gt;      &#39;Clicks&#39; &#x3D; &#39;CLICK&#39;,     &#39;Unsubscribes&#39; &#x3D; &#39;UNSUB&#39;,     &#39;Spam&#39; &#x3D; &#39;REPORT&#39;,     &#39;Drop&#39; &#x3D; &#39;SYSFAIL&#39;,     &#39;Queued&#39; &#x3D; &#39;NEW&#39; or &#39;DEFER&#39;,     &#39;Opens&#39;&#x3D; &#39;OPEN&#39; or &#39;CLICK&#39; or &#39;UNSUB&#39; or &#39;REPORT&#39;,     &#39;Delivered&#39;&#x3D; &#39;SUCCESS&#39;  or &#39;OPEN&#39; or &#39;CLICK&#39; or &#39;UNSUB&#39; or &#39;REPORT&#39;,     &#39;Bounce&#39;: &#39;FAIL&#39;.    (optional)</param>
        /// <param name="filterBy">Filter by (optional)</param>
        /// <param name="filter">Text to search (recipient, sender, email subject or reason for suppression) (optional)</param>
        /// <param name="smartSearch">Smart search (optional, default to false)</param>
        /// <param name="orderby">Order by (optional)</param>
        /// <param name="ordertype"> (optional)</param>
        /// <param name="tz">Timezone Offset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnalyticsListSucessResponsetBody</returns>
        System.Threading.Tasks.Task<AnalyticsListSucessResponsetBody> GetAnalyticsDataAsync(DateTime from, DateTime to, int? page = default(int?), int? limit = default(int?), List<AnalyticMailStatus> status = default(List<AnalyticMailStatus>), List<AnalyticFilterByOption> filterBy = default(List<AnalyticFilterByOption>), string filter = default(string), bool? smartSearch = default(bool?), AnalyticOrderBy orderby = default(AnalyticOrderBy), OrderType ordertype = default(OrderType), string tz = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Analytics Data
        /// </summary>
        /// <remarks>
        /// Get Analytics Data 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start date</param>
        /// <param name="to">End date</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The numbers of rows per page to return (optional, default to 10)</param>
        /// <param name="status">Filter by Status      NEW: email has been queued for delivery     DEFER: email is in the queue for delivery     SUCCESS: email has been delivered.     OPEN: email has been opened.     CLICK: email has been clicked.     REPORT: email has been reported as spam.     FAIL: email has bounced.     SYSFAIL: email was dropped.     UNSUB: email is unsubscribed.  &lt;br /&gt; Notice that emails that fall into the above statuses can be grouped, ie Turbo-Smtp uses the following groups: &lt;br /&gt;      &#39;Clicks&#39; &#x3D; &#39;CLICK&#39;,     &#39;Unsubscribes&#39; &#x3D; &#39;UNSUB&#39;,     &#39;Spam&#39; &#x3D; &#39;REPORT&#39;,     &#39;Drop&#39; &#x3D; &#39;SYSFAIL&#39;,     &#39;Queued&#39; &#x3D; &#39;NEW&#39; or &#39;DEFER&#39;,     &#39;Opens&#39;&#x3D; &#39;OPEN&#39; or &#39;CLICK&#39; or &#39;UNSUB&#39; or &#39;REPORT&#39;,     &#39;Delivered&#39;&#x3D; &#39;SUCCESS&#39;  or &#39;OPEN&#39; or &#39;CLICK&#39; or &#39;UNSUB&#39; or &#39;REPORT&#39;,     &#39;Bounce&#39;: &#39;FAIL&#39;.    (optional)</param>
        /// <param name="filterBy">Filter by (optional)</param>
        /// <param name="filter">Text to search (recipient, sender, email subject or reason for suppression) (optional)</param>
        /// <param name="smartSearch">Smart search (optional, default to false)</param>
        /// <param name="orderby">Order by (optional)</param>
        /// <param name="ordertype"> (optional)</param>
        /// <param name="tz">Timezone Offset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnalyticsListSucessResponsetBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnalyticsListSucessResponsetBody>> GetAnalyticsDataWithHttpInfoAsync(DateTime from, DateTime to, int? page = default(int?), int? limit = default(int?), List<AnalyticMailStatus> status = default(List<AnalyticMailStatus>), List<AnalyticFilterByOption> filterBy = default(List<AnalyticFilterByOption>), string filter = default(string), bool? smartSearch = default(bool?), AnalyticOrderBy orderby = default(AnalyticOrderBy), OrderType ordertype = default(OrderType), string tz = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Analytics Single Item by ID
        /// </summary>
        /// <remarks>
        /// Get Analytics Data by ID 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnalyticMailItem</returns>
        System.Threading.Tasks.Task<AnalyticMailItem> GetAnalyticsDataByIDAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Analytics Single Item by ID
        /// </summary>
        /// <remarks>
        /// Get Analytics Data by ID 
        /// </remarks>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnalyticMailItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnalyticMailItem>> GetAnalyticsDataByIDWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAnalyticsApi : IAnalyticsApiSync, IAnalyticsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AnalyticsApi : IAnalyticsApi
    {
        private API.TurboSMTP.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AnalyticsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AnalyticsApi(string basePath)
        {
            this.Configuration = API.TurboSMTP.Client.Configuration.MergeConfigurations(
                API.TurboSMTP.Client.GlobalConfiguration.Instance,
                new API.TurboSMTP.Client.Configuration { BasePath = basePath }
            );
            this.Client = new API.TurboSMTP.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new API.TurboSMTP.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = API.TurboSMTP.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AnalyticsApi(API.TurboSMTP.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = API.TurboSMTP.Client.Configuration.MergeConfigurations(
                API.TurboSMTP.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new API.TurboSMTP.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new API.TurboSMTP.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = API.TurboSMTP.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AnalyticsApi(API.TurboSMTP.Client.ISynchronousClient client, API.TurboSMTP.Client.IAsynchronousClient asyncClient, API.TurboSMTP.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = API.TurboSMTP.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public API.TurboSMTP.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public API.TurboSMTP.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public API.TurboSMTP.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public API.TurboSMTP.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Export Analytics data in CSV file Export Analytics data in CSV file 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start date</param>
        /// <param name="to">End date</param>
        /// <param name="status">Filter by Status      NEW: email has been queued for delivery     DEFER: email is in the queue for delivery     SUCCESS: email has been delivered.     OPEN: email has been opened.     CLICK: email has been clicked.     REPORT: email has been reported as spam.     FAIL: email has bounced.     SYSFAIL: email was dropped.     UNSUB: email is unsubscribed.  &lt;br /&gt; Notice that emails that fall into the above statuses can be grouped, ie Turbo-Smtp uses the following groups: &lt;br /&gt;      &#39;Clicks&#39; &#x3D; &#39;CLICK&#39;,     &#39;Unsubscribes&#39; &#x3D; &#39;UNSUB&#39;,     &#39;Spam&#39; &#x3D; &#39;REPORT&#39;,     &#39;Drop&#39; &#x3D; &#39;SYSFAIL&#39;,     &#39;Queued&#39; &#x3D; &#39;NEW&#39; or &#39;DEFER&#39;,     &#39;Opens&#39;&#x3D; &#39;OPEN&#39; or &#39;CLICK&#39; or &#39;UNSUB&#39; or &#39;REPORT&#39;,     &#39;Delivered&#39;&#x3D; &#39;SUCCESS&#39;  or &#39;OPEN&#39; or &#39;CLICK&#39; or &#39;UNSUB&#39; or &#39;REPORT&#39;,     &#39;Bounce&#39;: &#39;FAIL&#39;.    (optional)</param>
        /// <param name="filterBy">Filter by (optional)</param>
        /// <param name="filter">Text to search (recipient, sender, email subject or reason for suppression) (optional)</param>
        /// <param name="smartSearch">Smart search (optional, default to false)</param>
        /// <param name="orderby">Order by (optional)</param>
        /// <param name="ordertype"> (optional)</param>
        /// <param name="tz">Timezone Offset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string ExportAnalyticsDataCSV(DateTime from, DateTime to, List<AnalyticMailStatus> status = default(List<AnalyticMailStatus>), List<AnalyticFilterByOption> filterBy = default(List<AnalyticFilterByOption>), string filter = default(string), bool? smartSearch = default(bool?), AnalyticOrderBy orderby = default(AnalyticOrderBy), OrderType ordertype = default(OrderType), string tz = default(string), int operationIndex = 0)
        {
            API.TurboSMTP.Client.ApiResponse<string> localVarResponse = ExportAnalyticsDataCSVWithHttpInfo(from, to, status, filterBy, filter, smartSearch, orderby, ordertype, tz);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export Analytics data in CSV file Export Analytics data in CSV file 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start date</param>
        /// <param name="to">End date</param>
        /// <param name="status">Filter by Status      NEW: email has been queued for delivery     DEFER: email is in the queue for delivery     SUCCESS: email has been delivered.     OPEN: email has been opened.     CLICK: email has been clicked.     REPORT: email has been reported as spam.     FAIL: email has bounced.     SYSFAIL: email was dropped.     UNSUB: email is unsubscribed.  &lt;br /&gt; Notice that emails that fall into the above statuses can be grouped, ie Turbo-Smtp uses the following groups: &lt;br /&gt;      &#39;Clicks&#39; &#x3D; &#39;CLICK&#39;,     &#39;Unsubscribes&#39; &#x3D; &#39;UNSUB&#39;,     &#39;Spam&#39; &#x3D; &#39;REPORT&#39;,     &#39;Drop&#39; &#x3D; &#39;SYSFAIL&#39;,     &#39;Queued&#39; &#x3D; &#39;NEW&#39; or &#39;DEFER&#39;,     &#39;Opens&#39;&#x3D; &#39;OPEN&#39; or &#39;CLICK&#39; or &#39;UNSUB&#39; or &#39;REPORT&#39;,     &#39;Delivered&#39;&#x3D; &#39;SUCCESS&#39;  or &#39;OPEN&#39; or &#39;CLICK&#39; or &#39;UNSUB&#39; or &#39;REPORT&#39;,     &#39;Bounce&#39;: &#39;FAIL&#39;.    (optional)</param>
        /// <param name="filterBy">Filter by (optional)</param>
        /// <param name="filter">Text to search (recipient, sender, email subject or reason for suppression) (optional)</param>
        /// <param name="smartSearch">Smart search (optional, default to false)</param>
        /// <param name="orderby">Order by (optional)</param>
        /// <param name="ordertype"> (optional)</param>
        /// <param name="tz">Timezone Offset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public API.TurboSMTP.Client.ApiResponse<string> ExportAnalyticsDataCSVWithHttpInfo(DateTime from, DateTime to, List<AnalyticMailStatus> status = default(List<AnalyticMailStatus>), List<AnalyticFilterByOption> filterBy = default(List<AnalyticFilterByOption>), string filter = default(string), bool? smartSearch = default(bool?), AnalyticOrderBy orderby = default(AnalyticOrderBy), OrderType ordertype = default(OrderType), string tz = default(string), int operationIndex = 0)
        {
            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/csv",
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("multi", "status[]", status));
            }
            if (filterBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("multi", "filter_by", filterBy));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (smartSearch != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "smart_search", smartSearch));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby));
            }
            if (ordertype != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "ordertype", ordertype));
            }
            if (tz != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "tz", tz));
            }

            localVarRequestOptions.Operation = "AnalyticsApi.ExportAnalyticsDataCSV";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/analytics/csv", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportAnalyticsDataCSV", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export Analytics data in CSV file Export Analytics data in CSV file 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start date</param>
        /// <param name="to">End date</param>
        /// <param name="status">Filter by Status      NEW: email has been queued for delivery     DEFER: email is in the queue for delivery     SUCCESS: email has been delivered.     OPEN: email has been opened.     CLICK: email has been clicked.     REPORT: email has been reported as spam.     FAIL: email has bounced.     SYSFAIL: email was dropped.     UNSUB: email is unsubscribed.  &lt;br /&gt; Notice that emails that fall into the above statuses can be grouped, ie Turbo-Smtp uses the following groups: &lt;br /&gt;      &#39;Clicks&#39; &#x3D; &#39;CLICK&#39;,     &#39;Unsubscribes&#39; &#x3D; &#39;UNSUB&#39;,     &#39;Spam&#39; &#x3D; &#39;REPORT&#39;,     &#39;Drop&#39; &#x3D; &#39;SYSFAIL&#39;,     &#39;Queued&#39; &#x3D; &#39;NEW&#39; or &#39;DEFER&#39;,     &#39;Opens&#39;&#x3D; &#39;OPEN&#39; or &#39;CLICK&#39; or &#39;UNSUB&#39; or &#39;REPORT&#39;,     &#39;Delivered&#39;&#x3D; &#39;SUCCESS&#39;  or &#39;OPEN&#39; or &#39;CLICK&#39; or &#39;UNSUB&#39; or &#39;REPORT&#39;,     &#39;Bounce&#39;: &#39;FAIL&#39;.    (optional)</param>
        /// <param name="filterBy">Filter by (optional)</param>
        /// <param name="filter">Text to search (recipient, sender, email subject or reason for suppression) (optional)</param>
        /// <param name="smartSearch">Smart search (optional, default to false)</param>
        /// <param name="orderby">Order by (optional)</param>
        /// <param name="ordertype"> (optional)</param>
        /// <param name="tz">Timezone Offset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportAnalyticsDataCSVAsync(DateTime from, DateTime to, List<AnalyticMailStatus> status = default(List<AnalyticMailStatus>), List<AnalyticFilterByOption> filterBy = default(List<AnalyticFilterByOption>), string filter = default(string), bool? smartSearch = default(bool?), AnalyticOrderBy orderby = default(AnalyticOrderBy), OrderType ordertype = default(OrderType), string tz = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            API.TurboSMTP.Client.ApiResponse<string> localVarResponse = await ExportAnalyticsDataCSVWithHttpInfoAsync(from, to, status, filterBy, filter, smartSearch, orderby, ordertype, tz, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export Analytics data in CSV file Export Analytics data in CSV file 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start date</param>
        /// <param name="to">End date</param>
        /// <param name="status">Filter by Status      NEW: email has been queued for delivery     DEFER: email is in the queue for delivery     SUCCESS: email has been delivered.     OPEN: email has been opened.     CLICK: email has been clicked.     REPORT: email has been reported as spam.     FAIL: email has bounced.     SYSFAIL: email was dropped.     UNSUB: email is unsubscribed.  &lt;br /&gt; Notice that emails that fall into the above statuses can be grouped, ie Turbo-Smtp uses the following groups: &lt;br /&gt;      &#39;Clicks&#39; &#x3D; &#39;CLICK&#39;,     &#39;Unsubscribes&#39; &#x3D; &#39;UNSUB&#39;,     &#39;Spam&#39; &#x3D; &#39;REPORT&#39;,     &#39;Drop&#39; &#x3D; &#39;SYSFAIL&#39;,     &#39;Queued&#39; &#x3D; &#39;NEW&#39; or &#39;DEFER&#39;,     &#39;Opens&#39;&#x3D; &#39;OPEN&#39; or &#39;CLICK&#39; or &#39;UNSUB&#39; or &#39;REPORT&#39;,     &#39;Delivered&#39;&#x3D; &#39;SUCCESS&#39;  or &#39;OPEN&#39; or &#39;CLICK&#39; or &#39;UNSUB&#39; or &#39;REPORT&#39;,     &#39;Bounce&#39;: &#39;FAIL&#39;.    (optional)</param>
        /// <param name="filterBy">Filter by (optional)</param>
        /// <param name="filter">Text to search (recipient, sender, email subject or reason for suppression) (optional)</param>
        /// <param name="smartSearch">Smart search (optional, default to false)</param>
        /// <param name="orderby">Order by (optional)</param>
        /// <param name="ordertype"> (optional)</param>
        /// <param name="tz">Timezone Offset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<API.TurboSMTP.Client.ApiResponse<string>> ExportAnalyticsDataCSVWithHttpInfoAsync(DateTime from, DateTime to, List<AnalyticMailStatus> status = default(List<AnalyticMailStatus>), List<AnalyticFilterByOption> filterBy = default(List<AnalyticFilterByOption>), string filter = default(string), bool? smartSearch = default(bool?), AnalyticOrderBy orderby = default(AnalyticOrderBy), OrderType ordertype = default(OrderType), string tz = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/csv",
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("multi", "status[]", status));
            }
            if (filterBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("multi", "filter_by", filterBy));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (smartSearch != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "smart_search", smartSearch));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby));
            }
            if (ordertype != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "ordertype", ordertype));
            }
            if (tz != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "tz", tz));
            }

            localVarRequestOptions.Operation = "AnalyticsApi.ExportAnalyticsDataCSV";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/analytics/csv", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportAnalyticsDataCSV", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Analytics Data Get Analytics Data 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start date</param>
        /// <param name="to">End date</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The numbers of rows per page to return (optional, default to 10)</param>
        /// <param name="status">Filter by Status      NEW: email has been queued for delivery     DEFER: email is in the queue for delivery     SUCCESS: email has been delivered.     OPEN: email has been opened.     CLICK: email has been clicked.     REPORT: email has been reported as spam.     FAIL: email has bounced.     SYSFAIL: email was dropped.     UNSUB: email is unsubscribed.  &lt;br /&gt; Notice that emails that fall into the above statuses can be grouped, ie Turbo-Smtp uses the following groups: &lt;br /&gt;      &#39;Clicks&#39; &#x3D; &#39;CLICK&#39;,     &#39;Unsubscribes&#39; &#x3D; &#39;UNSUB&#39;,     &#39;Spam&#39; &#x3D; &#39;REPORT&#39;,     &#39;Drop&#39; &#x3D; &#39;SYSFAIL&#39;,     &#39;Queued&#39; &#x3D; &#39;NEW&#39; or &#39;DEFER&#39;,     &#39;Opens&#39;&#x3D; &#39;OPEN&#39; or &#39;CLICK&#39; or &#39;UNSUB&#39; or &#39;REPORT&#39;,     &#39;Delivered&#39;&#x3D; &#39;SUCCESS&#39;  or &#39;OPEN&#39; or &#39;CLICK&#39; or &#39;UNSUB&#39; or &#39;REPORT&#39;,     &#39;Bounce&#39;: &#39;FAIL&#39;.    (optional)</param>
        /// <param name="filterBy">Filter by (optional)</param>
        /// <param name="filter">Text to search (recipient, sender, email subject or reason for suppression) (optional)</param>
        /// <param name="smartSearch">Smart search (optional, default to false)</param>
        /// <param name="orderby">Order by (optional)</param>
        /// <param name="ordertype"> (optional)</param>
        /// <param name="tz">Timezone Offset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AnalyticsListSucessResponsetBody</returns>
        public AnalyticsListSucessResponsetBody GetAnalyticsData(DateTime from, DateTime to, int? page = default(int?), int? limit = default(int?), List<AnalyticMailStatus> status = default(List<AnalyticMailStatus>), List<AnalyticFilterByOption> filterBy = default(List<AnalyticFilterByOption>), string filter = default(string), bool? smartSearch = default(bool?), AnalyticOrderBy orderby = default(AnalyticOrderBy), OrderType ordertype = default(OrderType), string tz = default(string), int operationIndex = 0)
        {
            API.TurboSMTP.Client.ApiResponse<AnalyticsListSucessResponsetBody> localVarResponse = GetAnalyticsDataWithHttpInfo(from, to, page, limit, status, filterBy, filter, smartSearch, orderby, ordertype, tz);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Analytics Data Get Analytics Data 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start date</param>
        /// <param name="to">End date</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The numbers of rows per page to return (optional, default to 10)</param>
        /// <param name="status">Filter by Status      NEW: email has been queued for delivery     DEFER: email is in the queue for delivery     SUCCESS: email has been delivered.     OPEN: email has been opened.     CLICK: email has been clicked.     REPORT: email has been reported as spam.     FAIL: email has bounced.     SYSFAIL: email was dropped.     UNSUB: email is unsubscribed.  &lt;br /&gt; Notice that emails that fall into the above statuses can be grouped, ie Turbo-Smtp uses the following groups: &lt;br /&gt;      &#39;Clicks&#39; &#x3D; &#39;CLICK&#39;,     &#39;Unsubscribes&#39; &#x3D; &#39;UNSUB&#39;,     &#39;Spam&#39; &#x3D; &#39;REPORT&#39;,     &#39;Drop&#39; &#x3D; &#39;SYSFAIL&#39;,     &#39;Queued&#39; &#x3D; &#39;NEW&#39; or &#39;DEFER&#39;,     &#39;Opens&#39;&#x3D; &#39;OPEN&#39; or &#39;CLICK&#39; or &#39;UNSUB&#39; or &#39;REPORT&#39;,     &#39;Delivered&#39;&#x3D; &#39;SUCCESS&#39;  or &#39;OPEN&#39; or &#39;CLICK&#39; or &#39;UNSUB&#39; or &#39;REPORT&#39;,     &#39;Bounce&#39;: &#39;FAIL&#39;.    (optional)</param>
        /// <param name="filterBy">Filter by (optional)</param>
        /// <param name="filter">Text to search (recipient, sender, email subject or reason for suppression) (optional)</param>
        /// <param name="smartSearch">Smart search (optional, default to false)</param>
        /// <param name="orderby">Order by (optional)</param>
        /// <param name="ordertype"> (optional)</param>
        /// <param name="tz">Timezone Offset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AnalyticsListSucessResponsetBody</returns>
        public API.TurboSMTP.Client.ApiResponse<AnalyticsListSucessResponsetBody> GetAnalyticsDataWithHttpInfo(DateTime from, DateTime to, int? page = default(int?), int? limit = default(int?), List<AnalyticMailStatus> status = default(List<AnalyticMailStatus>), List<AnalyticFilterByOption> filterBy = default(List<AnalyticFilterByOption>), string filter = default(string), bool? smartSearch = default(bool?), AnalyticOrderBy orderby = default(AnalyticOrderBy), OrderType ordertype = default(OrderType), string tz = default(string), int operationIndex = 0)
        {
            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("multi", "status[]", status));
            }
            if (filterBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("multi", "filter_by", filterBy));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (smartSearch != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "smart_search", smartSearch));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby));
            }
            if (ordertype != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "ordertype", ordertype));
            }
            if (tz != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "tz", tz));
            }

            localVarRequestOptions.Operation = "AnalyticsApi.GetAnalyticsData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AnalyticsListSucessResponsetBody>("/analytics", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAnalyticsData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Analytics Data Get Analytics Data 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start date</param>
        /// <param name="to">End date</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The numbers of rows per page to return (optional, default to 10)</param>
        /// <param name="status">Filter by Status      NEW: email has been queued for delivery     DEFER: email is in the queue for delivery     SUCCESS: email has been delivered.     OPEN: email has been opened.     CLICK: email has been clicked.     REPORT: email has been reported as spam.     FAIL: email has bounced.     SYSFAIL: email was dropped.     UNSUB: email is unsubscribed.  &lt;br /&gt; Notice that emails that fall into the above statuses can be grouped, ie Turbo-Smtp uses the following groups: &lt;br /&gt;      &#39;Clicks&#39; &#x3D; &#39;CLICK&#39;,     &#39;Unsubscribes&#39; &#x3D; &#39;UNSUB&#39;,     &#39;Spam&#39; &#x3D; &#39;REPORT&#39;,     &#39;Drop&#39; &#x3D; &#39;SYSFAIL&#39;,     &#39;Queued&#39; &#x3D; &#39;NEW&#39; or &#39;DEFER&#39;,     &#39;Opens&#39;&#x3D; &#39;OPEN&#39; or &#39;CLICK&#39; or &#39;UNSUB&#39; or &#39;REPORT&#39;,     &#39;Delivered&#39;&#x3D; &#39;SUCCESS&#39;  or &#39;OPEN&#39; or &#39;CLICK&#39; or &#39;UNSUB&#39; or &#39;REPORT&#39;,     &#39;Bounce&#39;: &#39;FAIL&#39;.    (optional)</param>
        /// <param name="filterBy">Filter by (optional)</param>
        /// <param name="filter">Text to search (recipient, sender, email subject or reason for suppression) (optional)</param>
        /// <param name="smartSearch">Smart search (optional, default to false)</param>
        /// <param name="orderby">Order by (optional)</param>
        /// <param name="ordertype"> (optional)</param>
        /// <param name="tz">Timezone Offset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnalyticsListSucessResponsetBody</returns>
        public async System.Threading.Tasks.Task<AnalyticsListSucessResponsetBody> GetAnalyticsDataAsync(DateTime from, DateTime to, int? page = default(int?), int? limit = default(int?), List<AnalyticMailStatus> status = default(List<AnalyticMailStatus>), List<AnalyticFilterByOption> filterBy = default(List<AnalyticFilterByOption>), string filter = default(string), bool? smartSearch = default(bool?), AnalyticOrderBy orderby = default(AnalyticOrderBy), OrderType ordertype = default(OrderType), string tz = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            API.TurboSMTP.Client.ApiResponse<AnalyticsListSucessResponsetBody> localVarResponse = await GetAnalyticsDataWithHttpInfoAsync(from, to, page, limit, status, filterBy, filter, smartSearch, orderby, ordertype, tz, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Analytics Data Get Analytics Data 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">Start date</param>
        /// <param name="to">End date</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="limit">The numbers of rows per page to return (optional, default to 10)</param>
        /// <param name="status">Filter by Status      NEW: email has been queued for delivery     DEFER: email is in the queue for delivery     SUCCESS: email has been delivered.     OPEN: email has been opened.     CLICK: email has been clicked.     REPORT: email has been reported as spam.     FAIL: email has bounced.     SYSFAIL: email was dropped.     UNSUB: email is unsubscribed.  &lt;br /&gt; Notice that emails that fall into the above statuses can be grouped, ie Turbo-Smtp uses the following groups: &lt;br /&gt;      &#39;Clicks&#39; &#x3D; &#39;CLICK&#39;,     &#39;Unsubscribes&#39; &#x3D; &#39;UNSUB&#39;,     &#39;Spam&#39; &#x3D; &#39;REPORT&#39;,     &#39;Drop&#39; &#x3D; &#39;SYSFAIL&#39;,     &#39;Queued&#39; &#x3D; &#39;NEW&#39; or &#39;DEFER&#39;,     &#39;Opens&#39;&#x3D; &#39;OPEN&#39; or &#39;CLICK&#39; or &#39;UNSUB&#39; or &#39;REPORT&#39;,     &#39;Delivered&#39;&#x3D; &#39;SUCCESS&#39;  or &#39;OPEN&#39; or &#39;CLICK&#39; or &#39;UNSUB&#39; or &#39;REPORT&#39;,     &#39;Bounce&#39;: &#39;FAIL&#39;.    (optional)</param>
        /// <param name="filterBy">Filter by (optional)</param>
        /// <param name="filter">Text to search (recipient, sender, email subject or reason for suppression) (optional)</param>
        /// <param name="smartSearch">Smart search (optional, default to false)</param>
        /// <param name="orderby">Order by (optional)</param>
        /// <param name="ordertype"> (optional)</param>
        /// <param name="tz">Timezone Offset (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnalyticsListSucessResponsetBody)</returns>
        public async System.Threading.Tasks.Task<API.TurboSMTP.Client.ApiResponse<AnalyticsListSucessResponsetBody>> GetAnalyticsDataWithHttpInfoAsync(DateTime from, DateTime to, int? page = default(int?), int? limit = default(int?), List<AnalyticMailStatus> status = default(List<AnalyticMailStatus>), List<AnalyticFilterByOption> filterBy = default(List<AnalyticFilterByOption>), string filter = default(string), bool? smartSearch = default(bool?), AnalyticOrderBy orderby = default(AnalyticOrderBy), OrderType ordertype = default(OrderType), string tz = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("multi", "status[]", status));
            }
            if (filterBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("multi", "filter_by", filterBy));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (smartSearch != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "smart_search", smartSearch));
            }
            if (orderby != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "orderby", orderby));
            }
            if (ordertype != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "ordertype", ordertype));
            }
            if (tz != null)
            {
                localVarRequestOptions.QueryParameters.Add(API.TurboSMTP.Client.ClientUtils.ParameterToMultiMap("", "tz", tz));
            }

            localVarRequestOptions.Operation = "AnalyticsApi.GetAnalyticsData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AnalyticsListSucessResponsetBody>("/analytics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAnalyticsData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Analytics Single Item by ID Get Analytics Data by ID 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AnalyticMailItem</returns>
        public AnalyticMailItem GetAnalyticsDataByID(int id, int operationIndex = 0)
        {
            API.TurboSMTP.Client.ApiResponse<AnalyticMailItem> localVarResponse = GetAnalyticsDataByIDWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Analytics Single Item by ID Get Analytics Data by ID 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AnalyticMailItem</returns>
        public API.TurboSMTP.Client.ApiResponse<AnalyticMailItem> GetAnalyticsDataByIDWithHttpInfo(int id, int operationIndex = 0)
        {
            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Id", API.TurboSMTP.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AnalyticsApi.GetAnalyticsDataByID";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AnalyticMailItem>("/analytics/{Id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAnalyticsDataByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Analytics Single Item by ID Get Analytics Data by ID 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnalyticMailItem</returns>
        public async System.Threading.Tasks.Task<AnalyticMailItem> GetAnalyticsDataByIDAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            API.TurboSMTP.Client.ApiResponse<AnalyticMailItem> localVarResponse = await GetAnalyticsDataByIDWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Analytics Single Item by ID Get Analytics Data by ID 
        /// </summary>
        /// <exception cref="API.TurboSMTP.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnalyticMailItem)</returns>
        public async System.Threading.Tasks.Task<API.TurboSMTP.Client.ApiResponse<AnalyticMailItem>> GetAnalyticsDataByIDWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            API.TurboSMTP.Client.RequestOptions localVarRequestOptions = new API.TurboSMTP.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = API.TurboSMTP.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = API.TurboSMTP.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("Id", API.TurboSMTP.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AnalyticsApi.GetAnalyticsDataByID";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (consumerSecret) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerSecret")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerSecret", this.Configuration.GetApiKeyWithPrefix("consumerSecret"));
            }
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (consumerKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("consumerKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("consumerKey", this.Configuration.GetApiKeyWithPrefix("consumerKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AnalyticMailItem>("/analytics/{Id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAnalyticsDataByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
